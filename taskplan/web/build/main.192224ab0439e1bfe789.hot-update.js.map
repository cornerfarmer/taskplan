{"version":3,"file":"main.192224ab0439e1bfe789.hot-update.js","sources":["/home/domin/Dokumente/taskplan/taskplan/web/src/Scheduler.js"],"sourcesContent":["import React from 'react';\nimport Device from \"./Device\";\nimport State from \"./Global\";\nimport Prompt from \"./Prompt\";\n\nclass Scheduler extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            tasks: [],\n            max_running: 1,\n            hiddenDevices: {}\n        };\n\n        this.props.evtSource.addEventListener(\"SCHEDULER_OPTIONS\", (e) => {\n            const options = JSON.parse(e.data);\n            this.setState({\n                max_running: options.max_running\n            });\n        });\n\n        this.promptAddDeviceRefs = React.createRef();\n        this.openMaxRunningDialogRefs = React.createRef();\n        this.updateTasks = this.updateTasks.bind(this);\n        this.openMaxRunningDialog = this.openMaxRunningDialog.bind(this);\n        this.hideDevice = this.hideDevice.bind(this);\n    }\n\n    static refreshRunTime(task) {\n        task.run_time = parseInt((Date.now() - task.start_time) / 1000);\n    }\n\n    componentDidMount() {\n        var pm = this;\n        this.timerID = setInterval(\n            function() {\n                const tasks = pm.state.tasks.slice();\n                tasks.filter(task => task.state === State.RUNNING).forEach(task => Scheduler.refreshRunTime(task));\n                pm.setState({\n                    tasks: tasks\n                });\n            },\n            1000\n        );\n        this.props.repository.onChange(\"tasks\", this.updateTasks);\n        this.updateTasks(this.props.repository.tasks);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.timerID);\n        this.props.repository.removeOnChange(\"tasks\", this.updateTasks);\n    }\n\n    updateTasks(tasks) {\n        this.setState({\n            tasks: Object.values(tasks).filter(task => task.state === State.RUNNING || task.state === State.QUEUED)\n        });\n    }\n\n    openMaxRunningDialog() {\n        this.openMaxRunningDialogRefs.current.openDialog();\n    }\n\n    hideDevice(device) {\n        const hiddenDevices = Object.assign({}, this.state.hiddenDevices);\n\n        hiddenDevices[device.uuid] = true;\n\n        this.setState({\n            hiddenDevices: hiddenDevices\n        })\n    }\n\n    showDevice(device) {\n        const hiddenDevices = Object.assign({}, this.state.hiddenDevices);\n\n        hiddenDevices[device.uuid] = false;\n\n        this.setState({\n            hiddenDevices: hiddenDevices\n        })\n    }\n\n    render() {\n        return (\n            <div id=\"scheduler\">\n                <div className=\"dropdown\">\n                    <div className=\"action\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" >\n                        Add device\n                    </div>\n                    <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n                        {this.props.devices.filter(device => (device.uuid in this.state.hiddenDevices) && this.state.hiddenDevices[device.uuid]).map(device => (\n                            <div className=\"dropdown-item\" onClick={() => this.showDevice(device)}>{device.name}</div>\n                        ))}\n                        {this.props.devices.filter(device => (device.uuid in this.state.hiddenDevices) && this.state.hiddenDevices[device.uuid]).length > 0 &&\n                            <div className=\"dropdown-divider\"></div>\n                        }\n                        <div className=\"dropdown-item\" onClick={() => this.promptAddDeviceRefs.current.openDialog()}>Add new device</div>\n                    </div>\n                </div>\n                <Prompt ref={this.promptAddDeviceRefs} header=\"Add new device\" text=\"Specify the ip address and the port of the new device:\" url={\"/add_device\"}/>\n\n                <div className=\"mock-device\"></div>\n                 {this.props.devices.filter(device => !(device.uuid in this.state.hiddenDevices) || !this.state.hiddenDevices[device.uuid]).map(device => (\n                    <Device device={device} tasks={this.state.tasks.filter(task => task.device === device.uuid)} hideDevice={this.hideDevice}/>\n                ))}\n                {this.props.devices.filter(device => !(device.uuid in this.state.hiddenDevices) || !this.state.hiddenDevices[device.uuid]).length % 2 === 1 &&\n                    <div className=\"mock-device\"></div>\n                }\n            </div>\n        );\n    }\n}\n\n\nexport default Scheduler;"],"mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AADA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AADA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AADA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AA3GA;AACA;AA6GA;;;;A","sourceRoot":""}