{"version":3,"file":"main.ea6ad1813870df3ca74a.hot-update.js","sources":["/home/domin/Dokumente/taskplan/taskplan/web/src/Device.js","/home/domin/Dokumente/taskplan/taskplan/web/src/Scheduler.js"],"sourcesContent":["import React from 'react';\nimport State from './Global'\nimport Task from './Task'\nimport Prompt from \"./Prompt\";\n\nclass Device extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            max_running: 1,\n            showQueue: false\n        };\n\n        this.openMaxRunningDialog = this.openMaxRunningDialog.bind(this);\n        this.connect = this.connect.bind(this);\n        this.toggleQueue = this.toggleQueue.bind(this);\n    }\n\n    openMaxRunningDialog() {\n        this.openMaxRunningDialogRefs.current.openDialog();\n    }\n\n    connect() {\n        fetch(\"/connect_device/\" + this.props.device.uuid)\n            .then(res => res.json())\n            .then(\n                (result) => {\n                }\n            )\n    }\n\n    disconnect() {\n        fetch(\"/disconnect_device/\" + this.props.device.uuid)\n            .then(res => res.json())\n            .then(\n                (result) => {\n                }\n            )\n    }\n\n    toggleQueue() {\n        this.setState({\n            showQueue: !this.state.showQueue\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"device\">\n                <div className=\"header\">\n                    <span>{this.props.device.name}</span>\n                    {this.props.device.is_connected === 0 &&\n                        <div className=\"action\" onClick={this.connect}>\n                            Connect\n                        </div>\n                    }\n                    {this.props.device.is_connected === 1 &&\n                        <div className=\"action\" onClick={this.disconnect}>\n                            Disconnect\n                        </div>\n                    }\n                    <div className=\"hide-device\" onClick={() => this.props.hideDevice(this.props.device)}>\n                        <i className=\"fas fa-times\"></i>\n                    </div>\n                </div>\n\n                <div className=\"body\">\n                    {this.props.device.is_connected !== 0 &&\n                        <ul className=\"tasks\" id=\"tasks-running\">\n                            {this.props.tasks.filter(task => task.state === State.RUNNING).length === 0 &&\n                            <li className=\"mock-task\">\n                                Idle\n                            </li>\n                            }\n                            {this.props.tasks.filter(task => task.state === State.RUNNING).map((task, index) => (\n                                <Task\n                                    key={task.uuid}\n                                    task={task}\n                                    index={index}\n                                    highlightTask={this.props.highlightTask}\n                                />\n                            ))\n                            }\n                        </ul>\n                    }\n\n                    <div className=\"queue-header\">\n                        <div className=\"action\" onClick={this.toggleQueue}>\n                            {this.state.showQueue ?\n                                <i className=\"fas fa-minus\"></i>\n                                :\n                                <i className=\"fas fa-plus\"></i>\n                            }\n                        </div>\n                        Waiting ({this.props.tasks.filter(task => task.state === State.QUEUED).length})\n                    </div>\n                    {this.state.showQueue &&\n                        <ul className=\"tasks tasks-queued\">\n                            {this.props.tasks.filter(task => task.state === State.QUEUED).sort(function (a, b) {\n                                return a.queue_index - b.queue_index\n                            }).map((task, index) => (\n                                <Task\n                                    key={task.uuid}\n                                    task={task}\n                                    index={index}\n                                    highlightTask={this.props.highlightTask}\n                                />\n                            ))}\n                        </ul>\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\n\nexport default Device;","import React from 'react';\nimport Device from \"./Device\";\nimport State from \"./Global\";\n\nclass Scheduler extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            tasks: [],\n            max_running: 1,\n            hiddenDevices: {}\n        };\n\n        this.props.evtSource.addEventListener(\"SCHEDULER_OPTIONS\", (e) => {\n            const options = JSON.parse(e.data);\n            this.setState({\n                max_running: options.max_running\n            });\n        });\n\n        this.openMaxRunningDialogRefs = React.createRef();\n        this.updateTasks = this.updateTasks.bind(this);\n        this.openMaxRunningDialog = this.openMaxRunningDialog.bind(this);\n        this.hideDevice = this.hideDevice.bind(this);\n    }\n\n    static refreshRunTime(task) {\n        task.run_time = parseInt((Date.now() - task.start_time) / 1000);\n    }\n\n    componentDidMount() {\n        var pm = this;\n        this.timerID = setInterval(\n            function() {\n                const tasks = pm.state.tasks.slice();\n                tasks.filter(task => task.state === State.RUNNING).forEach(task => Scheduler.refreshRunTime(task));\n                pm.setState({\n                    tasks: tasks\n                });\n            },\n            1000\n        );\n        this.props.repository.onChange(\"tasks\", this.updateTasks);\n        this.updateTasks(this.props.repository.tasks);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.timerID);\n        this.props.repository.removeOnChange(\"tasks\", this.updateTasks);\n    }\n\n    updateTasks(tasks) {\n        this.setState({\n            tasks: Object.values(tasks).filter(task => task.state === State.RUNNING || task.state === State.QUEUED)\n        });\n    }\n\n    openMaxRunningDialog() {\n        this.openMaxRunningDialogRefs.current.openDialog();\n    }\n\n    hideDevice(device) {\n        const hiddenDevices = Object.assign({}, this.state.hiddenDevices);\n\n        hiddenDevices[device.uuid] = true;\n\n        this.setState({\n            hiddenDevices: hiddenDevices\n        })\n    }\n\n    showDevice(device) {\n        const hiddenDevices = Object.assign({}, this.state.hiddenDevices);\n\n        hiddenDevices[device.uuid] = false;\n\n        this.setState({\n            hiddenDevices: hiddenDevices\n        })\n    }\n\n    render() {\n        return (\n            <div id=\"scheduler\">\n                <div className=\"dropdown\">\n                    <div className=\"action\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" >\n                        Add device\n                    </div>\n                    <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n                        {this.props.devices.filter(device => (device.uuid in this.state.hiddenDevices) && this.state.hiddenDevices[device.uuid]).map(device => (\n                            <a className=\"dropdown-item\" onClick={() => this.showDevice(device)}>{device.name}</a>\n                        ))}\n                        <div className=\"dropdown-divider\"></div>\n                        <a className=\"dropdown-item\" >Add new device</a>\n                    </div>\n                </div>\n\n                 {this.props.devices.filter(device => !(device.uuid in this.state.hiddenDevices) || !this.state.hiddenDevices[device.uuid]).map(device => (\n                    <Device device={device} tasks={this.state.tasks.filter(task => task.device === device.uuid)} hideDevice={this.hideDevice}/>\n                ))}\n            </div>\n        );\n    }\n}\n\n\nexport default Scheduler;"],"mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AA7GA;AACA;AA+GA;;;;;;;;;;;;;;;;;;ACrHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AADA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AADA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AADA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAnGA;AACA;AAqGA;;;;A","sourceRoot":""}