{"version":3,"file":"static/js/main.chunk.js","sources":["/home/domin/Dokumente/taskplan/taskplan/web/src/less/index.less","/home/domin/Dokumente/taskplan/taskplan/web/src/fonts/fonts.css","/home/domin/Dokumente/taskplan/taskplan/web/src/App.js","/home/domin/Dokumente/taskplan/taskplan/web/src/Choice.js","/home/domin/Dokumente/taskplan/taskplan/web/src/ChoiceEditor.js","/home/domin/Dokumente/taskplan/taskplan/web/src/CodeVersionViewer.js","/home/domin/Dokumente/taskplan/taskplan/web/src/ConfigEditor.js","/home/domin/Dokumente/taskplan/taskplan/web/src/ControlBar.js","/home/domin/Dokumente/taskplan/taskplan/web/src/Device.js","/home/domin/Dokumente/taskplan/taskplan/web/src/FinishedTask.js","/home/domin/Dokumente/taskplan/taskplan/web/src/FlashMessageManager.js","/home/domin/Dokumente/taskplan/taskplan/web/src/Global.js","/home/domin/Dokumente/taskplan/taskplan/web/src/JsonEditor.js","/home/domin/Dokumente/taskplan/taskplan/web/src/Option.js","/home/domin/Dokumente/taskplan/taskplan/web/src/PausedTask.js","/home/domin/Dokumente/taskplan/taskplan/web/src/Preset.js","/home/domin/Dokumente/taskplan/taskplan/web/src/PresetBatchEditor.js","/home/domin/Dokumente/taskplan/taskplan/web/src/PresetEditor.js","/home/domin/Dokumente/taskplan/taskplan/web/src/PresetFilter.js","/home/domin/Dokumente/taskplan/taskplan/web/src/PresetGroup.js","/home/domin/Dokumente/taskplan/taskplan/web/src/PresetTab.js","/home/domin/Dokumente/taskplan/taskplan/web/src/PresetViewer.js","/home/domin/Dokumente/taskplan/taskplan/web/src/Project.js","/home/domin/Dokumente/taskplan/taskplan/web/src/ProjectManager.js","/home/domin/Dokumente/taskplan/taskplan/web/src/Prompt.js","/home/domin/Dokumente/taskplan/taskplan/web/src/ReassuringPrompt.js","/home/domin/Dokumente/taskplan/taskplan/web/src/Repository.js","/home/domin/Dokumente/taskplan/taskplan/web/src/Scheduler.js","/home/domin/Dokumente/taskplan/taskplan/web/src/Task.js","/home/domin/Dokumente/taskplan/taskplan/web/src/TaskEditor.js","/home/domin/Dokumente/taskplan/taskplan/web/src/TaskTab.js","/home/domin/Dokumente/taskplan/taskplan/web/src/TaskView.js","/home/domin/Dokumente/taskplan/taskplan/web/src/TaskViewer.js","/home/domin/Dokumente/taskplan/taskplan/web/src/View.js","/home/domin/Dokumente/taskplan/taskplan/web/src/fonts/Roboto-300-cyrillic-ext1.woff2","/home/domin/Dokumente/taskplan/taskplan/web/src/fonts/Roboto-300-cyrillic2.woff2","/home/domin/Dokumente/taskplan/taskplan/web/src/fonts/Roboto-300-greek-ext3.woff2","/home/domin/Dokumente/taskplan/taskplan/web/src/fonts/Roboto-300-greek4.woff2","/home/domin/Dokumente/taskplan/taskplan/web/src/fonts/Roboto-300-latin-ext6.woff2","/home/domin/Dokumente/taskplan/taskplan/web/src/fonts/Roboto-300-latin7.woff2","/home/domin/Dokumente/taskplan/taskplan/web/src/fonts/Roboto-300-vietnamese5.woff2","/home/domin/Dokumente/taskplan/taskplan/web/src/fonts/Roboto-400-cyrillic-ext8.woff2","/home/domin/Dokumente/taskplan/taskplan/web/src/fonts/Roboto-400-cyrillic9.woff2","/home/domin/Dokumente/taskplan/taskplan/web/src/fonts/Roboto-400-greek-ext10.woff2","/home/domin/Dokumente/taskplan/taskplan/web/src/fonts/Roboto-400-greek11.woff2","/home/domin/Dokumente/taskplan/taskplan/web/src/fonts/Roboto-400-latin-ext13.woff2","/home/domin/Dokumente/taskplan/taskplan/web/src/fonts/Roboto-400-latin14.woff2","/home/domin/Dokumente/taskplan/taskplan/web/src/fonts/Roboto-400-vietnamese12.woff2","/home/domin/Dokumente/taskplan/taskplan/web/src/fonts/Roboto-500-cyrillic-ext15.woff2","/home/domin/Dokumente/taskplan/taskplan/web/src/fonts/Roboto-500-cyrillic16.woff2","/home/domin/Dokumente/taskplan/taskplan/web/src/fonts/Roboto-500-greek-ext17.woff2","/home/domin/Dokumente/taskplan/taskplan/web/src/fonts/Roboto-500-greek18.woff2","/home/domin/Dokumente/taskplan/taskplan/web/src/fonts/Roboto-500-latin-ext20.woff2","/home/domin/Dokumente/taskplan/taskplan/web/src/fonts/Roboto-500-latin21.woff2","/home/domin/Dokumente/taskplan/taskplan/web/src/fonts/Roboto-500-vietnamese19.woff2","/home/domin/Dokumente/taskplan/taskplan/web/src/fonts/Roboto-700-cyrillic-ext22.woff2","/home/domin/Dokumente/taskplan/taskplan/web/src/fonts/Roboto-700-cyrillic23.woff2","/home/domin/Dokumente/taskplan/taskplan/web/src/fonts/Roboto-700-greek-ext24.woff2","/home/domin/Dokumente/taskplan/taskplan/web/src/fonts/Roboto-700-greek25.woff2","/home/domin/Dokumente/taskplan/taskplan/web/src/fonts/Roboto-700-latin-ext27.woff2","/home/domin/Dokumente/taskplan/taskplan/web/src/fonts/Roboto-700-latin28.woff2","/home/domin/Dokumente/taskplan/taskplan/web/src/fonts/Roboto-700-vietnamese26.woff2","webpack:///./src/fonts/fonts.css?65f1","/home/domin/Dokumente/taskplan/taskplan/web/src/index.js","webpack:///./src/less/index.less?4a5c"],"sourcesContent":["exports = module.exports = require(\"../../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \"body {\\n  font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\\n  color: #757575;\\n  line-height: 1.15;\\n  background: #FAFAFA;\\n}\\nhtml,\\nbody,\\n#root,\\n#root > #page,\\n#root > #page > .container > .row,\\n#root > #page > .container > .row > div,\\n#root > #page > .container > .row > div > #scheduler {\\n  height: 100%;\\n}\\n#root > #page > .container {\\n  height: calc(100% - 39px);\\n  max-width: none;\\n}\\n#root > #page > .container > .row > div:first-child {\\n  padding-right: 0;\\n}\\n#root > .container > .row > div:last-child {\\n  padding-left: 0;\\n}\\nh1 {\\n  font-size: 80px;\\n  font-weight: 300;\\n  line-height: 1;\\n  margin-bottom: 40px;\\n}\\nh2 {\\n  font-size: 30px;\\n  font-weight: 400;\\n  line-height: 40px;\\n  margin-bottom: 15px;\\n}\\n.buttons {\\n  display: flex;\\n}\\n.buttons div {\\n  background: rgba(158, 158, 158, 0.2);\\n  padding: 6px 10px;\\n  border-radius: 2px;\\n  cursor: pointer;\\n  text-transform: uppercase;\\n  font-size: 14px;\\n}\\n.buttons div:first-child {\\n  background: #3f51b5;\\n  color: white;\\n  margin-right: 10px;\\n}\\n.buttons div:last-child {\\n  margin-right: 0;\\n}\\nlabel {\\n  margin-bottom: 0;\\n}\\n.separator {\\n  margin: 0 5px;\\n}\\n#scheduler {\\n  padding: 16px 0 16px 0;\\n  overflow-y: auto;\\n  margin: 0 auto;\\n  display: flex;\\n  flex-direction: row;\\n  flex-wrap: wrap;\\n  align-items: flex-start;\\n  align-content: flex-start;\\n  justify-content: center;\\n}\\n#scheduler #max-running-tasks {\\n  cursor: pointer;\\n}\\n#scheduler > .dropdown {\\n  width: 510px;\\n  margin-bottom: 10px;\\n}\\n#scheduler > .dropdown div.action {\\n  margin-bottom: 0;\\n}\\n#scheduler > .dropdown > .dropdown-menu {\\n  border-radius: 0px;\\n  transform: translate3d(0px, 24px, 0px) !important;\\n}\\n#scheduler > .dropdown > .dropdown-menu .dropdown-item {\\n  cursor: pointer;\\n}\\n#scheduler > .dropdown > .dropdown-menu .dropdown-item:active {\\n  background-color: #3f51b5;\\n}\\n.mock-device {\\n  width: 510px;\\n  height: 0;\\n}\\n.device {\\n  border: 1px solid rgba(0, 0, 0, 0.1);\\n  margin-bottom: 20px;\\n  width: 500px;\\n  max-height: 300px;\\n  margin-right: 10px;\\n}\\n.device > .header {\\n  background: rgba(0, 0, 0, 0.05);\\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: space-between;\\n  align-items: center;\\n  height: 40px;\\n  padding: 0 16px;\\n}\\n.device > .header > span {\\n  flex: 1 1;\\n}\\n.device > .header .action {\\n  margin-bottom: 0;\\n  margin-right: 16px;\\n}\\n.device > .header .hide-device {\\n  cursor: pointer;\\n}\\n.device .queue-header {\\n  display: flex;\\n  align-items: center;\\n}\\n.device .queue-header .action {\\n  box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 3px 1px -2px rgba(0, 0, 0, 0.2), 0 1px 5px 0 rgba(0, 0, 0, 0.12);\\n  width: 21px;\\n  height: 21px;\\n  align-items: center;\\n  justify-content: center;\\n  padding: 0;\\n  margin: 0;\\n  margin-right: 8px;\\n}\\n.device .body {\\n  padding: 16px;\\n}\\n.device .tasks {\\n  padding: 0;\\n  margin-bottom: 10px;\\n}\\n.device .tasks.tasks-queued {\\n  margin: 0;\\n}\\n.device .tasks .mock-task {\\n  background: white;\\n  border: 2px dashed rgba(0, 0, 0, 0.1);\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n  font-weight: 300;\\n  font-size: 20px;\\n  color: rgba(0, 0, 0, 0.4);\\n  height: 132px;\\n}\\n.device .tasks .task {\\n  list-style: none;\\n  box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 3px 1px -2px rgba(0, 0, 0, 0.2), 0 1px 5px 0 rgba(0, 0, 0, 0.12);\\n  background: white;\\n}\\n.device .tasks .task .content {\\n  padding: 16px;\\n  padding-bottom: 12px;\\n  border: 1px solid rgba(0, 0, 0, 0.1);\\n  border-bottom: none;\\n}\\n.device .tasks .task .header {\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: space-between;\\n  align-items: flex-start;\\n}\\n.device .tasks .task .header .status {\\n  text-align: right;\\n  line-height: 1;\\n}\\n.device .tasks .task .header .status .iterations {\\n  font-size: 12px;\\n  color: #AAA;\\n}\\n.tasks-queued.device .tasks .task .header {\\n  cursor: grab;\\n}\\n.device .tasks .task .header .project-name {\\n  font-weight: 300;\\n  font-size: 24px;\\n  margin-bottom: 10px;\\n}\\n.device .tasks .task .progress {\\n  background: #3f51b5;\\n  height: 2px;\\n  margin-bottom: 10px;\\n  border-radius: 0;\\n  transition: width 400ms ease-in-out;\\n}\\n.device .tasks .task .preset-name {\\n  font-size: 14px;\\n  cursor: pointer;\\n}\\n.device .tasks .task .try-number {\\n  background: rgba(158, 158, 158, 0.2);\\n  padding: 1px 7px 2px 7px;\\n  margin-right: 7px;\\n  display: inline-block;\\n  line-height: 1;\\n  vertical-align: top;\\n}\\n.device .tasks .task .toolbar {\\n  background: rgba(158, 158, 158, 0.2);\\n  padding: 5px 16px 1px 16px;\\n  line-height: 1;\\n  border: 1px solid rgba(0, 0, 0, 0.1);\\n}\\n.device .tasks .task .toolbar > span {\\n  display: flex;\\n  align-items: center;\\n}\\n#scheduler > .dropdown .action,\\n.device .action,\\n.device .tasks .task .toolbar .action {\\n  background: #3f51b5;\\n  padding: 0 10px;\\n  text-transform: uppercase;\\n  display: inline-flex;\\n  align-items: center;\\n  color: white;\\n  border-radius: 2px;\\n  font-weight: 500;\\n  /* box-shadow: 0 2px 2px 0 rgba(0,0,0,.14),0 3px 1px -2px rgba(0,0,0,.2),0 1px 5px 0 rgba(0,0,0,.12);*/\\n  height: 24px;\\n  font-size: 13px;\\n  cursor: pointer;\\n  margin-right: 5px;\\n  margin-bottom: 4px;\\n}\\n.device .tasks .task .toolbar .action i {\\n  margin-right: 7px;\\n}\\n.device .tasks .task .toolbar .action span {\\n  margin-top: 2px;\\n}\\n.device .tasks .task .toolbar .dropdown {\\n  display: inline-flex;\\n  margin-bottom: 4px;\\n}\\n.device .tasks .task .toolbar .action.dropdown-toggle i {\\n  margin: 0;\\n}\\n.device .tasks .task .toolbar .current-action {\\n  flex: 2 1;\\n  text-align: right;\\n  font-size: 12px;\\n}\\n.device .tasks .task.on-drag-over {\\n  border: 3px dashed #3f51b5;\\n  box-shadow: none;\\n}\\n.device .tasks .task.on-drag-over .content,\\n.device .tasks .task.on-drag-over .toolbar {\\n  visibility: hidden;\\n}\\n#root div.jsoneditor-tree div.jsoneditor-tree-inner {\\n  padding-bottom: 100px;\\n}\\n.jsoneditor .inherited-value .jsoneditor-field,\\n.jsoneditor .inherited-value .jsoneditor-value {\\n  color: #888888;\\n}\\n.jsoneditor table.jsoneditor-values.inherited-value td .revert {\\n  display: none;\\n}\\n.jsoneditor table.jsoneditor-values:not(.inherited-value) td .revert {\\n  width: 24px;\\n  height: 24px;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  font-size: 16px;\\n  color: #3f51b5;\\n  cursor: pointer;\\n}\\n.jsoneditor table.jsoneditor-values.new-value td .revert i:before {\\n  content: \\\"\\\\f00d\\\";\\n}\\n#project-manager {\\n  border: 1px solid rgba(0, 0, 0, 0.1);\\n  border-top: 0;\\n  border-bottom: 0;\\n  height: 100%;\\n  position: relative;\\n  display: flex;\\n  flex-direction: column;\\n}\\n#project-manager #projects-toolbar {\\n  display: flex;\\n  padding: 5px 16px;\\n  background: #e8e8e8;\\n  justify-content: space-between;\\n  z-index: 10;\\n}\\n#project-manager #projects-toolbar #project-selector span {\\n  margin-right: 20px;\\n}\\n#project-manager #projects-toolbar #project-selector span i {\\n  color: #BBB;\\n}\\n#project-manager #projects-toolbar #project-selector span.active i {\\n  color: inherit;\\n  cursor: pointer;\\n}\\n#project-manager #projects-toolbar #project-toolbar {\\n  display: flex;\\n  flex-direction: row;\\n}\\n#project-manager #projects-toolbar #project-toolbar #code-version {\\n  padding: 0 10px;\\n  border-radius: 2px;\\n  font-weight: 500;\\n  margin-right: 10px;\\n  color: #757575;\\n  background: #f2f2f2;\\n  display: flex;\\n  align-items: stretch;\\n  border: 1px solid rgba(0, 0, 0, 0.1);\\n  cursor: pointer;\\n}\\n#project-manager #projects-toolbar #project-toolbar #tb-link {\\n  background: #F57C00;\\n  color: white;\\n  border-radius: 2px;\\n  padding: 0 3px;\\n  font-weight: 500;\\n  cursor: pointer;\\n  display: flex;\\n  align-items: center;\\n}\\n#project-manager #projects {\\n  overflow-y: hidden;\\n  flex: 1 1 auto;\\n  height: 100px;\\n  background: #FAFAFA;\\n  z-index: 10;\\n}\\n#project-manager #projects .project {\\n  height: 100%;\\n  display: flex;\\n  flex-direction: column;\\n}\\n#project-manager #projects .project .tabs {\\n  display: flex;\\n  border: 1px solid rgba(0, 0, 0, 0.1);\\n  border-right: none;\\n  border-left: none;\\n  background: white;\\n  flex: 0 0 auto;\\n}\\n#project-manager #projects .project .tabs div {\\n  padding: 16px;\\n  border-right: 1px solid rgba(0, 0, 0, 0.1);\\n  flex: 2 1;\\n  text-align: center;\\n  font-weight: 300;\\n  font-size: 24px;\\n  background: rgba(0, 0, 0, 0.05);\\n  cursor: pointer;\\n}\\n#project-manager #projects .project .tabs div:hover {\\n  background: rgba(0, 0, 0, 0.025);\\n}\\n#project-manager #projects .project .tabs div.tab-active,\\n#project-manager #projects .project .tabs div.tab-active:hover {\\n  background: white;\\n}\\n#project-manager #projects .project .tabs div:last-child {\\n  border: none;\\n}\\n#project-manager #projects .project .sorting {\\n  padding: 5px 16px;\\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\\n}\\n#project-manager #projects .project .sorting > div > * {\\n  margin-right: 10px;\\n}\\n#project-manager #projects .project .sorting > div > .fa,\\n#project-manager #projects .project .sorting > div > .fas {\\n  cursor: pointer;\\n}\\n#project-manager #projects .project > .preset-filter {\\n  border: none;\\n}\\n#project-manager #projects .project .tab {\\n  flex: 1 1 auto;\\n  display: flex;\\n  flex-direction: column;\\n  min-height: 0;\\n}\\n#project-manager #projects .project .presets-tab,\\n#project-manager #projects .project .tasks-tab {\\n  overflow-y: auto;\\n  flex: 1 1 auto;\\n}\\n#project-manager #projects .project ul {\\n  padding: 0;\\n  margin-bottom: 0;\\n}\\n#project-manager #projects .project ul .item {\\n  list-style: none;\\n}\\n#project-manager #projects .project ul .item-preset[draggable=\\\"true\\\"] .header {\\n  cursor: grab;\\n}\\n#project-manager #projects .project ul .item-preset.on-drag-over {\\n  border: 3px dashed #3f51b5;\\n  box-shadow: none;\\n}\\n#project-manager #projects .project ul .item-preset.on-drag-over .header {\\n  visibility: hidden;\\n}\\n#project-manager #projects .project ul .item-preset .grip-icon {\\n  width: 28px;\\n  height: 28px;\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n}\\n#project-manager #projects .project ul .item-preset .group-header,\\n#project-manager #projects .project ul .item-preset .header {\\n  cursor: pointer;\\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: space-between;\\n  align-items: center;\\n}\\n#project-manager #projects .project ul .item-preset .group-header {\\n  background: white;\\n  font-weight: 300;\\n  justify-content: center;\\n  font-size: 24px;\\n  padding: 0 0 0 16px;\\n  text-transform: uppercase;\\n}\\n#project-manager #projects .project ul .item-preset .header {\\n  height: 40px;\\n  padding-left: 16px;\\n  padding-right: 10px;\\n  background: rgba(0, 0, 0, 0.05);\\n}\\n#project-manager #projects .project ul .item-preset .header .title {\\n  font-weight: 300;\\n  font-size: 18px;\\n}\\n#project-manager #projects .project ul .item-preset .header .toolbar {\\n  display: flex;\\n  align-items: center;\\n}\\n#project-manager #projects .project ul .item-task,\\n#project-manager #projects .project ul .item-choice {\\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\\n  background: white;\\n  display: flex;\\n}\\n#project-manager #projects .project ul .item-task.task-running {\\n  background-image: repeating-linear-gradient(-45deg, #f4f5ff, #f4f5ff 11px, white 10px, white 20px);\\n  background-size: 28px 28px;\\n  animation: move 2s linear infinite;\\n}\\n@keyframes move {\\n  0% {\\n    background-position: 0 0;\\n  }\\n  100% {\\n    background-position: 28px 0;\\n  }\\n}\\n#project-manager #projects .project ul .item-task.item-highlight {\\n  animation: highlight 1500ms ease-out;\\n}\\n@keyframes highlight {\\n  0% {\\n    background-color: #4f61f4;\\n  }\\n  100 {\\n    background-color: white;\\n  }\\n}\\n#project-manager #projects .project ul .item-choice.item-abstract {\\n  font-style: italic;\\n}\\n#project-manager #projects .project ul .item-task .content,\\n#project-manager #projects .project ul .item-choice .content {\\n  flex: 1 1 auto;\\n  padding: 16px;\\n}\\n#project-manager #projects .project ul .item-task .content .title,\\n#project-manager #projects .project ul .item-choice .content .title {\\n  font-weight: 300;\\n  font-size: 24px;\\n  margin-bottom: 10px;\\n}\\n#project-manager #projects .project ul .item-task .content .title .try-number,\\n#project-manager #projects .project ul .item-choice .content .title .try-number {\\n  background: #ececec;\\n  padding: 4px 10px;\\n  margin-right: 10px;\\n  display: inline-block;\\n  line-height: 1;\\n  font-size: 20px;\\n  vertical-align: top;\\n}\\n#project-manager #projects .project ul .item-task .content .footer,\\n#project-manager #projects .project ul .item-choice .content .footer {\\n  font-size: 14px;\\n  font-weight: 300;\\n  border-top: 1px solid rgba(0, 0, 0, 0.1);\\n  padding-top: 10px;\\n  margin-top: 10px;\\n}\\n#project-manager #projects .project ul .item-task .content .footer .task-error {\\n  color: #ef767a;\\n  font-weight: 400;\\n}\\n#project-manager #projects .project ul .item-task .content .footer span:not(.task-error):before {\\n  content: \\\"-\\\";\\n  margin: 0 7px;\\n}\\n#project-manager #projects .project ul .item-task .content .footer span:first-child:before,\\n#project-manager #projects .project ul .item-choice .content .footer span:first-child:before {\\n  content: \\\"\\\";\\n  margin: 0;\\n}\\n#project-manager #projects .project ul .item-task .content .footer span span,\\n#project-manager #projects .project ul .item-choice .content .footer span span {\\n  font-weight: 400;\\n}\\n#project-manager #projects .project ul .item-task .toolbar,\\n#project-manager #projects .project ul .item-choice .toolbar {\\n  border-left: 1px solid rgba(0, 0, 0, 0.1);\\n  padding: 10px;\\n  background: #f2f2f2;\\n  display: flex;\\n  flex-direction: column;\\n}\\n#project-manager #projects .project ul .item .toolbar .action {\\n  box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 3px 1px -2px rgba(0, 0, 0, 0.2), 0 1px 5px 0 rgba(0, 0, 0, 0.12);\\n  width: 28px;\\n  height: 28px;\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n  background: #3f51b5;\\n  border-radius: 2px;\\n  cursor: pointer;\\n  color: white;\\n  font-size: 12px;\\n}\\n#project-manager #projects .project ul .item .toolbar .action.action-disabled {\\n  cursor: not-allowed;\\n  background: gray;\\n}\\n#project-manager #projects .project ul .item-task .toolbar .action,\\n#project-manager #projects .project ul .item-choice .toolbar .action {\\n  margin-bottom: 4px;\\n}\\n#project-manager #projects .project ul .item-preset .header .toolbar .action {\\n  margin-left: 4px;\\n}\\n.tasks .task .toolbar .action.dropdown-toggle,\\n#project-manager #projects .project ul .item-task .toolbar .action.dropdown-toggle,\\n#project-manager #projects .project ul .item-choice .toolbar .action.dropdown-toggle {\\n  margin: 0;\\n}\\n#project-manager #projects .project ul .item-task .toolbar .action.dropdown-toggle,\\n#project-manager #projects .project ul .item-choice .toolbar .action.dropdown-toggle {\\n  height: 14px;\\n}\\n.tasks .task .toolbar .action.dropdown-toggle:after,\\n#project-manager #projects .project ul .item-task .toolbar .action.dropdown-toggle:after,\\n#project-manager #projects .project ul .item-choice .toolbar .action.dropdown-toggle:after {\\n  display: none;\\n}\\n.tasks .task .toolbar .dropdown-menu,\\n#project-manager #projects .project ul .item-task .toolbar .dropdown-menu,\\n#project-manager #projects .project ul .item-choice .toolbar .dropdown-menu {\\n  box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 3px 1px -2px rgba(0, 0, 0, 0.2), 0 1px 5px 0 rgba(0, 0, 0, 0.12);\\n  min-width: auto;\\n  padding: 7px;\\n  border: 1px solid #E3E3E3;\\n  border-radius: 0;\\n  margin-top: 5px;\\n}\\n.tasks .task .toolbar .dropdown-menu {\\n  left: -42px !important;\\n}\\n#project-manager #projects .project ul .item .toolbar .dropdown-menu {\\n  left: 4px !important;\\n}\\n.tasks .task .toolbar .dropdown-menu:after,\\n#project-manager #projects .project ul .item .toolbar .dropdown-menu:after {\\n  content: \\\" \\\";\\n  position: absolute;\\n  bottom: 100%;\\n  left: 50%;\\n  margin-left: -8px;\\n  border: 10px solid transparent;\\n  border-bottom-color: white;\\n}\\n.tasks .task .toolbar .dropdown-menu .action:last-child,\\n#project-manager #projects .project ul .item .toolbar .dropdown-menu .action:last-child {\\n  margin: 0;\\n}\\n#project-manager #projects .project .tab-toolbar {\\n  display: flex;\\n  padding: 5px 16px;\\n  background: rgba(158, 158, 158, 0.2);\\n  flex-direction: row;\\n  justify-content: space-between;\\n  flex: 0 0 auto;\\n}\\n#project-manager #projects .project .tab-toolbar label {\\n  margin-bottom: 0;\\n  display: flex;\\n  align-items: center;\\n}\\n#project-manager #projects .project .tab-toolbar label input {\\n  margin-right: 10px;\\n}\\n#project-manager #projects .project .tab-toolbar .buttons div:last-child {\\n  margin-right: 0;\\n}\\n.prompt-wrapper {\\n  position: fixed;\\n  left: 0;\\n  right: 0;\\n  top: 0;\\n  bottom: 0;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  background: rgba(0, 0, 0, 0.5);\\n  z-index: 100;\\n}\\n.prompt-wrapper .prompt {\\n  box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 3px 1px -2px rgba(0, 0, 0, 0.2), 0 1px 5px 0 rgba(0, 0, 0, 0.12);\\n  background: white;\\n  max-width: 300px;\\n  border-radius: 2px;\\n}\\n.prompt-wrapper .prompt.preset-prompt {\\n  max-width: 600px;\\n  width: 600px;\\n}\\n.prompt-wrapper .prompt .prompt-header {\\n  background: #3f51b5;\\n  padding: 5px 16px;\\n  color: white;\\n}\\n.prompt-wrapper .prompt .prompt-text {\\n  font-size: 14px;\\n  padding: 16px;\\n  padding-bottom: 0;\\n}\\n.prompt-wrapper .prompt > input,\\n.prompt-wrapper .prompt > select {\\n  margin: 10px 16px 0 16px;\\n  text-align: right;\\n  width: calc(100% - 32px);\\n}\\n.prompt-wrapper .jsoneditor {\\n  width: calc(100% - 32px);\\n  margin: 10px 16px 16px 16px;\\n  height: 250px;\\n  border-color: #3f51b5;\\n}\\n.prompt-wrapper .jsoneditor div.jsoneditor-menu {\\n  background-color: #3f51b5;\\n  border-color: #3f51b5;\\n}\\n.editor .buttons,\\n.prompt-wrapper .prompt .buttons {\\n  display: flex;\\n  justify-content: flex-end;\\n  margin: 16px 16px 16px 16px;\\n}\\n.editor.task-editor {\\n  flex: 1 1;\\n}\\n.editor .header {\\n  padding: 5px 16px;\\n  background: rgba(158, 158, 158, 0.2);\\n}\\n.editor .field {\\n  margin: 10px 16px;\\n}\\n.editor .preset-filter {\\n  margin: 30px 16px;\\n}\\n.editor .field {\\n  display: flex;\\n  align-items: center;\\n  justify-content: stretch;\\n}\\n.editor .field label {\\n  margin: 0;\\n  width: 150px;\\n}\\n.editor .field input,\\n.editor .field select {\\n  flex: 2 1;\\n  padding-left: 5px;\\n}\\n.editor .field input[type=\\\"checkbox\\\"] {\\n  flex: none;\\n}\\n.editor .jsoneditor {\\n  width: calc(100% - 32px);\\n  resize: vertical;\\n  margin: 16px;\\n  height: 250px;\\n  border-color: #3f51b5;\\n}\\n.editor .jsoneditor-readOnly .jsoneditor {\\n  border-color: rgba(158, 158, 158, 0.2);\\n  height: auto;\\n}\\n.editor .jsoneditor-readOnly .ace-jsoneditor .ace_marker-layer .ace_active-line,\\n.editor .jsoneditor-readOnly .ace-jsoneditor .ace_gutter-active-line {\\n  background-color: inherit;\\n}\\n.editor .jsoneditor-readOnly .ace-jsoneditor .ace_scroller {\\n  background-color: rgba(158, 158, 158, 0.1);\\n}\\n.editor .jsoneditor-readOnly .ace_cursor-layer {\\n  display: none;\\n}\\n.editor .editor-loading {\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n  height: 250px;\\n  border: 1px solid rgba(0, 0, 0, 0.1);\\n  margin: 16px;\\n}\\n.editor .jsoneditor div.jsoneditor-menu {\\n  background-color: #3f51b5;\\n  border-color: #3f51b5;\\n}\\n.task-editor .command {\\n  cursor: pointer;\\n}\\n.slide-editor {\\n  position: absolute;\\n  width: 400px;\\n  left: -400px;\\n  top: 0;\\n  border-left: 1px solid rgba(0, 0, 0, 0.1);\\n  border-right: 1px solid rgba(0, 0, 0, 0.1);\\n  background: #fafafa;\\n  height: 100%;\\n  animation: slide-in 0.4s ease;\\n  overflow-y: auto;\\n}\\n@keyframes slide-in {\\n  0% {\\n    transform: translateX(400px);\\n  }\\n  100% {\\n    transform: translateY(0);\\n  }\\n}\\n.slide-editor .header {\\n  display: flex;\\n  justify-content: space-between;\\n  align-items: center;\\n  cursor: pointer;\\n}\\n.slide-editor .header i {\\n  padding: 2px 10px;\\n  margin: -2px -10px;\\n}\\n.task-viewer .title,\\n.task-viewer .metadata,\\n.task-viewer h2,\\n.task-viewer .notes,\\n.task-viewer .presets,\\n.task-viewer .checkpoints {\\n  margin: 10px 16px;\\n}\\n.task-viewer .title {\\n  font-weight: 300;\\n  font-size: 24px;\\n}\\n.task-viewer .title .try-number {\\n  background: rgba(158, 158, 158, 0.2);\\n  padding: 4px 10px;\\n  margin-right: 10px;\\n  display: inline-block;\\n  line-height: 1;\\n  font-size: 20px;\\n  vertical-align: top;\\n}\\n.task-viewer .metadata,\\n.task-viewer .presets {\\n  font-weight: 300;\\n}\\n.task-viewer .metadata div,\\n.task-viewer .presets div {\\n  margin-bottom: 5px;\\n}\\n.task-viewer .metadata div span,\\n.task-viewer .presets div span {\\n  font-weight: 400;\\n  display: inline-block;\\n  width: 100px;\\n}\\n.task-viewer h2 {\\n  font-weight: 300;\\n  font-size: 24px;\\n}\\n.task-viewer .checkpoints {\\n  max-height: 300px;\\n  overflow: auto;\\n}\\n.task-viewer .checkpoints > div {\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: space-between;\\n  background: white;\\n  border: 1px solid rgba(0, 0, 0, 0.1);\\n  margin-bottom: 5px;\\n  align-items: center;\\n}\\n.task-viewer .checkpoints > div .iteration {\\n  background: rgba(158, 158, 158, 0.2);\\n}\\n.task-viewer .checkpoints > div .action {\\n  background: #3f51b5;\\n  cursor: pointer;\\n  color: white;\\n}\\n.task-viewer .checkpoints > div .iteration,\\n.task-viewer .checkpoints > div .action {\\n  width: 28px;\\n  height: 28px;\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n}\\n.task-viewer .checkpoints > div .time {\\n  font-weight: 300;\\n}\\n.task-viewer textarea {\\n  min-height: 150px;\\n  width: 100%;\\n}\\n.code-version-viewer {\\n  display: flex;\\n  flex-direction: column;\\n}\\n.code-version-viewer .code-versions {\\n  overflow: auto;\\n}\\n.code-version-viewer .code-versions .code-version-row {\\n  display: flex;\\n  flex-direction: row;\\n  align-items: center;\\n  justify-content: center;\\n}\\n.code-version-viewer .code-versions .code-version-row .code-version-branch-arrow {\\n  width: 30px;\\n  height: 30px;\\n  cursor: pointer;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n}\\n.code-version-viewer .code-versions .code-version {\\n  background: rgba(158, 158, 158, 0.1);\\n  margin: 5px 0;\\n  max-width: 300px;\\n  border-radius: 5px;\\n  cursor: pointer;\\n  border: 1px solid rgba(0, 0, 0, 0.1);\\n  flex: 1 1 auto;\\n}\\n.code-version-viewer .code-versions .code-version.current-code-version {\\n  background: #3f51b5;\\n  color: white;\\n}\\n.code-version-viewer .code-versions .code-version .name {\\n  background: rgba(0, 0, 0, 0.05);\\n  font-weight: 300;\\n  padding: 5px 16px;\\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\\n}\\n.code-version-viewer .code-versions .code-version .time {\\n  font-size: 12px;\\n  text-align: center;\\n  padding: 2px 0;\\n}\\n.code-version-viewer .code-versions .arrow {\\n  text-align: center;\\n  font-size: 20px;\\n}\\n.preset-viewer label {\\n  display: flex;\\n  align-items: center;\\n  margin: 10px 16px;\\n}\\n.preset-viewer label input {\\n  margin-right: 10px;\\n}\\n.preset-viewer .preset-filter {\\n  margin: 10px 16px;\\n}\\n#flash-messages {\\n  position: absolute;\\n  left: 0;\\n  top: 0;\\n  z-index: 10;\\n  display: flex;\\n  flex-direction: column;\\n  align-items: flex-start;\\n}\\n#flash-messages .flash-message {\\n  opacity: 1;\\n  background: #3f51b5;\\n  border-radius: 0 2px 2px 0;\\n  color: white;\\n  padding: 5px 10px;\\n  max-width: 400px;\\n  display: inline-block;\\n  height: 26px;\\n  margin-top: 10px;\\n  transition: margin 0.4s;\\n  white-space: nowrap;\\n  text-overflow: ellipsis;\\n  font-size: 14px;\\n  font-weight: 300;\\n}\\n#flash-messages .flash-message:hover {\\n  opacity: 1;\\n}\\n#flash-messages .flash-message.level-40 {\\n  background: #ef767a;\\n}\\n#flash-messages .flash-message.level-30 {\\n  background: #eeb868;\\n}\\n#controlbar {\\n  box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 3px 1px -2px rgba(0, 0, 0, 0.2), 0 1px 5px 0 rgba(0, 0, 0, 0.12);\\n  background: rgba(158, 158, 158, 0.4);\\n  color: white;\\n}\\n#controlbar > .container {\\n  display: flex;\\n  align-items: center;\\n  flex-direction: row;\\n}\\n#controlbar > .container #title {\\n  background: #3f51b5;\\n  font-size: 24px;\\n  padding: 7px 10px;\\n  font-weight: 400;\\n  border-top: 1px solid rgba(0, 0, 0, 0.1);\\n  margin: 0 50px 0 0;\\n}\\n#controlbar > .container .action {\\n  box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 3px 1px -2px rgba(0, 0, 0, 0.2), 0 1px 5px 0 rgba(0, 0, 0, 0.12);\\n  width: 30px;\\n  height: 30px;\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n  border-radius: 2px;\\n  cursor: pointer;\\n  font-size: 14px;\\n  background: #3f51b5;\\n  margin-right: 10px;\\n}\\n.preset-filter {\\n  border: 1px solid rgba(158, 158, 158, 0.2);\\n  border-bottom: none;\\n  max-height: 350px;\\n  overflow: auto;\\n}\\n.preset-filter .preset-name {\\n  background: rgba(158, 158, 158, 0.05);\\n}\\n.preset-filter .choices-wrapper {\\n  overflow: y;\\n}\\n.preset-filter .choices {\\n  border-top: 1px solid rgba(158, 158, 158, 0.2);\\n  border-bottom: 1px solid rgba(158, 158, 158, 0.2);\\n}\\n.preset-filter .preset-name {\\n  padding: 5px 10px;\\n}\\n.preset-filter .choices .choice {\\n  padding: 10px;\\n  white-space: nowrap;\\n}\\n.preset-filter .choices .choice {\\n  background: white;\\n  cursor: pointer;\\n}\\n.preset-filter .choices .choice-selected.choice {\\n  background: #3f51b5;\\n  color: white;\\n}\\n.preset-filter .choices {\\n  display: flex;\\n}\\n.preset-filter .choices .choice {\\n  border-right: 1px solid rgba(158, 158, 158, 0.2);\\n}\\n.preset-filter .choices .choice.choice-default {\\n  font-weight: 500;\\n}\\n.preset-filter .choices .choice .task-numbers {\\n  margin-left: 10px;\\n  background: #ededed;\\n  border-radius: 2px;\\n  color: #1c1c1c;\\n  font-weight: 300;\\n  padding: 0 2px;\\n}\\n.preset-filter .choices .choice input {\\n  padding: 0;\\n  border: none;\\n}\\n.preset-filter .group-header {\\n  cursor: pointer;\\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\\n  display: flex;\\n  flex-direction: row;\\n  align-items: center;\\n  background: white;\\n  font-weight: 300;\\n  justify-content: center;\\n  font-size: 24px;\\n  padding: 0 0 0 16px;\\n  text-transform: uppercase;\\n}\\n\", \"\"]);\n\n","exports = module.exports = require(\"../../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Imports\nvar urlEscape = require(\"../../node_modules/css-loader/dist/runtime/url-escape.js\");\nvar ___CSS_LOADER_URL___0___ = urlEscape(require(\"./Roboto-300-cyrillic-ext1.woff2\"));\nvar ___CSS_LOADER_URL___1___ = urlEscape(require(\"./Roboto-300-cyrillic2.woff2\"));\nvar ___CSS_LOADER_URL___2___ = urlEscape(require(\"./Roboto-300-greek-ext3.woff2\"));\nvar ___CSS_LOADER_URL___3___ = urlEscape(require(\"./Roboto-300-greek4.woff2\"));\nvar ___CSS_LOADER_URL___4___ = urlEscape(require(\"./Roboto-300-vietnamese5.woff2\"));\nvar ___CSS_LOADER_URL___5___ = urlEscape(require(\"./Roboto-300-latin-ext6.woff2\"));\nvar ___CSS_LOADER_URL___6___ = urlEscape(require(\"./Roboto-300-latin7.woff2\"));\nvar ___CSS_LOADER_URL___7___ = urlEscape(require(\"./Roboto-400-cyrillic-ext8.woff2\"));\nvar ___CSS_LOADER_URL___8___ = urlEscape(require(\"./Roboto-400-cyrillic9.woff2\"));\nvar ___CSS_LOADER_URL___9___ = urlEscape(require(\"./Roboto-400-greek-ext10.woff2\"));\nvar ___CSS_LOADER_URL___10___ = urlEscape(require(\"./Roboto-400-greek11.woff2\"));\nvar ___CSS_LOADER_URL___11___ = urlEscape(require(\"./Roboto-400-vietnamese12.woff2\"));\nvar ___CSS_LOADER_URL___12___ = urlEscape(require(\"./Roboto-400-latin-ext13.woff2\"));\nvar ___CSS_LOADER_URL___13___ = urlEscape(require(\"./Roboto-400-latin14.woff2\"));\nvar ___CSS_LOADER_URL___14___ = urlEscape(require(\"./Roboto-500-cyrillic-ext15.woff2\"));\nvar ___CSS_LOADER_URL___15___ = urlEscape(require(\"./Roboto-500-cyrillic16.woff2\"));\nvar ___CSS_LOADER_URL___16___ = urlEscape(require(\"./Roboto-500-greek-ext17.woff2\"));\nvar ___CSS_LOADER_URL___17___ = urlEscape(require(\"./Roboto-500-greek18.woff2\"));\nvar ___CSS_LOADER_URL___18___ = urlEscape(require(\"./Roboto-500-vietnamese19.woff2\"));\nvar ___CSS_LOADER_URL___19___ = urlEscape(require(\"./Roboto-500-latin-ext20.woff2\"));\nvar ___CSS_LOADER_URL___20___ = urlEscape(require(\"./Roboto-500-latin21.woff2\"));\nvar ___CSS_LOADER_URL___21___ = urlEscape(require(\"./Roboto-700-cyrillic-ext22.woff2\"));\nvar ___CSS_LOADER_URL___22___ = urlEscape(require(\"./Roboto-700-cyrillic23.woff2\"));\nvar ___CSS_LOADER_URL___23___ = urlEscape(require(\"./Roboto-700-greek-ext24.woff2\"));\nvar ___CSS_LOADER_URL___24___ = urlEscape(require(\"./Roboto-700-greek25.woff2\"));\nvar ___CSS_LOADER_URL___25___ = urlEscape(require(\"./Roboto-700-vietnamese26.woff2\"));\nvar ___CSS_LOADER_URL___26___ = urlEscape(require(\"./Roboto-700-latin-ext27.woff2\"));\nvar ___CSS_LOADER_URL___27___ = urlEscape(require(\"./Roboto-700-latin28.woff2\"));\n\n// Module\nexports.push([module.id, \"/* cyrillic-ext */\\n@font-face {\\n  font-family: 'Roboto';\\n  font-style: normal;\\n  font-weight: 300;\\n  src: local('Roboto Light'), local('Roboto-Light'), url(\" + ___CSS_LOADER_URL___0___ + \") format('woff2');\\n  unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;\\n}\\n/* cyrillic */\\n@font-face {\\n  font-family: 'Roboto';\\n  font-style: normal;\\n  font-weight: 300;\\n  src: local('Roboto Light'), local('Roboto-Light'), url(\" + ___CSS_LOADER_URL___1___ + \") format('woff2');\\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\\n}\\n/* greek-ext */\\n@font-face {\\n  font-family: 'Roboto';\\n  font-style: normal;\\n  font-weight: 300;\\n  src: local('Roboto Light'), local('Roboto-Light'), url(\" + ___CSS_LOADER_URL___2___ + \") format('woff2');\\n  unicode-range: U+1F00-1FFF;\\n}\\n/* greek */\\n@font-face {\\n  font-family: 'Roboto';\\n  font-style: normal;\\n  font-weight: 300;\\n  src: local('Roboto Light'), local('Roboto-Light'), url(\" + ___CSS_LOADER_URL___3___ + \") format('woff2');\\n  unicode-range: U+0370-03FF;\\n}\\n/* vietnamese */\\n@font-face {\\n  font-family: 'Roboto';\\n  font-style: normal;\\n  font-weight: 300;\\n  src: local('Roboto Light'), local('Roboto-Light'), url(\" + ___CSS_LOADER_URL___4___ + \") format('woff2');\\n  unicode-range: U+0102-0103, U+0110-0111, U+1EA0-1EF9, U+20AB;\\n}\\n/* latin-ext */\\n@font-face {\\n  font-family: 'Roboto';\\n  font-style: normal;\\n  font-weight: 300;\\n  src: local('Roboto Light'), local('Roboto-Light'), url(\" + ___CSS_LOADER_URL___5___ + \") format('woff2');\\n  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\\n}\\n/* latin */\\n@font-face {\\n  font-family: 'Roboto';\\n  font-style: normal;\\n  font-weight: 300;\\n  src: local('Roboto Light'), local('Roboto-Light'), url(\" + ___CSS_LOADER_URL___6___ + \") format('woff2');\\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\\n}\\n/* cyrillic-ext */\\n@font-face {\\n  font-family: 'Roboto';\\n  font-style: normal;\\n  font-weight: 400;\\n  src: local('Roboto'), local('Roboto-Regular'), url(\" + ___CSS_LOADER_URL___7___ + \") format('woff2');\\n  unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;\\n}\\n/* cyrillic */\\n@font-face {\\n  font-family: 'Roboto';\\n  font-style: normal;\\n  font-weight: 400;\\n  src: local('Roboto'), local('Roboto-Regular'), url(\" + ___CSS_LOADER_URL___8___ + \") format('woff2');\\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\\n}\\n/* greek-ext */\\n@font-face {\\n  font-family: 'Roboto';\\n  font-style: normal;\\n  font-weight: 400;\\n  src: local('Roboto'), local('Roboto-Regular'), url(\" + ___CSS_LOADER_URL___9___ + \") format('woff2');\\n  unicode-range: U+1F00-1FFF;\\n}\\n/* greek */\\n@font-face {\\n  font-family: 'Roboto';\\n  font-style: normal;\\n  font-weight: 400;\\n  src: local('Roboto'), local('Roboto-Regular'), url(\" + ___CSS_LOADER_URL___10___ + \") format('woff2');\\n  unicode-range: U+0370-03FF;\\n}\\n/* vietnamese */\\n@font-face {\\n  font-family: 'Roboto';\\n  font-style: normal;\\n  font-weight: 400;\\n  src: local('Roboto'), local('Roboto-Regular'), url(\" + ___CSS_LOADER_URL___11___ + \") format('woff2');\\n  unicode-range: U+0102-0103, U+0110-0111, U+1EA0-1EF9, U+20AB;\\n}\\n/* latin-ext */\\n@font-face {\\n  font-family: 'Roboto';\\n  font-style: normal;\\n  font-weight: 400;\\n  src: local('Roboto'), local('Roboto-Regular'), url(\" + ___CSS_LOADER_URL___12___ + \") format('woff2');\\n  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\\n}\\n/* latin */\\n@font-face {\\n  font-family: 'Roboto';\\n  font-style: normal;\\n  font-weight: 400;\\n  src: local('Roboto'), local('Roboto-Regular'), url(\" + ___CSS_LOADER_URL___13___ + \") format('woff2');\\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\\n}\\n/* cyrillic-ext */\\n@font-face {\\n  font-family: 'Roboto';\\n  font-style: normal;\\n  font-weight: 500;\\n  src: local('Roboto Medium'), local('Roboto-Medium'), url(\" + ___CSS_LOADER_URL___14___ + \") format('woff2');\\n  unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;\\n}\\n/* cyrillic */\\n@font-face {\\n  font-family: 'Roboto';\\n  font-style: normal;\\n  font-weight: 500;\\n  src: local('Roboto Medium'), local('Roboto-Medium'), url(\" + ___CSS_LOADER_URL___15___ + \") format('woff2');\\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\\n}\\n/* greek-ext */\\n@font-face {\\n  font-family: 'Roboto';\\n  font-style: normal;\\n  font-weight: 500;\\n  src: local('Roboto Medium'), local('Roboto-Medium'), url(\" + ___CSS_LOADER_URL___16___ + \") format('woff2');\\n  unicode-range: U+1F00-1FFF;\\n}\\n/* greek */\\n@font-face {\\n  font-family: 'Roboto';\\n  font-style: normal;\\n  font-weight: 500;\\n  src: local('Roboto Medium'), local('Roboto-Medium'), url(\" + ___CSS_LOADER_URL___17___ + \") format('woff2');\\n  unicode-range: U+0370-03FF;\\n}\\n/* vietnamese */\\n@font-face {\\n  font-family: 'Roboto';\\n  font-style: normal;\\n  font-weight: 500;\\n  src: local('Roboto Medium'), local('Roboto-Medium'), url(\" + ___CSS_LOADER_URL___18___ + \") format('woff2');\\n  unicode-range: U+0102-0103, U+0110-0111, U+1EA0-1EF9, U+20AB;\\n}\\n/* latin-ext */\\n@font-face {\\n  font-family: 'Roboto';\\n  font-style: normal;\\n  font-weight: 500;\\n  src: local('Roboto Medium'), local('Roboto-Medium'), url(\" + ___CSS_LOADER_URL___19___ + \") format('woff2');\\n  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\\n}\\n/* latin */\\n@font-face {\\n  font-family: 'Roboto';\\n  font-style: normal;\\n  font-weight: 500;\\n  src: local('Roboto Medium'), local('Roboto-Medium'), url(\" + ___CSS_LOADER_URL___20___ + \") format('woff2');\\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\\n}\\n/* cyrillic-ext */\\n@font-face {\\n  font-family: 'Roboto';\\n  font-style: normal;\\n  font-weight: 700;\\n  src: local('Roboto Bold'), local('Roboto-Bold'), url(\" + ___CSS_LOADER_URL___21___ + \") format('woff2');\\n  unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;\\n}\\n/* cyrillic */\\n@font-face {\\n  font-family: 'Roboto';\\n  font-style: normal;\\n  font-weight: 700;\\n  src: local('Roboto Bold'), local('Roboto-Bold'), url(\" + ___CSS_LOADER_URL___22___ + \") format('woff2');\\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\\n}\\n/* greek-ext */\\n@font-face {\\n  font-family: 'Roboto';\\n  font-style: normal;\\n  font-weight: 700;\\n  src: local('Roboto Bold'), local('Roboto-Bold'), url(\" + ___CSS_LOADER_URL___23___ + \") format('woff2');\\n  unicode-range: U+1F00-1FFF;\\n}\\n/* greek */\\n@font-face {\\n  font-family: 'Roboto';\\n  font-style: normal;\\n  font-weight: 700;\\n  src: local('Roboto Bold'), local('Roboto-Bold'), url(\" + ___CSS_LOADER_URL___24___ + \") format('woff2');\\n  unicode-range: U+0370-03FF;\\n}\\n/* vietnamese */\\n@font-face {\\n  font-family: 'Roboto';\\n  font-style: normal;\\n  font-weight: 700;\\n  src: local('Roboto Bold'), local('Roboto-Bold'), url(\" + ___CSS_LOADER_URL___25___ + \") format('woff2');\\n  unicode-range: U+0102-0103, U+0110-0111, U+1EA0-1EF9, U+20AB;\\n}\\n/* latin-ext */\\n@font-face {\\n  font-family: 'Roboto';\\n  font-style: normal;\\n  font-weight: 700;\\n  src: local('Roboto Bold'), local('Roboto-Bold'), url(\" + ___CSS_LOADER_URL___26___ + \") format('woff2');\\n  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\\n}\\n/* latin */\\n@font-face {\\n  font-family: 'Roboto';\\n  font-style: normal;\\n  font-weight: 700;\\n  src: local('Roboto Bold'), local('Roboto-Bold'), url(\" + ___CSS_LOADER_URL___27___ + \") format('woff2');\\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\\n}\\n\", \"\"]);\n\n","import 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap/dist/js/bootstrap.js';\nimport \"@fortawesome/fontawesome-free/css/all.min.css\"\n\nimport React from 'react';\nimport Scheduler from './Scheduler'\nimport ProjectManager from \"./ProjectManager\";\nimport FlashMessageManager from \"./FlashMessageManager\"\nimport ControlBar from \"./ControlBar\";\nimport ReconnectingEventSource from \"reconnecting-eventsource\";\nimport Repository from \"./Repository\";\n\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            noConnection: true,\n            devices: []\n        };\n\n        this.evtSource = new ReconnectingEventSource(\"/update\", {});\n        this.repository = new Repository(this.evtSource);\n        this.projectManagerRef = React.createRef();\n\n        this.refreshConnectionState = this.refreshConnectionState.bind(this);\n\n        this.evtSource.onerror = this.refreshConnectionState;\n        this.evtSource.onopen = this.refreshConnectionState;\n\n        this.state.noConnection = (this.evtSource.readyState === 0);\n\n        this.evtSource.addEventListener(\"SCHEDULER_OPTIONS\", (e) => {\n            const options = JSON.parse(e.data);\n            this.setState({\n                devices: options.devices\n            });\n        });\n    }\n\n    refreshConnectionState() {        this.setState({\n            noConnection: this.evtSource.readyState === 0\n        });\n    }\n\n    render() {\n        return (\n            <div id=\"page\">\n                <FlashMessageManager evtSource={this.evtSource} noConnection={this.state.noConnection}/>\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-sm-8\">\n                            <Scheduler devices={this.state.devices} evtSource={this.evtSource} repository={this.repository} highlightTask={(task) => this.projectManagerRef.current.highlightTask(task)}/>\n                        </div>\n                        <div className=\"col-sm-4\">\n                            <ProjectManager devices={this.state.devices} ref={this.projectManagerRef} repository={this.repository}/>\n                        </div>\n                    </div>\n                </div>\n                <ControlBar evtSource={this.evtSource}/>\n            </div>\n        );\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReassuringPrompt from \"./ReassuringPrompt\";\n\nclass Choice extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.reassuringRemovePromptRefs = React.createRef();\n    }\n\n    render() {\n        return (\n            <li className={this.props.choice.abstract ? \"item item-abstract item-choice\" : \"item item-choice\"}>\n                <div className=\"content\">\n                    <div className=\"title\">{this.props.choice.name}</div>\n                    <div className=\"footer\">\n                        {this.props.choice.base !== \"\" ? <span><span>Inherits from:</span> {this.props.choice.base}</span> : <span>-</span>}\n                        <span><span>Created:</span> {this.props.choice.creation_time.toShortStr()}</span>\n                    </div>\n                </div>\n                <div className=\"toolbar\">\n                    <div className=\"action\" onClick={() => this.props.editFunc(this.props.choice, true, this.props.preset, this.props.preset.choices)} title=\"Clone choice\">\n                        <i className=\"far fa-copy\"></i>\n                    </div>\n                    <div className=\"action\" onClick={() => this.props.editFunc(this.props.choice, false, this.props.preset, this.props.preset.choices)} title=\"Edit choice\">\n                        <i className=\"fa fa-edit\"></i>\n                    </div>\n                    <div className=\"dropdown\">\n                        <div className=\"action dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                            <i className=\"fas fa-ellipsis-h\"></i>\n                        </div>\n                        <div className=\"dropdown-menu\">\n                            {this.props.removable ?\n                                <div className=\"action\" onClick={() => this.reassuringRemovePromptRefs.current.openDialog()} title=\"Remove choice\">\n                                    <i className=\"far fa-trash-alt\"></i>\n                                </div>\n                                :\n                                <div className=\"action action-disabled\" title=\"Choice cannot be removed, as there are tasks using it.\">\n                                    <i className=\"far fa-trash-alt\"></i>\n                                </div>\n                            }\n                        </div>\n                    </div>\n                </div>\n                <ReassuringPrompt ref={this.reassuringRemovePromptRefs} header=\"Really want to delete?\" text=\"Do you really want to remove this choice?\" url={\"/remove_choice/\" + this.props.choice.project_name + \"/\" + this.props.choice.uuid}/>\n            </li>\n        );\n    }\n}\n\nexport default Choice;","import React from 'react';\nimport ConfigEditor from \"./ConfigEditor\";\n\nclass ChoiceEditor extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            choice: null,\n            name: '',\n            base: '',\n            abstract: false,\n            dynamic: false,\n            forceDynamic: false,\n            possible_base_choices: [],\n            uuid_to_load: null,\n            preset: null\n        };\n\n        this.configEditor = React.createRef();\n        this.open = this.open.bind(this);\n        this.close = this.close.bind(this);\n        this.save = this.save.bind(this);\n        this.new = this.new.bind(this);\n        this.onNameChange = this.onNameChange.bind(this);\n        this.onBaseChange = this.onBaseChange.bind(this);\n        this.onAbstractChange = this.onAbstractChange.bind(this);\n        this.onDynamicChange = this.onDynamicChange.bind(this);\n        this.onIsBaseDynamic = this.onIsBaseDynamic.bind(this);\n        this.onTemplateChange = this.onTemplateChange.bind(this);\n    }\n\n    open(choice, duplicate, preset, possible_base_choices) {\n        this.props.closeEditors();\n        if (duplicate) {\n            this.setState({\n                choice: {name: choice.name, project_name: choice.project_name},\n                name: choice.name,\n                base: choice.base_uuid,\n                uuid_to_load: choice.uuid,\n                abstract: choice.abstract,\n                dynamic: choice.dynamic,\n                template: choice.isTemplate,\n                forceDynamic: false,\n                preset: preset,\n                possible_base_choices: possible_base_choices\n            });\n        } else {\n            this.setState({\n                choice: choice,\n                name: choice.name,\n                base: choice.base_uuid,\n                uuid_to_load: choice.uuid,\n                abstract: choice.abstract,\n                dynamic: choice.dynamic,\n                template: choice.isTemplate,\n                forceDynamic: false,\n                preset: preset,\n                possible_base_choices: possible_base_choices\n            });\n        }\n    }\n\n    new(preset, possible_base_choices) {\n        this.props.closeEditors();\n        this.setState({\n            choice: {name: 'New choice', project_name: preset.project_name},\n            name: '',\n            base: '',\n            abstract: false,\n            dynamic: false,\n            uuid_to_load: null,\n            forceDynamic: false,\n            preset: preset,\n            possible_base_choices: possible_base_choices\n        });\n    }\n\n    close() {\n        this.setState({\n            choice: null\n        });\n    }\n\n    save() {\n\n        var data = new FormData();\n\n        var dataJson = {};\n        if (this.state.name !== \"\")\n            dataJson['name'] = this.state.name;\n        if (this.state.base !== '')\n            dataJson['base'] = this.state.base;\n        if (this.state.abstract)\n            dataJson['abstract'] = this.state.abstract;\n        if (this.state.dynamic)\n            dataJson['dynamic'] = this.state.dynamic;\n        if (this.state.template)\n            dataJson['isTemplate'] = this.state.template;\n        dataJson['config'] = this.configEditor.current.state.config;\n\n        data.append(\"data\", JSON.stringify(dataJson));\n\n        var url = \"\";\n        if (this.state.choice.uuid)\n            url = \"/edit_choice/\" + this.state.preset.project_name  + \"/\" + this.state.preset.uuid + \"/\" + this.state.choice.uuid;\n        else\n            url = \"/add_choice/\" + this.state.preset.project_name + \"/\" + this.state.preset.uuid;\n\n        fetch(url,\n            {\n                method: \"POST\",\n                body: data\n            })\n            .then(res => res.json())\n            .then(\n                (result) => {\n\n                },\n                (error) => {\n\n                }\n            );\n\n        this.close();\n    }\n\n    onNameChange(event) {\n        this.setState({\n            name: event.target.value\n        });\n    }\n\n    onBaseChange(event) {\n        this.setState({\n            base: event.target.value\n        });\n    }\n\n    onAbstractChange(event) {\n        this.setState({\n            abstract: event.target.checked\n        });\n    }\n\n    onDynamicChange(event) {\n        this.setState({\n            dynamic: event.target.checked\n        });\n    }\n\n    onIsBaseDynamic(isDynamic) {\n        if (isDynamic) {\n            this.setState({\n                dynamic: true,\n                forceDynamic: true\n            });\n        } else if (this.state.forceDynamic) {\n            this.setState({\n                dynamic: false,\n                forceDynamic: false\n            });\n        }\n    }\n\n    onTemplateChange(event) {\n        this.setState({\n            template: event.target.checked\n        });\n    }\n\n    render() {\n        if (this.state.choice !== null) {\n            return (\n                <div className=\"choice-editor editor\" >\n                    <div className=\"header\">{this.state.choice.name}</div>\n                    <div className=\"field\">\n                        <label>Name:</label>\n                        <input value={this.state.name} onChange={this.onNameChange}  required=\"required\" />\n                    </div>\n                    <div className=\"field\">\n                        <label>Base:</label>\n                        <select value={this.state.base} onChange={this.onBaseChange}>\n                            <option value=\"\">None</option>\n                            {this.state.possible_base_choices.filter(choice => choice.uuid !== this.state.uuid_to_load).map(choice => (\n                                <option value={choice.uuid}>{choice.name}</option>\n                            ))}\n                        </select>\n                    </div>\n                    <div className=\"field\">\n                        <label>Abstract:</label>\n                        <input checked={this.state.abstract} onChange={this.onAbstractChange} type=\"checkbox\" />\n                    </div>\n                    <div className=\"field\">\n                        <label>Dynamic:</label>\n                        <input checked={this.state.dynamic} onChange={this.onDynamicChange} type=\"checkbox\" disabled={this.state.forceDynamic} />\n                    </div>\n                    <div className=\"field\">\n                        <label>Template:</label>\n                        <input checked={this.state.template} onChange={this.onTemplateChange} type=\"checkbox\" />\n                    </div>\n                    <ConfigEditor ref={this.configEditor} onDynamicChange={this.onIsBaseDynamic} url={\"/config/choice/\" + this.state.choice.project_name + (this.state.uuid_to_load !== null ? \"/\" + this.state.uuid_to_load : \"\")} bases={[this.state.base]}/>\n                    <div className=\"buttons\">\n                        <div onClick={this.save}>Save</div>\n                        <div onClick={this.close}>Cancel</div>\n                    </div>\n                </div>\n            );\n        } else {\n            return \"\";\n        }\n    }\n}\n\nexport default ChoiceEditor;","import React from 'react';\nimport ConfigEditor from \"./ConfigEditor\";\nimport {TaskName} from \"./Task\";\n\nclass CodeVersionViewer extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            open: false,\n            choices: {},\n            newName: \"\"\n        };\n\n        this.open = this.open.bind(this);\n        this.close = this.close.bind(this);\n        this.onNewNameChange = this.onNewNameChange.bind(this);\n        this.addCodeVersion = this.addCodeVersion.bind(this);\n        this.selectCodeVersion = this.selectCodeVersion.bind(this);\n        this.selectCodeVersion = this.selectCodeVersion.bind(this);\n    }\n\n    open() {\n        this.setState({\n            open: true\n        });\n    }\n\n    close() {\n        this.setState({\n            open: false\n        });\n    }\n\n    onNewNameChange(event) {\n        this.setState({\n            newName: event.target.value\n        });\n    }\n\n    addCodeVersion() {\n        fetch(\"/add_code_version/\" + this.props.project_name + \"/\" + this.state.newName)\n        .then(res => res.json())\n        .then(\n            (result) => {\n\n            },\n            (error) => {\n\n            }\n        );\n\n\n        this.setState({\n            newName: \"\"\n        });\n    }\n\n    selectCodeVersion(code_version) {\n        fetch(\"/select_code_version/\" + this.props.project_name + \"/\" + code_version)\n        .then(res => res.json())\n        .then(\n            (result) => {\n\n            },\n            (error) => {\n\n            }\n        );\n    }\n\n    findCodeVersionInTree(tree, code_version_uuid) {\n        if (tree.uuid === code_version_uuid) {\n            return tree;\n        } else {\n            for (let child of tree.children) {\n                const found = this.findCodeVersionInTree(child, code_version_uuid);\n                if (found !== null)\n                    return found;\n            }\n        }\n        return null;\n    }\n\n    selectBranch(codeVersion, child_index) {\n        let choices = Object.assign({}, this.state.choices);\n\n        choices[codeVersion.uuid] = child_index;\n\n        this.setState({\n            choices: choices\n        })\n    }\n\n    render() {\n        if (this.state.open && this.props.codeVersionTree !== null) {\n            let selectedNode = this.findCodeVersionInTree(this.props.codeVersionTree, this.props.currentCodeVersion);\n            let choicesToSelected = {};\n            while (selectedNode.base !== null) {\n                if (selectedNode.base.children.length > 0)\n                    choicesToSelected[selectedNode.base.uuid] = selectedNode.base.children.findIndex(x => x === selectedNode);\n                selectedNode = selectedNode.base;\n            }\n\n            let codeVersions = [{\"version\": this.props.codeVersionTree,  \"child_index\": 0, \"total_children\": 1}];\n            let currentCodeVersion = this.props.codeVersionTree;\n            while (currentCodeVersion.children.length > 0) {\n                let index = 0;\n                if (currentCodeVersion.uuid in this.state.choices) {\n                    index = this.state.choices[currentCodeVersion.uuid];\n                } else if (currentCodeVersion.uuid in choicesToSelected) {\n                    index = choicesToSelected[currentCodeVersion.uuid];\n                }\n\n                codeVersions.push({\"version\": currentCodeVersion.children[index], \"child_index\": index, \"total_children\": currentCodeVersion.children.length});\n                currentCodeVersion = currentCodeVersion.children[index];\n            }\n\n            return (\n                <div className=\"code-version-viewer slide-editor editor\" >\n                    <div className=\"header\">Code versions<i class=\"fas fa-times\" onClick={this.close}></i></div>\n                    <div className=\"code-versions\">\n                        {codeVersions.map((entry, i) => (\n                            <div>\n                                <div className=\"code-version-row\">\n                                    {entry.child_index > 0 ?\n                                        <div className=\"code-version-branch-arrow\" onClick={() => this.selectBranch(entry.version.base, entry.child_index - 1)}>\n                                            <i className=\"fas fa-chevron-left\"></i>\n                                        </div>\n                                        :\n                                        <div className=\"code-version-branch-arrow\">\n                                        </div>\n                                    }\n                                    <div className={this.props.currentCodeVersion === entry.version.uuid ? \"code-version current-code-version\" : \"code-version\"} onClick={() => this.selectCodeVersion(entry.version.uuid)}>\n                                        <div className=\"name\">{entry.version.name}</div>\n                                        <div className=\"time\">{entry.version.time.toShortStr()}</div>\n                                    </div>\n                                    {entry.child_index < entry.total_children - 1 ?\n                                        <div className=\"code-version-branch-arrow\" onClick={() => this.selectBranch(entry.version.base, entry.child_index + 1)}>\n                                            <i className=\"fas fa-chevron-right\"></i>\n                                        </div>\n                                        :\n                                        <div className=\"code-version-branch-arrow\">\n                                        </div>\n                                    }\n                                </div>\n                                {i < codeVersions.length - 1 &&\n                                    <div className=\"arrow\">\n                                        <i className=\"fas fa-long-arrow-alt-down\"></i>\n                                    </div>\n                                }\n                            </div>\n                            )\n                        )}\n                    </div>\n                    <div style={{\"flex\": \"1 1 0\"}}></div>\n                    <div className=\"header\">Add code version</div>\n                    <div className=\"field\">\n                        <label>Name:</label>\n                        <input value={this.state.newName} onChange={this.onNewNameChange} />\n                    </div>\n                    <div className=\"buttons\">\n                        <div onClick={this.addCodeVersion}>Add</div>\n                    </div>\n                </div>\n            );\n        } else {\n            return \"\";\n        }\n    }\n}\n\nexport default CodeVersionViewer;","import React from 'react';\nimport Prompt from \"./Prompt\";\nimport JsonEditor from './JsonEditor';\n\nclass ConfigEditor extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            config: {},\n            inheritedConfig: {},\n            loadedUrl: null,\n            dataJsonString: ''\n        };\n\n        this.jsonEditor = React.createRef();\n        this.onChange = this.onChange.bind(this);\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps.url !== this.props.url || JSON.stringify(prevProps.bases) !== JSON.stringify(this.props.bases))\n            this.reload();\n    }\n\n    componentDidMount() {\n        this.setState({\n            loadedUrl: null\n        });\n        this.reload();\n    }\n\n    reload() {\n        if (this.props.url === \"\") {\n\n            if (this.state.loadedUrl !== this.props.url) {\n                this.setState({\n                    config: {},\n                    inheritedConfig: {},\n                    loadedUrl: this.props.url\n                });\n                if (this.jsonEditor.current !== null)\n                    this.jsonEditor.current.updateEditor();\n            }\n        } else {\n            var dataJson = {};\n            dataJson['bases'] = this.props.bases;\n            let dataJsonString = JSON.stringify(dataJson);\n            if (this.state.loadedUrl !== this.props.url || this.state.dataJsonString !== dataJsonString) {\n                var data = new FormData();\n\n                data.append(\"data\", dataJsonString);\n\n                fetch(this.props.url,\n                    {\n                        method: \"POST\",\n                        body: data\n                    })\n                    .then(res => res.json())\n                    .then(\n                        (result) => {\n                            this.setState({\n                                inheritedConfig: result['inherited_config'],\n                                config: result['config'] !== null ? result['config'] : this.state.config,\n                                loadedUrl: this.props.url,\n                                dataJsonString: dataJsonString\n                            });\n                            this.jsonEditor.current.updateEditor();\n\n                            if (this.props.onDynamicChange !== undefined)\n                                this.props.onDynamicChange(result['dynamic'])\n                        },\n                        (error) => {\n\n                        }\n                    )\n            }\n        }\n    }\n\n    onChange(data) {\n        this.setState({\n            config: data\n        });\n    }\n\n    render() {\n        if (this.state.loadedUrl === this.props.url)\n            return (\n                <JsonEditor ref={this.jsonEditor} json={this.state.config} inheritedJson={this.state.inheritedConfig} onChange={this.onChange} options={this.props.preview ? {mode: 'code', modes: ['code'], readOnly: true, mainMenuBar: false, statusBar: false} : {}} />\n            );\n        else\n            return (\n                <div className=\"editor-loading\"><i className=\"fas fa-sync fa-spin fa-2x\"></i></div>\n            )\n    }\n}\n\nexport default ConfigEditor;","import React from 'react';\nimport Prompt from \"./Prompt\";\n\nclass ControlBar extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.openGlobalLog = this.openGlobalLog.bind(this);\n        this.pauseAll = this.pauseAll.bind(this);\n    }\n\n    openGlobalLog() {\n        window.open(\"/log\", '_blank');\n    }\n\n    pauseAll() {\n        fetch(\"/pause_all/\")\n            .then(res => res.json())\n            .then(\n                (result) => {\n\n                },\n                (error) => {\n\n                }\n            )\n    }\n\n    render() {\n        return (\n            <div id=\"controlbar\">\n                <div className=\"container\">\n                    <h1 id=\"title\">\n                        TaskPlan\n                    </h1>\n                    <div className=\"action\" onClick={this.pauseAll} title=\"Pause all running tasks\">\n                        <i className=\"fa fa-pause\"></i>\n                    </div>\n                    <div className=\"action\" onClick={this.openGlobalLog} title=\"Open the global log\">\n                        <i className=\"far fa-file-alt\"></i>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ControlBar;","import React from 'react';\nimport State from './Global'\nimport Task from './Task'\nimport Prompt from \"./Prompt\";\n\nclass Device extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            max_running: 1,\n            showQueue: false\n        };\n\n        this.openMaxRunningDialog = this.openMaxRunningDialog.bind(this);\n        this.connect = this.connect.bind(this);\n        this.disconnect = this.disconnect.bind(this);\n        this.toggleQueue = this.toggleQueue.bind(this);\n    }\n\n    openMaxRunningDialog() {\n        this.openMaxRunningDialogRefs.current.openDialog();\n    }\n\n    connect() {\n        fetch(\"/connect_device/\" + this.props.device.uuid)\n            .then(res => res.json())\n            .then(\n                (result) => {\n                }\n            )\n    }\n\n    disconnect() {\n        fetch(\"/disconnect_device/\" + this.props.device.uuid)\n            .then(res => res.json())\n            .then(\n                (result) => {\n                }\n            )\n    }\n\n    toggleQueue() {\n        this.setState({\n            showQueue: !this.state.showQueue\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"device\">\n                <div className=\"header\">\n                    <span>{this.props.device.name}</span>\n                    {this.props.device.is_connected === 0 &&\n                        <div className=\"action\" onClick={this.connect}>\n                            Connect\n                        </div>\n                    }\n                    {this.props.device.is_connected === 1 &&\n                        <div className=\"action\" onClick={this.disconnect}>\n                            Disconnect\n                        </div>\n                    }\n                    <div className=\"hide-device\" onClick={() => this.props.hideDevice(this.props.device)}>\n                        <i className=\"fas fa-times\"></i>\n                    </div>\n                </div>\n\n                <div className=\"body\">\n                    {this.props.device.is_connected !== 0 &&\n                        <ul className=\"tasks\" id=\"tasks-running\">\n                            {this.props.tasks.filter(task => task.state === State.RUNNING).length === 0 &&\n                            <li className=\"mock-task\">\n                                Idle\n                            </li>\n                            }\n                            {this.props.tasks.filter(task => task.state === State.RUNNING).map((task, index) => (\n                                <Task\n                                    key={task.uuid}\n                                    task={task}\n                                    index={index}\n                                    highlightTask={this.props.highlightTask}\n                                />\n                            ))\n                            }\n                        </ul>\n                    }\n\n                    <div className=\"queue-header\">\n                        <div className=\"action\" onClick={this.toggleQueue}>\n                            {this.state.showQueue ?\n                                <i className=\"fas fa-minus\"></i>\n                                :\n                                <i className=\"fas fa-plus\"></i>\n                            }\n                        </div>\n                        Waiting ({this.props.tasks.filter(task => task.state === State.QUEUED).length})\n                    </div>\n                    {this.state.showQueue &&\n                        <ul className=\"tasks tasks-queued\">\n                            {this.props.tasks.filter(task => task.state === State.QUEUED).sort(function (a, b) {\n                                return a.queue_index - b.queue_index\n                            }).map((task, index) => (\n                                <Task\n                                    key={task.uuid}\n                                    task={task}\n                                    index={index}\n                                    highlightTask={this.props.highlightTask}\n                                />\n                            ))}\n                        </ul>\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\n\nexport default Device;","import React from 'react';\nimport Prompt from \"./Prompt\";\n\nclass FinishedTask extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.promptExtraRefs = React.createRef();\n        this.openExtraDialog = this.openExtraDialog.bind(this);\n        this.openLog = this.openLog.bind(this);\n        this.clone = this.clone.bind(this);\n    }\n\n    openExtraDialog() {\n        this.promptExtraRefs.current.openDialog();\n    }\n\n    openLog() {\n        window.open(\"/log/\" + this.props.task.uuid, '_blank');\n    }\n\n     clone() {\n        fetch(\"/clone_task/\" + this.props.task.uuid)\n            .then(res => res.json())\n            .then(\n                (result) => {\n\n                },\n                (error) => {\n\n                }\n            )\n    }\n\n    render() {\n        return (\n            <li className=\"item\">\n                <div className=\"content\">\n                    <div className=\"title\"><span className=\"try-number\">{this.props.task.try}</span>{this.props.task.name}</div>\n                    <div className=\"footer\">\n                        <span><span>Iterations:</span> {this.props.task.finished_iterations}</span>\n                        <span><span>Started:</span> {this.props.task.creation_time.toShortStr()}</span>\n                        <span><span>Finished:</span> {this.props.task.saved_time.toShortStr()} {this.props.task.had_error == true && <span className=\"task-error\">(Error)</span>}</span>\n                    </div>\n                </div>\n                <div className=\"toolbar\">\n                    <div className=\"action\" onClick={() => this.props.rerunTask(this.props.task)} title=\"Run new task with the exact same config\">\n                        <i className=\"fa fa-redo\"></i>\n                    </div>\n                    <div className=\"action\" onClick={this.openExtraDialog} title=\"Run for more iterations\">\n                        <i className=\"fa fa-plus\"></i>\n                    </div>\n                    <div className=\"dropdown\">\n                        <div className=\"action dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                            <i className=\"fas fa-ellipsis-h\"></i>\n                        </div>\n                        <div className=\"dropdown-menu\">\n                            <div className=\"action\" onClick={this.openLog} title=\"View log\">\n                                <i className=\"far fa-file-alt\"></i>\n                            </div>\n                            <div className=\"action\" onClick={this.clone} title=\"Clone task\">\n                                <i className=\"far fa-copy\"></i>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <Prompt ref={this.promptExtraRefs} defaultValue={this.props.task.total_iterations} header=\"Change total iterations?\" text=\"Specify the new number of iterations, you want the task to run:\" url={\"/continue/\" + this.props.task.uuid}/>\n            </li>\n        );\n    }\n}\n\nexport default FinishedTask;","import React from 'react';\n\n\nclass FlashMessage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            state: (\"state\" in props ? props.state : 0)\n        };\n    }\n\n    render() {\n        let style = {};\n        if (this.state.state === 0)\n            style = {marginLeft: -400};\n        else if (this.state.state === 1)\n            style = {marginLeft: 0};\n        else if (this.state.state === 2)\n            style = {marginLeft: 0, marginTop: -26};\n        return (\n            <div className={'flash-message level-' + this.props.flashMessage.level} style={style} title={this.props.flashMessage.message}>\n                {this.props.flashMessage.short}\n            </div>\n        );\n    }\n}\n\nclass FlashMessageManager extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            flashMessages: []\n        };\n        this.flashMessagesRefs = [];\n        this.nextId = 0;\n\n        var fm = this;\n        this.props.evtSource.addEventListener(\"FLASH_MESSAGE\", function (e) {\n            const flashMessages = fm.state.flashMessages.slice();\n            const newFlashMessage = JSON.parse(e.data);\n\n            newFlashMessage.id = fm.nextId++;\n\n            flashMessages.push(newFlashMessage);\n            fm.flashMessagesRefs.push(React.createRef());\n            let flashMessageRef = fm.flashMessagesRefs[fm.flashMessagesRefs.length - 1];\n            setTimeout(() => fm.nextState(flashMessageRef), 100);\n\n            fm.setState({\n                flashMessages: flashMessages\n            });\n        });\n\n    }\n\n\n    nextState(flashMessage) {\n        if (flashMessage.current.state.state === 0) {\n            flashMessage.current.setState({state: 1});\n            setTimeout(() => this.nextState(flashMessage), 10000);\n        } else if (flashMessage.current.state.state === 1) {\n            flashMessage.current.setState({state: 2});\n            setTimeout(() => this.nextState(flashMessage), 1000);\n        } else if (flashMessage.current.state.state === 2) {\n            const flashMessages = this.state.flashMessages.slice();\n            const messageIndex = this.flashMessagesRefs.findIndex(function (e) {\n                return e === flashMessage\n            });\n\n            flashMessages.splice(messageIndex, 1);\n            this.flashMessagesRefs.splice(messageIndex, 1);\n\n            this.setState({\n                flashMessages: flashMessages\n            });\n        }\n    }\n\n    render() {\n        return (\n            <div id=\"flash-messages\">\n                {this.state.flashMessages.map((flashMessage, index) => (\n                    <FlashMessage\n                        key={flashMessage.id}\n                        flashMessage={flashMessage}\n                        ref={this.flashMessagesRefs[index]}\n                    />\n                ))}\n                {this.props.noConnection &&\n                    <FlashMessage\n                        key=\"-1\"\n                        flashMessage={{\"short\": \"No connection to server\", \"level\": \"40\"}}\n                        state=\"1\"\n                    />\n                }\n            </div>\n        );\n    }\n}\n\n\nexport default FlashMessageManager;","\nvar State = {\n    INIT: 0,\n    QUEUED: 1,\n    RUNNING: 2,\n    STOPPED: 3\n};\n\nDate.prototype.toShortStr = function() {\n    function pad(n) {\n        n = parseInt(n);\n        return (n < 10) ? (\"0\" + n) : n;\n    }\n    return this.getDate() + \".\" + (this.getMonth() + 1) + \" - \" + pad(this.getHours()) + \":\" + pad(this.getMinutes());\n};\n\nexport default State;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cloneDeep from 'lodash/cloneDeep';\nimport merge from 'lodash/merge';\nimport isEmpty from 'lodash/isEmpty';\nimport isEqual from 'lodash/isEqual';\nimport JSONEditor from 'jsoneditor';\nimport 'jsoneditor-react/es/editor.min.css';\nimport ace from 'brace';\nimport 'brace/mode/json';\nvar stringify = require('json-stable-stringify');\n\nvar Node = require('jsoneditor/src/js/Node');\n\nvar originalUpdateDom = Node.prototype.updateDom;\nNode.prototype.updateDom = function (options) {\n    originalUpdateDom.call(this, options);\n    var tdRevert = this.dom.tdRevert;\n    if (!tdRevert && this.dom && this.dom.tr && this.fieldEditable && (this.type === \"auto\" || this.type === \"array\" || this.type === \"string\")) {\n        tdRevert = document.createElement('td');\n        this.dom.tdRevert = tdRevert;\n        this.dom.tdValue.parentNode.appendChild(tdRevert);\n\n        var icon = document.createElement('i');\n        icon.type = 'i';\n        icon.className = 'fas fa-undo-alt';\n\n        var button = document.createElement('div');\n        button.type = 'div';\n        button.className = 'revert';\n        button.onclick = () => {\n            this.editor.options.onRevert({path: this.getPath(), field: this.field, value: this.value})\n        };\n        button.appendChild(icon);\n\n\n        tdRevert.appendChild(button);\n    }\n\n};\n\nJSONEditor.VALID_OPTIONS.push('onRevert');\nconsole.log(Node);\n\n\nclass JsonEditor extends React.Component {\n    componentDidMount() {\n        const options = {};\n        options.onModeChange = (mode) => {\n            this.updateEditor();\n            if (mode === \"tree\")\n                this.jsoneditor.expandAll();\n        };\n        options.onClassName = (node) => {\n\n            if (this.pathExistsInJson(node.path, this.props.inheritedJson) && !this.pathExistsInJson(node.path, this.props.json)) {\n                return 'inherited-value';\n            } else if (!this.pathExistsInJson(node.path, this.props.inheritedJson) && this.pathExistsInJson(node.path, this.props.json)) {\n                return 'new-value';\n            }\n\n            return undefined;\n        };\n        options.onEditable = (node) => {\n\n            if (this.pathExistsInJson(node.path, this.props.inheritedJson) ) {\n                return {\"field\": false, \"value\": true};\n            } else {\n                return {\"field\": true, \"value\": true};\n            }\n\n        };\n        options.onChange = () => {\n            if (this.jsoneditor.getMode() === \"code\") {\n                try {\n                    const currentJson = this.jsoneditor.get();\n                    if (this.props.json !== currentJson) {\n                        this.props.onChange(currentJson);\n                    }\n                } catch (err) {\n                    this.err = err;\n                }\n            }\n        };\n        options.onChangeJSON = (json) => {\n            if (this.jsoneditor.getMode() === \"tree\") {\n                var newJson = {};\n                this.updateFromJsonEditor(newJson, this.props.json, this.props.inheritedJson, json, []);\n                this.props.onChange(newJson);\n                console.log(newJson);\n            }\n        };\n        options.onRevert = (node) => {\n            var newJson = cloneDeep(this.props.json);\n            var currentBlock = newJson;\n            var prevBlocks = [newJson];\n\n            for (var i = 0; i < node.path.length; i++) {\n                if (i === node.path.length - 1) {\n                    delete currentBlock[node.path[i]];\n                } else {\n                    currentBlock = currentBlock[node.path[i]];\n                    prevBlocks.push(currentBlock)\n                }\n            }\n\n            for (var i = node.path.length - 2; i >= 0; i--) {\n                if (isEmpty(prevBlocks[i][node.path[i]])) {\n                    delete prevBlocks[i][node.path[i]];\n                } else {\n                    break;\n                }\n            }\n\n            this.props.onChange(newJson);\n            this.updateEditor();\n        };\n        options.mode = 'mode' in this.props.options ? this.props.options.mode : 'tree';\n        options.modes = 'modes' in this.props.options ? this.props.options.modes : ['code', 'tree'];\n        options.ace = ace;\n        options.history = false;\n        options.enableSort = false;\n        options.enableTransform = false;\n        options.mainMenuBar = 'mainMenuBar' in this.props.options ? this.props.options.mainMenuBar : true;\n        options.statusBar = 'statusBar' in this.props.options ? this.props.options.statusBar : true;\n\n        this.jsoneditor = new JSONEditor(this.container, options);\n\n        if ('readOnly' in this.props.options && this.props.options.readOnly) {\n            this.jsoneditor.aceEditor.setReadOnly(true);\n        }\n\n        if ('json' in this.props) {\n            this.updateEditor();\n            if (options.mode === 'tree')\n                this.jsoneditor.expandAll();\n        }\n    }\n\n    updateFromJsonEditor(newJson, oldJson, inheritedJson, editorJson, path) {\n        for (var prop in editorJson) {\n            if (typeof editorJson[prop] === \"object\" && !Array.isArray(editorJson[prop]) && Object.keys(editorJson[prop]).length > 0) {\n                this.updateFromJsonEditor(\n                    newJson,\n                    prop in oldJson ? oldJson[prop] : {},\n                    prop in inheritedJson ? inheritedJson[prop] : {},\n                    editorJson[prop],\n                    path.concat([prop])\n                );\n            } else {\n                if ((prop in inheritedJson && !isEqual(inheritedJson[prop], editorJson[prop])) || !(prop in inheritedJson) || prop in oldJson) {\n                    this.setValueAtPath(newJson, path.concat([prop]), editorJson[prop]);\n                }\n            }\n        }\n    }\n\n    pathExistsInJson(path, json) {\n        if (!path) {\n            return false;\n        }\n\n        var currentBlock = json;\n        for (var i = 0; i < path.length; i++) {\n            if (i === path.length - 1) {\n                return path[i] in currentBlock;\n            } else {\n                if (!(path[i] in currentBlock)) {\n                    return false;\n                }\n                currentBlock = currentBlock[path[i]];\n            }\n        }\n        return false;\n    }\n\n    setValueAtPath(json, path, value) {\n        var currentBlock = json;\n        for (var i = 0; i < path.length; i++) {\n            if (i === path.length - 1) {\n                currentBlock[path[i]] = value;\n            } else {\n                if (!(path[i] in currentBlock)) {\n                    currentBlock[path[i]] = {};\n                }\n                currentBlock = currentBlock[path[i]];\n            }\n        }\n    }\n\n    componentDidUpdate() {\n    }\n\n    updateEditor() {\n        if (this.jsoneditor.getMode() === \"code\") {\n            this.jsoneditor.setText(stringify(this.props.json, { space: '  ' }));\n        } else {\n            var mergedJson = cloneDeep(this.props.inheritedJson);\n            merge(mergedJson, this.props.json);\n            this.jsoneditor.setText(stringify(mergedJson, { space: '  ' }));\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.jsoneditor) {\n            this.jsoneditor.destroy();\n        }\n    }\n\n    render() {\n        return (\n            <div className={\"jsoneditor-react-container\" + ('readOnly' in this.props.options && this.props.options.readOnly ? ' jsoneditor-readOnly' : '')} ref={elem => this.container = elem}/>\n        );\n    }\n}\n\nexport default JsonEditor;","import React from 'react';\n\nclass Option extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n        };\n    }\n\n    render() {\n        return (\n            <div className=\"field\">\n                <label>{this.props.preset.name}:</label>\n                <select value={this.props.selection} onChange={(e) => this.props.onSelectionChangeFunc(this.props.preset, e)}>\n                    {this.props.preset.choices.map(choice => (\n                        <option value={choice.uuid}>{choice.name}</option>\n                    ))}\n                </select>\n            </div>\n        );\n    }\n}\n\nexport default Option;","import React from 'react';\nimport Prompt from \"./Prompt\";\nimport {TaskName} from \"./Task\";\nimport State from \"./Global\";\nimport ReassuringPrompt from \"./ReassuringPrompt\";\n\nclass PausedTask extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.reassuringRemovePromptRefs = React.createRef();\n        this.itemRef = React.createRef();\n        this.promptExtraRefs = React.createRef();\n        this.openExtraDialog = this.openExtraDialog.bind(this);\n        this.finish = this.finish.bind(this);\n        this.openLog = this.openLog.bind(this);\n        this.clone = this.clone.bind(this);\n        this.pause = this.pause.bind(this);\n    }\n\n    openExtraDialog() {\n        this.promptExtraRefs.current.openDialog();\n    }\n\n\n    finish() {\n        fetch(\"/finish/\" + this.props.task.uuid)\n            .then(res => res.json())\n            .then(\n                (result) => {\n\n                },\n                (error) => {\n\n                }\n            )\n    }\n\n    openLog() {\n        window.open(\"/log/\" + this.props.task.uuid, '_blank');\n    }\n\n    clone() {\n        fetch(\"/clone_task/\" + this.props.task.uuid)\n            .then(res => res.json())\n            .then(\n                (result) => {\n\n                },\n                (error) => {\n\n                }\n            )\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevProps.highlight !== this.props.highlight && this.props.highlight) {\n            this.itemRef.current.scrollIntoView({\n              behavior: 'smooth',\n              block: 'start',\n            });\n        }\n    }\n\n    componentDidMount() {\n        if (this.props.highlight) {\n            this.itemRef.current.scrollIntoView({\n              behavior: 'smooth',\n              block: 'start',\n            });\n        }\n    }\n\n    itemClass() {\n        let classname = \"item item-task \";\n        if (this.props.highlight)\n            classname += \"item-highlight \";\n        if (this.props.task.state === State.RUNNING)\n            classname += \"task-running \";\n        return classname;\n    }\n\n    pause() {\n        fetch(\"/pause/\" + this.props.task.uuid)\n            .then(res => res.json())\n            .then(\n                (result) => {\n\n                },\n                (error) => {\n\n                }\n            )\n    }\n\n    render() {\n        return (\n            <li ref={this.itemRef} className={this.itemClass()}>\n                <div className=\"content\">\n                    <div className=\"title\"><span className=\"try-number\">{this.props.task.try}</span><TaskName task={this.props.task}/></div>\n                    <div className=\"footer\">\n                        <span><span>Iterations:</span> {this.props.task.finished_iterations} / {this.props.task.total_iterations}</span>\n                        <span><span>Created:</span> {this.props.task.creation_time.toShortStr()}</span>\n                        <span><span>Last saved:</span> {this.props.task.saved_time.toShortStr()} {this.props.task.had_error == true && <span className=\"task-error\">(Error)</span>}</span>\n                    </div>\n                </div>\n                <div className=\"toolbar\">\n                    {\n                        this.props.task.state === State.RUNNING ?\n                        <div className=\"action\" onClick={this.pause} title=\"Pause task\">\n                            <i className=\"fa fa-pause\"></i>\n                        </div>\n                        :\n                        <div className=\"action\" onClick={this.openExtraDialog} title=\"Run for more iterations\">\n                            <i className=\"fa fa-play\"></i>\n                        </div>\n                    }\n                    <div className=\"action\" onClick={() => this.props.showTask(this.props.task)} title=\"Show detail information\">\n                        <i className=\"fa fa-info\"></i>\n                    </div>\n                    <div className=\"dropdown\">\n                        <div className=\"action dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" >\n                            <i className=\"fas fa-ellipsis-h\"></i>\n                        </div>\n                        <div className=\"dropdown-menu\">\n                            <div className=\"action\" onClick={() => this.props.rerunTask(this.props.task)} title=\"Run new task with the exact same config\">\n                                <i className=\"fa fa-redo\"></i>\n                            </div>\n                            {!this.props.task.is_test &&\n                                <div className=\"action\" onClick={() => this.props.filterLikeTask(this.props.task)} title=\"Filter for similar tasks\">\n                                    <i className=\"fas fa-sliders-h\"></i>\n                                </div>\n                            }\n                            <div className=\"action\" onClick={this.clone} title=\"Clone task\">\n                                <i className=\"far fa-copy\"></i>\n                            </div>\n                            <div className=\"action\" onClick={this.openLog} title=\"View log\">\n                                <i className=\"far fa-file-alt\"></i>\n                            </div>\n                            {this.props.task.state !== State.RUNNING &&\n                            <div className=\"action\" onClick={() => this.reassuringRemovePromptRefs.current.openDialog()} title=\"Remove task\">\n                                <i className=\"far fa-trash-alt\"></i>\n                            </div>\n                            }\n                        </div>\n                    </div>\n                </div>\n                <Prompt ref={this.promptExtraRefs} devices={this.props.devices} defaultValue={this.props.task.total_iterations} header=\"Change total iterations?\" text=\"Specify the new number of iterations, you want the task to run:\" url={\"/continue/\" + this.props.task.uuid}/>\n                <ReassuringPrompt ref={this.reassuringRemovePromptRefs} header=\"Really want to delete?\" text=\"Do you really want to remove this task?\" url={\"/remove_task/\" + this.props.task.uuid}/>\n            </li>\n        );\n    }\n}\n\nexport default PausedTask;","import React from 'react';\nimport Choice from \"./Choice\";\nimport State from \"./Global\";\nimport PresetGroup from \"./PresetGroup\";\nimport ReassuringPrompt from \"./ReassuringPrompt\";\n\nclass Preset extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hideChoices: true\n        };\n\n        this.toggleHideChoices = this.toggleHideChoices.bind(this);\n        this.onDragStart = this.onDragStart.bind(this);\n        this.onDragOver = this.onDragOver.bind(this);\n        this.onDragEnter = this.onDragEnter.bind(this);\n        this.onDragLeave = this.onDragLeave.bind(this);\n        this.onDrop = this.onDrop.bind(this);\n        this.reassuringRemovePromptRefs = React.createRef();\n        this.presetRef = React.createRef();\n        this.dragEnterCounter = 0\n    }\n\n    toggleHideChoices() {\n        this.setState({\n            hideChoices: !this.state.hideChoices\n        });\n    }\n\n    onDragStart(e) {\n        e.dataTransfer.setData(\"text/plain\", this.props.preset.uuid);\n    }\n\n    onDragOver(e) {\n        if (this.props.sortMode && this.props.preset.uuid !== e.dataTransfer.getData(\"text/plain\")) {\n            e.preventDefault();\n        }\n    }\n\n    onDrop(e) {\n        if (this.props.sortMode && this.props.preset.uuid !== e.dataTransfer.getData(\"text/plain\")) {\n            e.preventDefault();\n            fetch(\"/reorder_preset/\" + this.props.project_name + \"/\" + e.dataTransfer.getData(\"text/plain\") + \"/\" + this.props.preset.sorting)\n            .then(res => res.json())\n            .then(\n                (result) => {\n\n                },\n                (error) => {\n\n                }\n            );\n\n            this.dragEnterCounter = 0;\n            this.presetRef.current.className = \"item item-preset\";\n        }\n    }\n\n    onDragEnter(e) {\n        if (this.props.sortMode && this.props.preset.uuid !== e.dataTransfer.getData(\"text/plain\")) {\n            e.preventDefault();\n            this.presetRef.current.className = \"item item-preset on-drag-over\";\n            this.dragEnterCounter++;\n        }\n    }\n\n    onDragLeave(e) {\n        if (this.props.sortMode && this.props.preset.uuid !== e.dataTransfer.getData(\"text/plain\")) {\n            e.preventDefault();\n            this.dragEnterCounter--;\n            if (this.dragEnterCounter === 0)\n                this.presetRef.current.className = \"item item-preset\";\n        }\n    }\n\n\n    render() {\n        return (\n            <li ref={this.presetRef} className=\"item item-preset\" onDragOver={this.onDragOver} onDragLeave={this.onDragLeave} onDragEnter={this.onDragEnter} onDrop={this.onDrop} onDragStart={this.onDragStart} draggable={this.props.sortMode ? \"true\" : \"false\"}>\n                <div className=\"header\" onClick={() => this.toggleHideChoices()}>\n                    <div className=\"title\">{this.props.preset.name}</div>\n                    {!this.props.sortMode ?\n                        <div className=\"toolbar\">\n                            <div className=\"action\" onClick={(e) => {this.props.newChoiceFunc(this.props.preset, this.props.preset.choices); e.stopPropagation();}} title=\"New choice\">\n                                <i className=\"fas fa-plus\"></i>\n                            </div>\n                            <div className=\"action\" onClick={(e) => {this.props.editPresetFunc(this.props.preset); e.stopPropagation();}} title=\"Edit preset\">\n                                <i className=\"fa fa-edit\"></i>\n                            </div>\n                            {this.props.preset.choices.length === 0 ?\n                                <div className=\"action\" onClick={() => this.reassuringRemovePromptRefs.current.openDialog()} title=\"Remove preset\">\n                                    <i className=\"far fa-trash-alt\"></i>\n                                </div>\n                                :\n                                <div className=\"action action-disabled\" title=\"Preset cannot be removed, as it still has choices.\">\n                                    <i className=\"far fa-trash-alt\"></i>\n                                </div>\n                            }\n                        </div>\n                        :\n                        <div className=\"toolbar\">\n                            <div className=\"grip-icon\">\n                                <i className=\"fas fa-bars\"></i>\n                            </div>\n                        </div>\n                    }\n                </div>\n                {!this.state.hideChoices && !this.props.sortMode &&\n                    <ul>\n                        {this.props.preset.choices.sort((a, b) => {\n                            return a.name.localeCompare(b.name);\n                        }).map(choice => (\n                            <Choice\n                                key={choice.uuid}\n                                choice={choice}\n                                preset={this.props.preset}\n                                editFunc={this.props.editChoiceFunc}\n                                removable={!(choice.uuid in this.props.numberOfTasksPerChoice) || this.props.numberOfTasksPerChoice[choice.uuid].length === 0}\n                            />\n                        ))}\n                    </ul>\n                }\n                <ReassuringPrompt ref={this.reassuringRemovePromptRefs} header=\"Really want to delete?\" text=\"Do you really want to remove this preset?\" url={\"/remove_preset/\" + this.props.preset.project_name + \"/\" + this.props.preset.uuid}/>\n            </li>\n        );\n    }\n}\n\nexport default Preset;","import React from 'react';\nimport ConfigEditor from \"./ConfigEditor\";\n\nclass PresetBatchEditor extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            open: false\n        };\n\n        this.configEditor = React.createRef();\n        this.open = this.open.bind(this);\n        this.close = this.close.bind(this);\n        this.save = this.save.bind(this);\n    }\n\n    open() {\n        this.props.closeEditors();\n        this.setState({\n            open: true\n        });\n    }\n\n    close() {\n        this.setState({\n            open: false\n        });\n    }\n\n    save() {\n        var data = new FormData();\n\n        var dataJson = {};\n        dataJson['config'] = this.configEditor.current.state.config;\n\n        data.append(\"data\", JSON.stringify(dataJson));\n\n        var url = \"/add_preset_batch/\" + this.props.project_name;\n\n        fetch(url,\n            {\n                method: \"POST\",\n                body: data\n            })\n            .then(res => res.json())\n            .then(\n                (result) => {\n\n                },\n                (error) => {\n\n                }\n            );\n\n        this.close();\n    }\n\n\n    render() {\n        if (this.state.open) {\n            return (\n                <div className=\"preset-batch-editor editor\" >\n                    <div className=\"header\">Add multiple presets</div>\n                    <ConfigEditor ref={this.configEditor} url=\"\"/>\n                    <div className=\"buttons\">\n                        <div onClick={this.save}>Save</div>\n                        <div onClick={this.close}>Cancel</div>\n                    </div>\n                </div>\n            );\n        } else {\n            return \"\";\n        }\n    }\n}\n\nexport default PresetBatchEditor;","import React from 'react';\n\nclass PresetEditor extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            preset: null,\n            name: '',\n            deprecatedChoice: '',\n            defaultChoice: ''\n        };\n\n        this.configEditor = React.createRef();\n        this.open = this.open.bind(this);\n        this.close = this.close.bind(this);\n        this.save = this.save.bind(this);\n        this.new = this.new.bind(this);\n        this.onNameChange = this.onNameChange.bind(this);\n        this.onDeprecatedChoiceChange = this.onDeprecatedChoiceChange.bind(this);\n        this.onDefaultChoiceChange = this.onDefaultChoiceChange.bind(this);\n    }\n\n    open(preset) {\n        this.props.closeEditors();\n        this.setState({\n            preset: preset,\n            name: preset.name,\n            deprecatedChoice: preset.deprecated_choice.uuid,\n            defaultChoice: preset.default_choice.uuid\n        });\n    }\n\n    new(project_name) {\n        this.props.closeEditors();\n        this.setState({\n            preset: {name: 'New preset', project_name: project_name, choices: []},\n            name: '',\n            deprecatedChoice: '',\n            defaultChoice: ''\n        });\n    }\n\n    close() {\n        this.setState({\n            preset: null\n        });\n    }\n\n    save() {\n        var data = new FormData();\n\n        var dataJson = {};\n        dataJson['name'] = this.state.name;\n        dataJson['deprecated_choice'] = this.state.deprecatedChoice;\n        dataJson['default_choice'] = this.state.defaultChoice;\n        dataJson['config'] = {};\n\n        data.append(\"data\", JSON.stringify(dataJson));\n\n        var url = \"\";\n        if (this.state.preset.uuid)\n            url = \"/edit_preset/\" + this.state.preset.project_name + \"/\" + this.state.preset.uuid;\n        else\n            url = \"/add_preset/\" + this.state.preset.project_name;\n\n        fetch(url,\n            {\n                method: \"POST\",\n                body: data\n            })\n            .then(res => res.json())\n            .then(\n                (result) => {\n\n                },\n                (error) => {\n\n                }\n            );\n\n        this.close();\n    }\n\n    onNameChange(event) {\n        this.setState({\n            name: event.target.value\n        });\n    }\n\n    onDeprecatedChoiceChange(event) {\n        this.setState({\n            deprecatedChoice: event.target.value\n        });\n    }\n\n    onDefaultChoiceChange(event) {\n        this.setState({\n            defaultChoice: event.target.value\n        });\n    }\n\n    render() {\n        if (this.state.preset !== null) {\n            return (\n                <div className=\"preset-editor editor\" >\n                    <div className=\"header\">{this.state.preset.name}</div>\n                    <div className=\"field\">\n                        <label>Name:</label>\n                        <input value={this.state.name} onChange={this.onNameChange} required=\"required\" />\n                    </div>\n                    {this.state.preset.choices.length > 0 &&\n                    <div className=\"field\">\n                        <label>Choice for deprecated tasks:</label>\n                        <select value={this.state.deprecatedChoice} onChange={this.onDeprecatedChoiceChange}>\n                            {this.state.preset.choices.map(choice => (\n                                <option value={choice.uuid}>{choice.name}</option>\n                            ))}\n                        </select>\n                    </div>\n                    }\n                    {this.state.preset.choices.length > 0 &&\n                    <div className=\"field\">\n                        <label>Default choice for new tasks:</label>\n                        <select value={this.state.defaultChoice} onChange={this.onDefaultChoiceChange}>\n                            {this.state.preset.choices.map(choice => (\n                                <option value={choice.uuid}>{choice.name}</option>\n                            ))}\n                        </select>\n                    </div>\n                    }\n                    <div className=\"buttons\">\n                        <div onClick={this.save}>Save</div>\n                        <div onClick={this.close}>Cancel</div>\n                    </div>\n                </div>\n            );\n        } else {\n            return \"\";\n        }\n    }\n}\n\nexport default PresetEditor;","import React from 'react';\nimport Option from \"./Option\";\n\nclass PresetFilter extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n        this.mapChoiceToChoices = this.mapChoiceToChoices.bind(this);\n        this.calcChoiceName = this.calcChoiceName.bind(this);\n    }\n\n    calcChoiceName(choice, args) {\n        let name = choice.name;\n        for (let i = 0; i < args.length; i++) {\n            name = name.replace(\"$T\" + i + \"$\", args[i]);\n        }\n        return name;\n    }\n\n    calcChoiceClasses(preset, choice) {\n        let classes = \"choice \";\n        if (preset.uuid in this.props.selectedChoices && this.props.selectedChoices[preset.uuid][0] === choice.uuid && (!(\"resolvedName\" in choice) || this.calcChoiceName(choice, this.props.selectedChoices[preset.uuid].slice(1)) === choice.resolvedName))\n            classes += \"choice-selected \";\n        if (preset.default_choice.uuid === choice.uuid)\n            classes += \"choice-default \";\n        return classes;\n    }\n\n    mapChoiceToChoices(choice) {\n        let choices = [];\n        if (!choice.isTemplate)\n            choices.push({\"uuid\": choice.uuid, \"name\": choice.name, \"resolvedName\": choice.name, \"numberOfTasks\": this.props.numberOfTasksPerChoice && choice.uuid in this.props.numberOfTasksPerChoice ? this.props.numberOfTasksPerChoice[choice.uuid].length : 0, \"args\": []});\n        else if (choice.uuid in this.props.numberOfTasksPerChoice) {\n            let numbersPerArg = {};\n            for (let task of this.props.numberOfTasksPerChoice[choice.uuid]) {\n                const name = this.calcChoiceName(choice, task.slice(1));\n                if (!(name in numbersPerArg))\n                    numbersPerArg[name] = [0, task.slice(1)];\n                numbersPerArg[name][0]++;\n            }\n\n            for (let name in numbersPerArg)\n                choices.push({\"uuid\": choice.uuid, \"name\": choice.name, \"resolvedName\": name, \"numberOfTasks\": numbersPerArg[name][0], \"args\": numbersPerArg[name][1]});\n        }\n        return choices;\n    }\n\n    render() {\n        return (\n            <div className=\"preset-filter\">\n                {Object.keys(this.props.presetsByGroup).sort((a, b) => a.localeCompare(b)).map((group) => (\n                    <div key={group} className=\"preset-group\">\n                        {group !== \"\" &&\n                        <div className=\"group-header\" onClick={() => this.toggleHideChoices()}>\n                            <div className=\"title\">{group}</div>\n                        </div>\n                        }\n                        <div className=\"presets\">\n                            {this.props.presetsByGroup[group].sort((a, b) => a.name.localeCompare(b.name)).map(preset => (\n                                <div key={preset.uuid} className=\"preset\">\n                                    <div className=\"preset-name\">\n                                        {preset.name}\n                                    </div>\n                                    <div className=\"choices-wrapper\">\n                                        <div className=\"choices\">\n                                            {preset.choices.sort((a, b) => {\n                                                return a.name.localeCompare(b.name);\n                                            }).map(choice =>\n                                                !choice.isTemplate || !this.props.useTemplateFields ?\n                                                this.mapChoiceToChoices(choice).map(choice => (\n                                                        <div key={choice.uuid} className={this.calcChoiceClasses(preset, choice)} onClick={() => this.props.onSelectionChange(preset, choice, choice.args)}>\n                                                            <React.Fragment>\n                                                                {choice.resolvedName}\n                                                                {this.props.numberOfTasksPerChoice &&\n                                                                <span className=\"task-numbers\">{choice.numberOfTasks}</span>\n                                                                }\n                                                            </React.Fragment>\n                                                        </div>\n                                                    )\n                                                ):(\n                                                 <div key={choice.uuid} className={this.calcChoiceClasses(preset, choice, )} onClick={() => this.props.onSelectionChange(preset, choice, this.props.selectedChoices[preset.uuid][1])}>\n                                                    <React.Fragment>\n                                                        {choice.name.split(\"$T0$\")[0]}\n                                                        <input value={preset.uuid in this.props.selectedChoices ? this.props.selectedChoices[preset.uuid][1] : \"\"} style={{\"width\": Math.max(10, (10 * (preset.uuid in this.props.selectedChoices && this.props.selectedChoices[preset.uuid][1] !== undefined ? this.props.selectedChoices[preset.uuid][1] : \"\").length)) + \"px\"}} onChange={(evt) => this.props.onSelectionChange(preset, choice, evt.target.value)}/>\n                                                        {choice.name.split(\"$T0$\")[1]}\n                                                    </React.Fragment>\n                                                </div>\n                                                )\n                                            )}\n                                        </div>\n                                    </div>\n                                </div>\n                            ))}\n                        </div>\n                    </div>\n                ))}\n            </div>\n        );\n    }\n}\n\nexport default PresetFilter;","import React from 'react';\nimport Preset from \"./Preset\";\n\nclass PresetGroup extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hideChoices: false\n        };\n\n        this.toggleHideChoices = this.toggleHideChoices.bind(this);\n    }\n\n    toggleHideChoices() {\n        this.setState({\n            hideChoices: !this.state.hideChoices\n        });\n    }\n\n  render() {\n        return (\n            <li className=\"item item-preset\">\n                {this.props.group !== \"\"  &&\n                    <div className=\"group-header\" onClick={() => this.toggleHideChoices()}>\n                        <div className=\"title\">{this.props.group}</div>\n                    </div>\n                }\n                {!this.state.hideChoices &&\n                    <ul>\n                        {this.props.presets.sort((a, b) => a.name.localeCompare(b.name)).map(preset => (\n                            <Preset\n                                key={preset.uuid}\n                                preset={preset}\n                                editPresetFunc={this.props.editPresetFunc}\n                                editChoiceFunc={this.props.editChoiceFunc}\n                                newChoiceFunc={this.props.newChoiceFunc}\n                                numberOfTasksPerChoice={this.props.numberOfTasksPerChoice}\n                            />\n                        ))}\n                </ul>\n                }\n            </li>\n        );\n    }\n}\n\nexport default PresetGroup;","import React from 'react';\nimport Preset from \"./Preset\";\nimport State from \"./Global\";\nimport FinishedTask from \"./FinishedTask\";\nimport PausedTask from \"./PausedTask\";\nimport PresetEditor from \"./PresetEditor\";\nimport ChoiceEditor from \"./ChoiceEditor\";\nimport TaskEditor from \"./TaskEditor\";\nimport TaskView from \"./TaskView\";\nimport PresetFilter from \"./PresetFilter\";\nimport View from \"./View\";\nimport PresetBatchEditor from \"./PresetBatchEditor\";\nimport PresetGroup from \"./PresetGroup\";\n\nclass PresetTab extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            showAbstract: true\n        };\n        this.toggleShowAbstract = this.toggleShowAbstract.bind(this);\n        this.addPreset = this.addPreset.bind(this);\n        this.addPresetBatch = this.addPresetBatch.bind(this);\n        this.closeEditors = this.closeEditors.bind(this);\n        this.presetEditor = React.createRef();\n        this.presetBatchEditor = React.createRef();\n        this.choiceEditor = React.createRef();\n    }\n\n    toggleShowAbstract() {\n        this.setState({\n          showAbstract: !this.state.showAbstract,\n        });\n    }\n\n    closeEditors() {\n        this.presetEditor.current.close();\n        this.presetBatchEditor.current.close();\n        this.choiceEditor.current.close();\n    }\n\n    addPreset() {\n        this.presetEditor.current.new(this.props.project.name);\n    }\n\n    addPresetBatch() {\n        this.presetBatchEditor.current.open();\n    }\n\n    addChoice(preset) {\n        this.choiceEditor.current.new(preset);\n    }\n\n    render() {\n        return (\n            <div className=\"tab\" style={{'display': (this.props.active ? 'flex' : 'none')}}>\n                <ul className=\"presets-tab\" >\n                    {this.props.presetSortingMode ?\n                        this.props.presets.sort((a, b) => a.sorting - b.sorting).map((preset) => (\n                            <Preset\n                                key={preset.uuid}\n                                preset={preset}\n                                sortMode={true}\n                                project_name={this.props.project.name}\n                                numberOfTasksPerChoice={this.props.numberOfTasksPerChoice}\n                            />\n                        ))\n                        :\n                        Object.keys(this.props.presetsByGroup).sort((a, b) => a.localeCompare(b)).map((group) => (\n                            <PresetGroup\n                                key={group}\n                                presets={this.props.presetsByGroup[group]}\n                                group={group}\n                                sorting={this.props.sorting[0]}\n                                sortingDescending={this.props.sortingDescending[0]}\n                                editPresetFunc={this.presetEditor.current.open}\n                                editChoiceFunc={this.choiceEditor.current.open}\n                                newChoiceFunc={this.choiceEditor.current.new}\n                                numberOfTasksPerChoice={this.props.numberOfTasksPerChoice}\n                            />\n                        ))\n                    }\n                </ul>\n                <PresetEditor ref={this.presetEditor} closeEditors={this.closeEditors} />\n                <ChoiceEditor ref={this.choiceEditor} closeEditors={this.closeEditors} />\n                <PresetBatchEditor ref={this.presetBatchEditor} closeEditors={this.closeEditors} project_name={this.props.project.name} />\n                <div className=\"tab-toolbar\">\n                    <label>\n                        <input type=\"checkbox\" defaultChecked={this.state.showAbstract} onChange={this.toggleShowAbstract} />\n                        <span>Show abstract presets</span>\n                    </label>\n                    <div className=\"buttons\">\n                        <div onClick={this.addPreset}>Add preset</div>\n                        <div onClick={this.addPresetBatch}>Add batch</div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n\nexport default PresetTab;\n","import React from 'react';\nimport ConfigEditor from \"./ConfigEditor\";\nimport {TaskName} from \"./Task\";\nimport PresetFilter from \"./PresetFilter\";\n\nclass PresetViewer extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            open: false\n        };\n\n        this.configEditor = React.createRef();\n        this.open = this.open.bind(this);\n        this.close = this.close.bind(this);\n    }\n\n    open() {\n        this.setState({\n            open: true\n        });\n    }\n\n    close() {\n        this.setState({\n            open: false\n        });\n    }\n\n    render() {\n        if (this.state.open) {\n            return (\n                <div className=\"preset-viewer slide-editor editor\" >\n                    <div className=\"header\">Preset filter<i className=\"fas fa-times\" onClick={this.close}></i></div>\n                    <label>\n                        <input type=\"checkbox\" checked={this.props.presetFilterEnabled} onChange={() => this.props.togglePresetFilter()} />\n                        <span>Enabled</span>\n                    </label>\n                    <PresetFilter presetsByGroup={this.props.presetsByGroup} numberOfTasksPerChoice={this.props.numberOfTasksPerChoice} selectedChoices={this.props.selectedChoices} onSelectionChange={this.props.onSelectionChange}/>\n                </div>\n            );\n        } else {\n            return \"\";\n        }\n    }\n}\n\nexport default PresetViewer;","import React from 'react';\nimport View from \"./View\";\nimport PresetTab from \"./PresetTab\";\nimport TaskTab from \"./TaskTab\";\nimport PresetViewer from \"./PresetViewer\";\n\nclass Project extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            presets: [],\n            presetsByGroup: {},\n            tasks: [],\n            activeTab: 0,\n            sorting: [0, 0],\n            sortingDescending: [true, true],\n            selectedChoices: {},\n            selectedTasks: [],\n            presetFilterEnabled: false,\n            presetSortingMode: false,\n            numberOfTasksPerChoice: {}\n        };\n        this.updateTasks = this.updateTasks.bind(this);\n        this.updatePresets = this.updatePresets.bind(this);\n        this.addTask = this.addTask.bind(this);\n        this.removeTask = this.removeTask.bind(this);\n        this.toggleShowAbstract = this.toggleShowAbstract.bind(this);\n        this.showTab = this.showTab.bind(this);\n        this.onChangeSorting = this.onChangeSorting.bind(this);\n        this.switchSortingDirection = this.switchSortingDirection.bind(this);\n        this.openPresetViewer = this.openPresetViewer.bind(this);\n        this.onSelectionChange = this.onSelectionChange.bind(this);\n        this.togglePresetFilter = this.togglePresetFilter.bind(this);\n        this.togglePresetSortingMode = this.togglePresetSortingMode.bind(this);\n        this.filterLikeTask = this.filterLikeTask.bind(this);\n        this.filterView = new View(true);\n        this.presetViewerRef = React.createRef();\n    }\n\n    componentDidMount() {\n        this.props.repository.onChange(\"tasks\", this.updateTasks);\n        this.props.repository.onChange(\"presets\", this.updatePresets);\n        this.props.repository.onAdd(\"tasks\", this.addTask);\n        this.props.repository.onRemove(\"tasks\", this.removeTask);\n        this.updatePresets(this.props.repository.presets);\n        for (let key in this.props.repository.tasks)\n            this.addTask(this.props.repository.tasks[key]);\n    }\n\n    componentWillUnmount() {\n        this.props.repository.removeOnChange(\"tasks\", this.updateTasks);\n        this.props.repository.removeOnChange(\"presets\", this.updatePresets);\n        this.props.repository.removeOnAdd(\"tasks\", this.addTask);\n        this.props.repository.removeOnRemove(\"tasks\", this.removeTask);\n    }\n\n    addTask(task) {\n        let numberOfTasksPerChoice = Object.assign({}, this.state.numberOfTasksPerChoice);\n        if (!task.is_test) {\n            if (task.project_name === this.props.project.name) {\n                this.filterView.addTask(task);\n            }\n\n            for (let choice of task.choices) {\n                if (!(choice[0].uuid in numberOfTasksPerChoice))\n                    numberOfTasksPerChoice[choice[0].uuid] = [];\n                numberOfTasksPerChoice[choice[0].uuid].push([task.uuid, choice.slice(1)]);\n            }\n        }\n\n        let tasks = Object.assign({}, this.state.tasks);\n        tasks[task.uuid] = task;\n\n        this.setState({\n            tasks: tasks,\n            numberOfTasksPerChoice: numberOfTasksPerChoice\n        });\n\n        this.updateVisibleTasks();\n    }\n\n    removeTask(task) {\n        if ( !task.is_test) {\n            let numberOfTasksPerChoice = Object.assign({}, this.state.numberOfTasksPerChoice);\n            for (let choice of task.choices) {\n                if (choice[0].uuid in numberOfTasksPerChoice) {\n                    let index = numberOfTasksPerChoice[choice[0].uuid].findIndex(x => x[0] === task.uuid);\n                    numberOfTasksPerChoice[choice[0].uuid].splice(index, 1);\n                }\n            }\n\n            this.setState({\n                numberOfTasksPerChoice: numberOfTasksPerChoice\n            });\n        }\n\n        if (task.project_name === this.props.project.name && !task.is_test) {\n            this.filterView.removeTask(task);\n        }\n        this.updateVisibleTasks();\n    }\n\n    updateVisibleTasks(selectedChoices=null, presetFilterEnabled=null) {\n        if (selectedChoices === null)\n            selectedChoices = this.state.selectedChoices;\n        if (presetFilterEnabled === null)\n            presetFilterEnabled = this.state.presetFilterEnabled;\n\n        let selectedTasks;\n        if (presetFilterEnabled) {\n            selectedTasks = this.filterView.getSelectedTask(selectedChoices, this.props.project.current_code_version);\n        } else {\n            selectedTasks = Object.keys(this.state.tasks).filter(task => this.state.tasks[task].version === this.props.project.current_code_version);\n        }\n        this.setState({\n            selectedTasks: selectedTasks\n        });\n    }\n\n    updatePresets(presets) {\n        this.filterView.updatePresets(Object.values(presets));\n\n        let selectedChoices = Object.assign({}, this.state.selectedChoices);\n\n        let presetsByGroup = {};\n        for (const preset of Object.values(presets)) {\n            if (!(preset.uuid in selectedChoices) && preset.choices.length > 0)\n                selectedChoices[preset.uuid] = [preset.choices[0].uuid];\n\n            const group = preset.group.length > 0 ? preset.group[0] : '';\n            if (!(group in presetsByGroup))\n                presetsByGroup[group] = [];\n            presetsByGroup[group].push(preset);\n        }\n\n        this.setState({\n            presets: Object.values(presets),\n            selectedChoices: selectedChoices,\n            presetsByGroup: presetsByGroup\n        });\n    }\n\n    updateTasks(tasks) {\n        for (let key in tasks) {\n            if (tasks[key].project_name === this.props.project.name)\n                this.filterView.updateTask(tasks[key]);\n        }\n\n        this.setState({\n            tasks: tasks\n        });\n    }\n\n    toggleShowAbstract() {\n        this.setState({\n          showAbstract: !this.state.showAbstract,\n        });\n    }\n\n    showTab(tab) {\n        this.setState({\n          activeTab: tab,\n        });\n    }\n\n    onChangeSorting(e) {\n        const sorting = this.state.sorting.slice();\n        sorting[this.state.activeTab] = parseInt(e.target.value);\n        this.setState({sorting: sorting});\n    }\n\n    switchSortingDirection() {\n        const sortingDescending = this.state.sortingDescending.slice();\n        sortingDescending[this.state.activeTab] = !sortingDescending[this.state.activeTab];\n        this.setState({sortingDescending: sortingDescending});\n    }\n\n    onSelectionChange(preset, choice, args) {\n        const selectedChoices = Object.assign({}, this.state.selectedChoices);\n\n        selectedChoices[preset.uuid] = [choice.uuid, ...args];\n\n        this.updateVisibleTasks(selectedChoices);\n        this.setState({\n            selectedChoices: selectedChoices\n        });\n    }\n\n\n    filterLikeTask(task) {\n        const selectedChoices = Object.assign({}, this.state.selectedChoices);\n\n        for (const preset of this.state.presets) {\n            let choice = this.filterView.getChoiceToPreset(task, preset);\n            selectedChoices[preset.uuid] = [choice[0].uuid, ...choice[1]];\n        }\n\n        this.setState({\n            selectedChoices: selectedChoices,\n            presetFilterEnabled: true\n        }, () => this.updateVisibleTasks());\n        this.openPresetViewer();\n    }\n\n    togglePresetFilter() {\n        let presetFilterEnabled = !this.state.presetFilterEnabled;\n        this.setState({\n            presetFilterEnabled: presetFilterEnabled\n        });\n        this.updateVisibleTasks(null, presetFilterEnabled);\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevProps.project.current_code_version !== this.props.project.current_code_version)\n            this.updateVisibleTasks();\n        if (prevProps.highlightedTask !== this.props.highlightedTask && this.props.highlightedTask !== null) {\n            this.setState({\n                presetFilterEnabled: false,\n                activeTab: 1\n            }, () => this.updateVisibleTasks());\n        }\n    }\n\n    openPresetViewer() {\n        this.props.closeViewer();\n        this.presetViewerRef.current.open();\n    }\n\n    togglePresetSortingMode() {\n        this.setState({\n            presetSortingMode: !this.state.presetSortingMode\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"project\" style={this.props.visible ? {} : {display: 'none'}}>\n                <div className=\"tabs\">\n                    <div className={this.state.activeTab === 0 ? \"tab-active\" : \"\"} onClick={() => this.showTab(0)}>Presets</div>\n                    <div className={this.state.activeTab === 1 ? \"tab-active\" : \"\"} onClick={() => this.showTab(1)}>Tasks</div>\n                </div>\n                <div className=\"sorting\">\n                        {this.state.activeTab === 0 &&\n                            <div>\n                                <span onClick={this.togglePresetSortingMode} className={\"fas fa-sort\"}></span>\n                            </div>\n                        }\n                        {this.state.activeTab === 1 &&\n                            <div>\n                                <label>Sorting:</label>\n                                <select value={this.state.sorting[1]} onChange={this.onChangeSorting}>\n                                    <option value=\"0\">Finished</option>\n                                    <option value=\"1\">Name</option>\n                                    <option value=\"2\">Created</option>\n                                    <option value=\"3\">Iterations</option>\n                                </select>\n                                <span onClick={this.switchSortingDirection} className={this.state.sortingDescending[this.state.activeTab] ? \"fa fa-sort-amount-down\" : \"fa fa-sort-amount-up\"}></span>\n\n                                <span className=\"fas fa-sliders-h\"onClick={this.openPresetViewer}></span>\n                            </div>\n                        }\n                </div>\n                <PresetTab\n                    active={this.state.activeTab === 0}\n                    presetsByGroup={this.state.presetsByGroup}\n                    sorting={this.state.sorting}\n                    project={this.props.project}\n                    sortingDescending={this.state.sortingDescending}\n                    presetSortingMode={this.state.presetSortingMode}\n                    presets={this.state.presets}\n                    numberOfTasksPerChoice={this.state.numberOfTasksPerChoice}\n                />\n                <TaskTab\n                    active={this.state.activeTab === 1}\n                    presets={this.state.presets}\n                    project={this.props.project}\n                    tasks={this.state.tasks}\n                    selectedTasks={this.state.selectedTasks}\n                    selectedChoices={this.state.selectedChoices}\n                    presetFilterEnabled={this.state.presetFilterEnabled}\n                    sorting={this.state.sorting}\n                    sortingDescending={this.state.sortingDescending}\n                    onSelectionChange={this.onSelectionChange}\n                    showTask={this.props.showTask}\n                    presetsByGroup={this.state.presetsByGroup}\n                    highlightedTask={this.props.highlightedTask}\n                    filterLikeTask={this.filterLikeTask}\n                    devices={this.props.devices}\n                />\n                <PresetViewer ref={this.presetViewerRef} numberOfTasksPerChoice={this.state.numberOfTasksPerChoice} presetsByGroup={this.state.presetsByGroup} selectedChoices={this.state.selectedChoices} onSelectionChange={this.onSelectionChange} togglePresetFilter={this.togglePresetFilter} presetFilterEnabled={this.state.presetFilterEnabled}/>\n            </div>\n        );\n    }\n}\n\n\nexport default Project;\n","import React from 'react';\nimport Project from \"./Project\";\nimport Prompt from \"./Prompt\";\nimport CodeVersionViewer from \"./CodeVersionViewer\";\nimport TaskViewer from \"./TaskViewer\";\n\nclass ProjectManager extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            projects: [],\n            codeVersionTrees: {},\n            currentProject: 0,\n            highlightedTask: null\n        };\n        this.gotoTB = this.gotoTB.bind(this);\n        this.addVersion = this.addVersion.bind(this);\n        this.updateProjects = this.updateProjects.bind(this);\n        this.addCodeVersions = this.addCodeVersions.bind(this);\n        this.openTaskViewer = this.openTaskViewer.bind(this);\n        this.openCodeVersionViewer = this.openCodeVersionViewer.bind(this);\n        this.closeViewer = this.closeViewer.bind(this);\n        this.promptRefs = React.createRef();\n        this.codeVersionViewerRef = React.createRef();\n        this.taskViewerRef = React.createRef();\n    }\n\n    componentDidMount() {\n        this.props.repository.onChange(\"projects\", this.updateProjects);\n        this.props.repository.onAdd(\"codeVersions\", this.addCodeVersions);\n        this.updateProjects(this.props.repository.projects);\n        for (let codeVersion in this.props.repository.codeVersions)\n            this.addCodeVersions(this.props.repository.codeVersions[codeVersion]);\n    }\n\n    componentWillUnmount() {\n        this.props.repository.removeOnChange(\"projects\", this.updateProjects);\n        this.props.repository.removeOnAdd(\"codeVersions\", this.addCodeVersions);\n    }\n\n    updateProjects(projects) {\n        this.setState({\n            projects: Object.values(projects)\n        });\n    }\n\n    addCodeVersions(codeVersion) {\n        let newNode = {\n            \"uuid\": codeVersion.uuid,\n            \"name\": codeVersion.name,\n            \"base\": codeVersion.base,\n            \"time\": codeVersion.time,\n            \"children\": []\n        };\n        let codeVersionTrees = Object.assign({}, this.state.codeVersionTrees);\n        const projectName = codeVersion.project_name;\n        if (!(projectName in codeVersionTrees)) {\n            codeVersionTrees[projectName] = newNode;\n            this.setState({\n                codeVersionTrees: codeVersionTrees\n            });\n        } else {\n            this.insertCodeVersionNode(codeVersionTrees[projectName], newNode);\n            this.setState({\n                codeVersionTrees: codeVersionTrees\n            });\n        }\n    }\n\n    insertCodeVersionNode(root, newNode) {\n        if (root.uuid === newNode.base) {\n            root.children.push(newNode);\n            newNode.base = root;\n        } else {\n            for (let child of root.children) {\n                this.insertCodeVersionNode(child, newNode);\n            }\n        }\n    }\n\n    updateCodeVersionNode(root, newNode) {\n        if (root.uuid === newNode.uuid) {\n            root.name = newNode.name;\n            root.time = newNode.time;\n        } else {\n            for (let child of root.children) {\n                this.updateCodeVersionNode(child, newNode);\n            }\n        }\n    }\n\n    gotoTB() {\n        if (this.state.projects[this.state.currentProject].tensorboard_port === -1) {\n             fetch(\"/tensorboard/\" + this.state.projects[this.state.currentProject].name)\n                .then(res => res.json())\n                .then(\n                    (result) => {\n                        if (result !== -1) {\n                            window.open(\"//\" + window.location.hostname + \":\" + result, '_blank');\n                        }\n                    },\n                    (error) => {\n\n                    }\n                )\n        } else {\n            window.open(\"//\" + window.location.hostname + \":\" + this.state.projects[this.state.currentProject].tensorboard_port,'_blank');\n        }\n    }\n\n    changeProject(deltaIndex) {\n        var currentProject = this.state.currentProject;\n        currentProject += deltaIndex;\n        currentProject = Math.min(this.state.projects.length - 1, Math.max(0, currentProject));\n        this.setState({\n            currentProject: currentProject\n        });\n    }\n\n    addVersion() {\n        this.promptRefs.current.openDialog();\n    }\n\n    closeViewer() {\n        this.codeVersionViewerRef.current.close();\n        this.taskViewerRef.current.close();\n    }\n\n    openTaskViewer(task) {\n        this.closeViewer();\n        this.taskViewerRef.current.open(task);\n    }\n\n    openCodeVersionViewer() {\n        this.closeViewer();\n        this.codeVersionViewerRef.current.open();\n    }\n\n    highlightTask(task) {\n        let project_id = this.state.projects.findIndex(project => project.name === task.project_name);\n        if (project_id !== -1) {\n            this.setState({\n                currentProject: project_id,\n                highlightedTask: task.uuid\n            });\n            setTimeout(() => {\n                this.setState({\n                    highlightedTask: null\n                });\n            }, 1500);\n        }\n    }\n\n    render() {\n        return (\n            <div id=\"project-manager\">\n                <div id=\"projects-toolbar\">\n                    {this.state.projects.length > 0 &&\n                        <div id=\"project-selector\">\n                            <span onClick={() => this.changeProject(-1)} className={this.state.currentProject > 0 ? 'active' : ''}>\n                                <i className=\"fas fa-caret-left\"></i>\n                            </span>\n                            <span>\n                                {this.state.projects[this.state.currentProject].name}\n                            </span>\n                            <span onClick={() => this.changeProject(1)} className={this.state.currentProject < this.state.projects.length - 1 ? 'active' : ''}>\n                                <i className=\"fas fa-caret-right\"></i>\n                            </span>\n                        </div>\n                    }\n                    {this.state.projects.length > 0 && this.state.projects[this.state.currentProject].current_code_version in this.props.repository.codeVersions &&\n                        <span id=\"project-toolbar\">\n                            <div id=\"code-version\" title=\"Add new code version\" onClick={this.openCodeVersionViewer}>{this.props.repository.codeVersions[this.state.projects[this.state.currentProject].current_code_version].name}</div>\n                            <div id=\"tb-link\" onClick={this.gotoTB} title=\"Start and open tensorboard\">TB</div>\n                        </span>\n                    }\n                </div>\n                <div id=\"projects\">\n                    {this.state.projects.map((project, index) => (\n                        <Project\n                            key={project.name}\n                            project={project}\n                            repository={this.props.repository}\n                            visible={index === this.state.currentProject}\n                            showTask={this.openTaskViewer}\n                            closeViewer={this.closeViewer}\n                            highlightedTask={index === this.state.currentProject ? this.state.highlightedTask : null}\n                            devices={this.props.devices}\n                        />\n                    ))}\n                </div>\n                {this.state.projects.length > 0 && this.state.projects[this.state.currentProject].name in this.state.codeVersionTrees &&\n                    <CodeVersionViewer\n                        ref={this.codeVersionViewerRef}\n                        codeVersionTree={this.state.codeVersionTrees[this.state.projects[this.state.currentProject].name]}\n                        currentCodeVersion={this.state.projects[this.state.currentProject].current_code_version}\n                        project_name={this.state.projects[this.state.currentProject].name}\n                    />\n                }\n                <TaskViewer ref={this.taskViewerRef} repository={this.props.repository} presets={Object.values(this.props.repository.presets)} codeVersions={this.props.repository.codeVersions} />\n            </div>\n        );\n    }\n}\n\n\nexport default ProjectManager;","import React from 'react';\nimport ConfigEditor from \"./ConfigEditor\";\n\nclass Prompt extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            dialogOpen: false,\n            inputValue: this.props.defaultValue,\n            device: null\n        };\n\n        this.configEditor = React.createRef();\n        this.start = this.start.bind(this);\n        this.openDialog = this.openDialog.bind(this);\n        this.closeDialog = this.closeDialog.bind(this);\n        this.updateInputValue = this.updateInputValue.bind(this);\n        this.onKeyDown = this.onKeyDown.bind(this);\n        this.onChange = this.onChange.bind(this);\n        this.onDeviceChange = this.onDeviceChange.bind(this);\n    }\n\n    start() {\n        this.setState({\n            dialogOpen: false\n        });\n        if (this.props.presetEditor) {\n            var data = new FormData();\n            data.append(\"data\", JSON.stringify(this.configEditor.current.state.config));\n\n            fetch(this.props.url,\n            {\n                method: \"POST\",\n                body: data\n            })\n            .then(res => res.json())\n            .then(\n                (result) => {\n\n                },\n                (error) => {\n\n                }\n            );\n        } else {\n            fetch(this.props.url + (this.props.devices ? \"/\" + this.state.device : \"\") + \"/\" + this.state.inputValue)\n                .then(res => res.json())\n                .then(\n                    (result) => {\n\n                    },\n                    (error) => {\n\n                    }\n                )\n        }\n    }\n\n    onDeviceChange(event) {\n        this.setState({\n            device: event.target.value\n        });\n    }\n\n    openDialog() {\n        this.setState({\n            dialogOpen: true,\n            device: (this.props.devices ? this.props.devices[0].uuid : null)\n        });\n    }\n\n    closeDialog() {\n        this.setState({\n            dialogOpen: false\n        });\n    }\n\n    updateInputValue(evt) {\n        this.setState({\n            inputValue: evt.target.value\n        });\n    }\n\n    onKeyDown(e) {\n        if (e.keyCode === 13) {\n            e.preventDefault();\n            this.start();\n        }\n        if (e.keyCode === 27) {\n            e.preventDefault();\n            this.closeDialog();\n        }\n    }\n\n    onChange(data) {\n        this.setState({\n            inputValue: data\n        });\n    }\n\n    render() {\n        if (this.state.dialogOpen) {\n            return (\n                <div className=\"prompt-wrapper\">\n                    <div className= {this.props.presetEditor ? 'prompt preset-prompt' : 'prompt'}>\n                        <div className=\"prompt-header\">{this.props.header}</div>\n                        <div className=\"prompt-text\">{this.props.text}</div>\n                        {!this.props.presetEditor &&\n                            <input autoFocus onFocus={(e) => {e.target.select()}} type=\"text\" name=\"iterations\" value={this.state.inputValue} onChange={evt => this.updateInputValue(evt)} onKeyDown={this.onKeyDown} />\n                        }\n                        {this.props.presetEditor &&\n                            <ConfigEditor ref={this.configEditor} url={this.props.presetEditorUrl} />\n                        }\n                        {this.props.devices &&\n                            <select value={this.state.device} onChange={this.onDeviceChange}>\n                                {this.props.devices.map(device => (\n                                    <option value={device.uuid}>{device.name}</option>\n                                ))}\n                            </select>\n                        }\n                        <div className=\"buttons\">\n                            <div onClick={this.start}>Ok</div>\n                            <div onClick={this.closeDialog}>Cancel</div>\n                        </div>\n                    </div>\n                </div>\n            );\n        } else {\n            return \"\";\n        }\n    }\n}\n\nexport default Prompt;","import React from 'react';\n\nclass ReassuringPrompt extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            dialogOpen: false\n        };\n\n        this.execute = this.execute.bind(this);\n        this.openDialog = this.openDialog.bind(this);\n        this.closeDialog = this.closeDialog.bind(this);\n    }\n\n    execute() {\n        this.setState({\n            dialogOpen: false\n        });\n\n        fetch(this.props.url)\n            .then(res => res.json())\n            .then(\n                (result) => {\n\n                },\n                (error) => {\n\n                }\n            )\n\n    }\n\n    openDialog() {\n        this.setState({\n            dialogOpen: true\n        });\n    }\n\n    closeDialog() {\n        this.setState({\n            dialogOpen: false\n        });\n    }\n\n    render() {\n        if (this.state.dialogOpen) {\n            return (\n                <div className=\"prompt-wrapper\">\n                    <div className='prompt'>\n                        <div className=\"prompt-header\">{this.props.header}</div>\n                        <div className=\"prompt-text\">{this.props.text}</div>\n                        <div className=\"buttons\">\n                            <div onClick={this.execute}>Yes</div>\n                            <div onClick={this.closeDialog}>No</div>\n                        </div>\n                    </div>\n                </div>\n            );\n        } else {\n            return \"\";\n        }\n    }\n}\n\nexport default ReassuringPrompt;","import State from \"./Global\";\nimport Scheduler from \"./Scheduler\";\nimport View from \"./View\";\n\nclass Repository {\n    constructor(evtSource) {\n        this.evtSource = evtSource;       \n        this.presets = {};\n        this.projects = {};\n        this.choices = {};\n        this.tasks = {};\n        this.codeVersions = {};\n        this.onChangeListeners = {\n            \"presets\": [],\n            \"projects\": [],\n            \"choices\": [],\n            \"tasks\": [],\n            \"codeVersions\": []\n        };\n        this.onAddListeners = {\n            \"presets\": [],\n            \"projects\": [],\n            \"choices\": [],\n            \"tasks\": [],\n            \"codeVersions\": []\n        };\n        this.onRemoveListeners = {\n            \"presets\": [],\n            \"projects\": [],\n            \"choices\": [],\n            \"tasks\": [],\n            \"codeVersions\": []\n        };\n        \n        this.evtSource.addEventListener(\"PROJECT_CHANGED\", (e) => {\n            const changedProject = JSON.parse(e.data);\n            this.updateEntity(this.projects, changedProject, \"projects\", \"name\");\n        });\n\n        this.evtSource.addEventListener(\"CODE_VERSION_CHANGED\", (e) => {\n            const changedCodeVersion = JSON.parse(e.data);\n            changedCodeVersion.time = new Date(changedCodeVersion.time * 1000);\n            this.updateEntity(this.codeVersions, changedCodeVersion, \"codeVersions\");\n        });\n\n        this.evtSource.addEventListener(\"PRESET_CHANGED\", (e) => {\n            const changedPreset = JSON.parse(e.data);\n\n            if (changedPreset.uuid in this.presets) {\n                changedPreset.choices = this.presets[changedPreset.uuid].choices;\n            } else {\n                changedPreset.choices = [];\n            }\n            if (changedPreset.deprecated_choice in this.choices)\n                changedPreset.deprecated_choice = this.choices[changedPreset.deprecated_choice];\n            if (changedPreset.default_choice in this.choices)\n                changedPreset.default_choice = this.choices[changedPreset.default_choice];\n\n            this.updateEntity(this.presets, changedPreset, \"presets\");\n        });\n\n        this.evtSource.addEventListener(\"CHOICE_CHANGED\", (e) => {\n            const changedChoice = JSON.parse(e.data);\n\n            changedChoice.creation_time = new Date(changedChoice.creation_time * 1000);\n\n            this.updateEntity(this.choices, changedChoice, \"choices\");\n\n            let preset = this.presets[changedChoice.preset];\n            const previousIndex = preset.choices.findIndex(function (e) {\n                return e.uuid === changedChoice.uuid\n            });\n\n            if (previousIndex >= 0) {\n                preset.choices[previousIndex] = changedChoice;\n            } else {\n                preset.choices.push(changedChoice);\n            }\n            this.updateEntity(this.presets, preset, \"presets\");\n\n            preset = Object.values(this.presets).find((preset) => preset.deprecated_choice === changedChoice.uuid);\n            if (preset !== undefined) {\n                preset.deprecated_choice = changedChoice;\n                this.updateEntity(this.presets, preset, \"presets\");\n            }\n            preset = Object.values(this.presets).find((preset) => preset.default_choice === changedChoice.uuid);\n            if (preset !== undefined) {\n                preset.default_choice = changedChoice;\n                this.updateEntity(this.presets, preset, \"presets\");\n            }\n        });\n\n        this.evtSource.addEventListener(\"TASK_CHANGED\", (e) => {\n            const changedTask = JSON.parse(e.data);\n\n            changedTask.creation_time = new Date(changedTask.creation_time * 1000);\n            changedTask.saved_time = new Date(changedTask.saved_time * 1000);\n            changedTask.choices = changedTask.choices.map(e => [this.choices[e[0]]].concat(e.slice(1)));\n            for (let checkpoint of changedTask.checkpoints) {\n                checkpoint.time = new Date(checkpoint.time * 1000);\n            }\n\n            if (changedTask.state === State.RUNNING) {\n                if (changedTask.uuid in this.tasks) {\n                    if (changedTask.finished_iterations !== this.tasks[changedTask.uuid].finished_iterations) {\n                        changedTask.mean_iteration_time = (changedTask.iteration_update_time - (this.tasks[changedTask.uuid].iteration_update_time === 0 ? changedTask.start_time : this.tasks[changedTask.uuid].iteration_update_time)) / (changedTask.finished_iterations - this.tasks[changedTask.uuid].finished_iterations);\n                        changedTask.total_time = parseInt(changedTask.iteration_update_time - changedTask.start_time + changedTask.mean_iteration_time * (changedTask.total_iterations - changedTask.finished_iterations));\n                    } else {\n                        changedTask.mean_iteration_time = this.tasks[changedTask.uuid].mean_iteration_time;\n                        changedTask.total_time = this.tasks[changedTask.uuid].total_time;\n                    }\n                }\n                changedTask.start_time_timestamp = changedTask.start_time;\n                changedTask.start_time = new Date(changedTask.start_time * 1000);\n                Scheduler.refreshRunTime(changedTask);\n            }\n\n            if (changedTask.uuid in this.tasks) {\n                changedTask.name = this.tasks[changedTask.uuid].name;\n                changedTask.try = this.tasks[changedTask.uuid].try;\n                changedTask.nameChoices = this.tasks[changedTask.uuid].nameChoices;\n            }\n\n            this.updateEntity(this.tasks, changedTask, \"tasks\");\n        });\n\n        this.evtSource.addEventListener(\"TASK_REMOVED\", (e) => {\n            const changedTask = JSON.parse(e.data);\n            this.removeEntity(this.tasks, changedTask, \"tasks\")\n        });\n\n        this.evtSource.addEventListener(\"CHOICE_REMOVED\", (e) => {\n            const changedChoice = JSON.parse(e.data);\n            this.removeEntity(this.choices, changedChoice, \"choices\");\n\n            let preset = this.presets[changedChoice.preset];\n            const previousIndex = preset.choices.findIndex(function (e) {\n                return e.uuid === changedChoice.uuid\n            });\n\n            if (previousIndex >= 0) {\n                preset.choices.splice(previousIndex, 1);\n                this.updateEntity(this.presets, preset, \"presets\");\n            }\n        });\n\n        this.evtSource.addEventListener(\"PRESET_REMOVED\", (e) => {\n            const changedPreset = JSON.parse(e.data);\n            this.removeEntity(this.presets, changedPreset, \"presets\")\n        });\n\n        this.standardView = new View(true);\n\n        let updateTaskNames = () => {\n            for (const key of Object.keys(this.tasks)) {\n                if (!this.tasks[key].is_test) {\n                    let node = this.standardView.taskByUuid[key];\n                    this.tasks[key].nameChoices = this.standardView.getNodeChoicePath(node, this.tasks[key]);\n                    this.tasks[key].try = this.standardView.keyInDict(node.children, key);\n                } else {\n                    this.tasks[key].nameChoices = [];\n                    this.tasks[key].try = 0\n                }\n            }\n        };\n\n        this.onAdd(\"tasks\", (task) => {\n            if (!task.is_test)\n                this.standardView.addTask(task);\n\n            updateTaskNames();\n        });\n        this.onRemove(\"tasks\", (task) => {\n            this.standardView.removeTask(task);\n\n            updateTaskNames();\n        });\n        this.onChange(\"presets\", (presets) => {\n            this.standardView.updatePresets(Object.values(presets));\n\n            updateTaskNames();\n        });\n        this.onChange(\"tasks\", (tasks) => {\n            this.standardView.updateTasks(tasks);\n        });\n    }\n\n    updateEntity(entities, newEntity, entityType, key=\"uuid\") {\n        const isNew = !(newEntity[key] in entities);\n        entities[newEntity[key]] = newEntity;\n\n        if (isNew)\n            this.throwOnAddEvent(newEntity, entityType);\n        this.throwOnChangeEvent(entities, entityType);\n    }\n\n    removeEntity(entities, entityToRemove, entityType, key=\"uuid\") {\n        let entity = entities[entityToRemove[key]];\n        delete entities[entityToRemove[key]];\n\n        this.throwOnRemoveEvent(entity, entityType);\n        this.throwOnChangeEvent(entities, entityType);\n    }\n\n    throwOnChangeEvent(entities, entityType) {\n        let entitiesClone = Object.assign({}, entities);\n        for (let listener of this.onChangeListeners[entityType]) {\n            listener(entitiesClone);\n        }\n    }\n\n    throwOnAddEvent(entity, entityType) {\n        for (let listener of this.onAddListeners[entityType]) {\n            listener(entity);\n        }\n    }\n\n    throwOnRemoveEvent(entity, entityType) {\n        for (let listener of this.onRemoveListeners[entityType]) {\n            listener(entity);\n        }\n    }\n\n    onChange(entityType, listener) {\n        this.onChangeListeners[entityType].push(listener);\n    }\n\n    removeOnChange(entityType, listener) {\n        const listenerIndex = this.onChangeListeners[entityType].findIndex(listener);\n        if (listenerIndex >= 0)\n            this.onChangeListeners[entityType].splice(listenerIndex, 1);\n    }\n\n    onAdd(entityType, listener) {\n        this.onAddListeners[entityType].push(listener);\n    }\n\n    removeOnAdd(entityType, listener) {\n        const listenerIndex = this.onAddListeners[entityType].findIndex(listener);\n        if (listenerIndex >= 0)\n            this.onAddListeners[entityType].splice(listenerIndex, 1);\n    }\n\n    onRemove(entityType, listener) {\n        this.onRemoveListeners[entityType].push(listener);\n    }\n\n    removeOnRemove(entityType, listener) {\n        const listenerIndex = this.onRemoveListeners[entityType].findIndex(listener);\n        if (listenerIndex >= 0)\n            this.onRemoveListeners[entityType].splice(listenerIndex, 1);\n    }\n\n}\n\nexport default Repository;","import React from 'react';\nimport Device from \"./Device\";\nimport State from \"./Global\";\nimport Prompt from \"./Prompt\";\n\nclass Scheduler extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            tasks: [],\n            max_running: 1,\n            hiddenDevices: {}\n        };\n\n        this.props.evtSource.addEventListener(\"SCHEDULER_OPTIONS\", (e) => {\n            const options = JSON.parse(e.data);\n            this.setState({\n                max_running: options.max_running\n            });\n        });\n\n        this.promptAddDeviceRefs = React.createRef();\n        this.openMaxRunningDialogRefs = React.createRef();\n        this.updateTasks = this.updateTasks.bind(this);\n        this.openMaxRunningDialog = this.openMaxRunningDialog.bind(this);\n        this.hideDevice = this.hideDevice.bind(this);\n    }\n\n    static refreshRunTime(task) {\n        task.run_time = parseInt((Date.now() - task.start_time) / 1000);\n    }\n\n    componentDidMount() {\n        var pm = this;\n        this.timerID = setInterval(\n            function() {\n                const tasks = pm.state.tasks.slice();\n                tasks.filter(task => task.state === State.RUNNING).forEach(task => Scheduler.refreshRunTime(task));\n                pm.setState({\n                    tasks: tasks\n                });\n            },\n            1000\n        );\n        this.props.repository.onChange(\"tasks\", this.updateTasks);\n        this.updateTasks(this.props.repository.tasks);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.timerID);\n        this.props.repository.removeOnChange(\"tasks\", this.updateTasks);\n    }\n\n    updateTasks(tasks) {\n        this.setState({\n            tasks: Object.values(tasks).filter(task => task.state === State.RUNNING || task.state === State.QUEUED)\n        });\n    }\n\n    openMaxRunningDialog() {\n        this.openMaxRunningDialogRefs.current.openDialog();\n    }\n\n    hideDevice(device) {\n        const hiddenDevices = Object.assign({}, this.state.hiddenDevices);\n\n        hiddenDevices[device.uuid] = true;\n\n        this.setState({\n            hiddenDevices: hiddenDevices\n        })\n    }\n\n    showDevice(device) {\n        const hiddenDevices = Object.assign({}, this.state.hiddenDevices);\n\n        hiddenDevices[device.uuid] = false;\n\n        this.setState({\n            hiddenDevices: hiddenDevices\n        })\n    }\n\n    render() {\n        return (\n            <div id=\"scheduler\">\n                <div className=\"dropdown\">\n                    <div className=\"action\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" >\n                        Add device\n                    </div>\n                    <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n                        {this.props.devices.filter(device => (device.uuid in this.state.hiddenDevices) && this.state.hiddenDevices[device.uuid]).map(device => (\n                            <div className=\"dropdown-item\" onClick={() => this.showDevice(device)}>{device.name}</div>\n                        ))}\n                        {this.props.devices.filter(device => (device.uuid in this.state.hiddenDevices) && this.state.hiddenDevices[device.uuid]).length > 0 &&\n                            <div className=\"dropdown-divider\"></div>\n                        }\n                        <div className=\"dropdown-item\" onClick={() => this.promptAddDeviceRefs.current.openDialog()}>Add new device</div>\n                    </div>\n                </div>\n                <Prompt ref={this.promptAddDeviceRefs} header=\"Add new device\" text=\"Specify the ip address and the port of the new device:\" url={\"/add_device\"}/>\n\n                <div className=\"mock-device\"></div>\n                 {this.props.devices.filter(device => !(device.uuid in this.state.hiddenDevices) || !this.state.hiddenDevices[device.uuid]).map(device => (\n                    <Device device={device} tasks={this.state.tasks.filter(task => task.device === device.uuid)} hideDevice={this.hideDevice}/>\n                ))}\n                <div className=\"mock-device\"></div>\n            </div>\n        );\n    }\n}\n\n\nexport default Scheduler;","import React from 'react';\nimport State from \"./Global\";\nimport Prompt from \"./Prompt\";\nimport $ from 'jquery';\n\nexport class TaskName extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.wrapperRef = React.createRef();\n    }\n\n    componentDidMount() {\n        $(this.wrapperRef.current).find('[data-toggle=\"tooltip\"]').tooltip();\n    }\n\n    componentDidUpdate() {\n        $(this.wrapperRef.current).find('[data-toggle=\"tooltip\"]').tooltip();\n    }\n\n\n    render() {\n        if (this.props.task.is_test) {\n            return (\n                <span ref={this.wrapperRef}>Test</span>\n            );\n        } else {\n            if (this.props.task.nameChoices.length > 0) {\n                return (\n                    <span ref={this.wrapperRef}>\n                {this.props.task.nameChoices.map((choicePreset, i) => {\n                    let choice_name = choicePreset[1].name;\n                    for (let i = 2; i < choicePreset.length; i++)\n                        choice_name = choice_name.replace(\"$T\" + (i - 2) + \"$\", choicePreset[i]);\n\n                    return (\n                        <span key={i}>\n                        {i !== 0 &&\n                        <span className=\"separator\">/</span>\n                        }\n                            <span data-toggle=\"tooltip\" data-placement=\"bottom\" data-original-title={choicePreset[0].name + \": \" + choice_name}>{choice_name}</span>\n                    </span>\n                    )\n                })}\n            </span>\n                );\n            } else {\n                return (\n                    <span ref={this.wrapperRef}>Default config</span>\n                );\n            }\n        }\n    }\n}\n\n\nfunction TaskStatus(props) {\n    if (props.state === State.RUNNING) {\n        function pad(n) {\n            n = parseInt(n);\n            return (n < 10) ? (\"0\" + n) : n;\n        }\n\n        function renderTime(time) {\n            if (time > 0) {\n                if (time >= 3600)\n                    return pad(time / 3600) + \":\" + pad((time % 3600) / 60) + \":\" + pad(time % 60);\n                else\n                    return pad(time / 60) + \":\" + pad(time % 60);\n            } else\n                return \"--:--\";\n        }\n\n        return <div className=\"time\">{renderTime(props.run_time)} / {renderTime(props.total_time)}</div>;\n    } else {\n        return <div className=\"time\">{props.index + 1}</div>\n    }\n}\n\nfunction TaskProgress(props) {\n    if (props.state === State.RUNNING) {\n        var style = {width: (props.mean_iteration_time > 0 ? Math.min(1, ((props.run_time + props.start_time - props.iteration_update_time) / props.mean_iteration_time + props.finished_iterations) / props.total_iterations) * 100 : 0) + '%'};\n        return <div className=\"progress\" style={style}></div>;\n    } else {\n        return \"\";\n    }\n}\n\nclass TaskToolbar extends React.Component {\n    constructor(props) {\n        super(props);\n        this.pause = this.pause.bind(this);\n        this.saveNow = this.saveNow.bind(this);\n        this.cancel = this.cancel.bind(this);\n        this.runNow = this.runNow.bind(this);\n        this.openExtraDialog = this.openExtraDialog.bind(this);\n        this.openPresetDialog = this.openPresetDialog.bind(this);\n        this.promptExtraRefs = React.createRef();\n        this.promptPresetRefs = React.createRef();\n        this.openLog = this.openLog.bind(this);\n        this.clone = this.clone.bind(this);\n        this.terminate = this.terminate.bind(this);\n    }\n\n    pause() {\n        fetch(\"/pause/\" + this.props.task.uuid)\n            .then(res => res.json())\n            .then(\n                (result) => {\n\n                },\n                (error) => {\n\n                }\n            )\n    }\n\n    saveNow() {\n        fetch(\"/save_now/\" + this.props.task.uuid)\n            .then(res => res.json())\n            .then(\n                (result) => {\n\n                },\n                (error) => {\n\n                }\n            )\n    }\n\n    cancel() {\n        fetch(\"/cancel/\" + this.props.task.uuid)\n            .then(res => res.json())\n            .then(\n                (result) => {\n\n                },\n                (error) => {\n\n                }\n            )\n    }\n\n    runNow() {\n        fetch(\"/run_now/\" + this.props.task.uuid)\n            .then(res => res.json())\n            .then(\n                (result) => {\n\n                },\n                (error) => {\n\n                }\n            )\n    }\n\n    openExtraDialog() {\n        this.promptExtraRefs.current.openDialog();\n    }\n\n    openPresetDialog() {\n        this.promptPresetRefs.current.openDialog();\n    }\n\n    openLog() {\n        window.open(\"/log/\" + this.props.task.uuid, '_blank');\n    }\n\n     clone() {\n        fetch(\"/clone_task/\" + this.props.task.uuid)\n            .then(res => res.json())\n            .then(\n                (result) => {\n\n                },\n                (error) => {\n\n                }\n            )\n    }\n\n    terminate() {\n        fetch(\"/terminate/\" + this.props.task.uuid)\n            .then(res => res.json())\n            .then(\n                (result) => {\n\n                },\n                (error) => {\n\n                }\n            )\n    }\n\n    render() {\n        let currentAction = \"\";\n        if (this.props.task.is_pausing) {\n            currentAction = \"pausing...\"\n        } else if (this.props.task.is_saving) {\n            currentAction = \"saving...\"\n        }\n        return (\n            <div className=\"toolbar\">\n                {this.props.task.state === State.RUNNING &&\n                    <span>\n                        <div className=\"action\" onClick={this.pause} title=\"Pause the task after the current iteration\">\n                            <i className=\"fa fa-pause\"></i><span>Pause</span>\n                        </div>\n                        < div className=\"action\" onClick={this.saveNow} title=\"Force the task to save after the current iteration\">\n                            <i className=\"fas fa-save\"></i><span>Save now!</span>\n                        </div>\n                        < div className=\"action\" onClick={this.openExtraDialog} title=\"Change the scheduled number of total iterations\">\n                            <i className=\"fa fa-edit\"></i><span>Change</span>\n                        </div>\n                        <div className=\"dropdown\">\n                            <div className=\"action dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" >\n                                <i className=\"fas fa-ellipsis-v\"></i>\n                            </div>\n                            <div className=\"dropdown-menu\">\n                                <div className=\"action\" onClick={this.openLog} title=\"View the log\">\n                                    <i className=\"far fa-file-alt\"></i><span>Log</span>\n                                </div>\n                                < div className=\"action\" onClick={this.openPresetDialog} title=\"Adjust the configuration on the fly\">\n                                    <i className=\"fas fa-code\"></i><span>Config</span>\n                                </div>\n                                <div className=\"action\" onClick={this.clone} title=\"Clone task\">\n                                    <i className=\"far fa-copy\"></i><span>Clone</span>\n                                </div>\n                                <div className=\"action\" onClick={this.terminate} title=\"Terminate task\">\n                                   <i className=\"fas fa-skull-crossbones\"></i><span>Terminate</span>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"current-action\">\n                            {currentAction}\n                        </div>\n                    </span>\n                }\n                {this.props.task.state === State.QUEUED &&\n                    <span>\n                        <div className=\"action\" onClick={this.runNow} title=\"Pause one of the running tasks and start this one instead\">\n                            <i className=\"fas fa-exclamation-triangle\"></i><span>Run now!</span>\n                        </div>\n                        < div className=\"action\" onClick={this.openExtraDialog} title=\"Change the scheduled number of total iterations\">\n                            <i className=\"fa fa-edit\"></i><span>Change</span>\n                        </div>\n                        < div className=\"action\" onClick={this.openPresetDialog} title=\"Adjust the configuration on the fly\">\n                            <i className=\"fas fa-code\"></i><span>Config</span>\n                        </div>\n                        <div className=\"dropdown\">\n                            <div className=\"action dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" >\n                                <i className=\"fas fa-ellipsis-v\"></i>\n                            </div>\n                            <div className=\"dropdown-menu\">\n                                <div className=\"action\" onClick={this.cancel} title=\"Remove this task from the queue\">\n                                    <i className=\"fas fa-times\"></i><span>Cancel</span>\n                                </div>\n                                <div className=\"action\" onClick={this.clone} title=\"Clone task\">\n                                    <i className=\"far fa-copy\"></i><span>Clone</span>\n                                </div>\n                            </div>\n                        </div>\n                    </span>\n                }\n                <Prompt ref={this.promptExtraRefs} defaultValue={this.props.task.total_iterations} header=\"Change total iterations?\" text=\"Specify the new number of iterations, you want the task to run:\" url={\"/change/\" + this.props.task.uuid}/>\n                <Prompt ref={this.promptPresetRefs} presetEditor={true} presetEditorUrl={\"/config/task_timestep/\" + this.props.task.uuid} header=\"Change config?\" text=\"Specify the new configuration which will be used on the fly:\" url={\"/adjust_task_preset/\" + this.props.task.uuid}/>\n            </div>\n        );\n    }\n}\n\nclass Task extends React.Component {\n    constructor(props) {\n        super(props);\n        this.projectName = React.createRef();\n        this.onMouseDown = this.onMouseDown.bind(this);\n        this.onDragStart = this.onDragStart.bind(this);\n        this.onDragOver = this.onDragOver.bind(this);\n        this.onDragEnter = this.onDragEnter.bind(this);\n        this.onDragLeave = this.onDragLeave.bind(this);\n        this.onDrop = this.onDrop.bind(this);\n        this.taskRef = React.createRef();\n        this.dragEnterCounter = 0\n    }\n\n    onMouseDown(e) {\n        this.target = e.target;\n    }\n\n    onDragStart(e) {\n        if (this.projectName.current.contains(this.target)) {\n            e.dataTransfer.setData(\"text/plain\", this.props.task.uuid);\n        } else {\n            e.preventDefault();\n        }\n    }\n\n    onDragOver(e) {\n        if (this.props.task.state === State.QUEUED && this.props.task.uuid !== e.dataTransfer.getData(\"text/plain\")) {\n            e.preventDefault();\n        }\n    }\n\n    onDrop(e) {\n        if (this.props.task.state === State.QUEUED && this.props.task.uuid !== e.dataTransfer.getData(\"text/plain\")) {\n            e.preventDefault();\n            fetch(\"/reorder_task/\" + e.dataTransfer.getData(\"text/plain\") + \"/\" + this.props.index)\n            .then(res => res.json())\n            .then(\n                (result) => {\n\n                },\n                (error) => {\n\n                }\n            );\n\n            this.dragEnterCounter = 0;\n            this.taskRef.current.className = \"task\";\n        }\n    }\n\n    onDragEnter(e) {\n        if (this.props.task.state === State.QUEUED && this.props.task.uuid !== e.dataTransfer.getData(\"text/plain\")) {\n            e.preventDefault();\n            this.taskRef.current.className = \"task on-drag-over\";\n            this.dragEnterCounter++;\n        }\n    }\n\n    onDragLeave(e) {\n        if (this.props.task.state === State.QUEUED && this.props.task.uuid !== e.dataTransfer.getData(\"text/plain\")) {\n            e.preventDefault();\n            this.dragEnterCounter--;\n            if (this.dragEnterCounter === 0)\n                this.taskRef.current.className = \"task\";\n        }\n    }\n\n    render() {\n        return (\n            <li ref={this.taskRef} className=\"task\" onDragOver={this.onDragOver} onDragLeave={this.onDragLeave} onDragEnter={this.onDragEnter} onDrop={this.onDrop} onDragStart={this.onDragStart} onMouseDown={this.onMouseDown} draggable={this.props.task.state === State.QUEUED ? \"true\" : \"false\"} >\n                <div className=\"content\">\n                    <div className=\"header\">\n                        <div className=\"project-name\" ref={this.projectName}>{this.props.task.project_name}</div>\n                        <div className=\"status\">\n                            <TaskStatus index={this.props.index} state={this.props.task.state} total_time={this.props.task.total_time} run_time={this.props.task.run_time}/>\n                            <div className=\"iterations\">{this.props.task.finished_iterations} / {this.props.task.total_iterations}</div>\n                        </div>\n                    </div>\n                    <TaskProgress state={this.props.task.state} total_iterations={this.props.task.total_iterations} run_time={this.props.task.run_time} start_time={this.props.task.start_time_timestamp} mean_iteration_time={this.props.task.mean_iteration_time} finished_iterations={this.props.task.finished_iterations} iteration_update_time={this.props.task.iteration_update_time}/>\n                    <div className=\"preset-name\" onClick={() => this.props.highlightTask(this.props.task)}><span className=\"try-number\">{this.props.task.try}</span><TaskName task={this.props.task}/></div>\n                </div>\n                <TaskToolbar task={this.props.task}/>\n            </li>\n        );\n    }\n}\n\nexport default Task;","import React from 'react';\nimport ConfigEditor from \"./ConfigEditor\";\nimport Preset from \"./Preset\";\nimport Option from \"./Option\";\nimport PresetFilter from \"./PresetFilter\";\nimport JsonEditor from \"./JsonEditor\";\nimport $ from \"jquery\";\n\nclass TaskEditor extends React.Component {\n    constructor(props) {\n        super(props);\n\n        let selectedChoices = {};\n\n        for (const preset of props.presets) {\n            if (preset.choices.length > 0)\n                selectedChoices[preset.uuid] = [preset.choices[0].uuid];\n        }\n\n        this.state = {\n            selectedChoices: selectedChoices,\n            uuid_to_load: null,\n            total_iterations: \"\",\n            save_interval: \"0\",\n            checkpoint_interval: \"0\",\n            open: false,\n            command: \"\",\n            commandHint: \"\",\n            isTest: false,\n            device: null\n        };\n\n\n        this.configEditor = React.createRef();\n        this.open = this.open.bind(this);\n        this.close = this.close.bind(this);\n        this.run = this.run.bind(this);\n        this.new = this.new.bind(this);\n        this.onSelectionChange = this.onSelectionChange.bind(this);\n        this.onTotalIterationsChange = this.onTotalIterationsChange.bind(this);\n        this.onCheckpointIntervalChange = this.onCheckpointIntervalChange.bind(this);\n        this.onSaveIntervalChange = this.onSaveIntervalChange.bind(this);\n        this.copyCommand = this.copyCommand.bind(this);\n        this.onIsTestChange = this.onIsTestChange.bind(this);\n        this.onDeviceChange = this.onDeviceChange.bind(this);\n        this.wrapperRef = React.createRef();\n        this.commandInput = React.createRef();\n    }\n\n    open(task) {\n\n        let selectedChoices = Object.assign({}, this.state.selectedChoices);\n\n        for (const preset of this.props.presets) {\n            let suitableChoice = null;\n            let args = [];\n            for (const choice of task.choices) {\n                if (choice[0].preset === preset.uuid) {\n                    suitableChoice = choice[0];\n                    args = choice.slice(1);\n                    break;\n                }\n            }\n\n            if (suitableChoice === null)\n                selectedChoices[preset.uuid] = [preset.deprecated_choice.uuid, ...args];\n            else\n                selectedChoices[preset.uuid] = [suitableChoice.uuid, ...args];\n        }\n\n        this.setState({\n            selectedChoices: selectedChoices,\n            open: true,\n            isTest: task.is_test,\n            device: this.props.devices[0].uuid\n        });\n        this.updateCommand(selectedChoices);\n    }\n\n    new() {\n        let selectedChoices = Object.assign({}, this.state.selectedChoices);\n\n        for (const preset of this.props.presets) {\n            if (!(preset.uuid in selectedChoices))\n                selectedChoices[preset.uuid] = [preset.default_choice.uuid];\n        }\n\n        this.setState({\n            selectedChoices: selectedChoices,\n            open: true,\n            device: this.props.devices[0].uuid\n        });\n        this.updateCommand(selectedChoices);\n    }\n\n    close() {\n        this.setState({\n            choice: null,\n            open: false\n        });\n    }\n\n    run() {\n        var data = new FormData();\n\n        var dataJson = {};\n        dataJson['choices'] = this.state.selectedChoices;\n        dataJson['config'] = {\n            \"save_interval\": parseInt(this.state.save_interval),\n            \"checkpoint_interval\": parseInt(this.state.checkpoint_interval)\n        };\n        dataJson['device'] = this.state.device;\n\n        data.append(\"data\", JSON.stringify(dataJson));\n\n        var url = \"/\" + (this.state.isTest ? \"test\" : \"start\") + \"/\" + this.props.project_name + \"/\" + this.state.total_iterations;\n\n        fetch(url,\n            {\n                method: \"POST\",\n                body: data\n            })\n            .then(res => res.json())\n            .then(\n                (result) => {\n\n                },\n                (error) => {\n\n                }\n            );\n\n        this.close();\n    }\n\n    onSelectionChange(preset, choice, arg=null) {\n        const selectedChoices = Object.assign({}, this.state.selectedChoices);\n\n        selectedChoices[preset.uuid] = [choice.uuid];\n        if (arg !== null)\n            selectedChoices[preset.uuid].push(arg);\n\n        this.setState({\n            selectedChoices: selectedChoices\n        });\n        this.updateCommand(selectedChoices);\n    }\n\n\n    onTotalIterationsChange(event) {\n        this.setState({\n            total_iterations: event.target.value\n        });\n        this.updateCommand(null, event.target.value);\n    }\n\n    onSaveIntervalChange(event) {\n        this.setState({\n            save_interval: event.target.value\n        });\n    }\n\n    onCheckpointIntervalChange(event) {\n        this.setState({\n            checkpoint_interval: event.target.value\n        });\n    }\n\n    updateCommand(selectedChoices = null, total_iterations = null) {\n        if (selectedChoices === null)\n            selectedChoices = this.state.selectedChoices;\n        if (total_iterations === null)\n            total_iterations = this.state.total_iterations;\n        let choices = \"\";\n\n        for (const preset of this.props.presets) {\n            if (preset.uuid in selectedChoices) {\n                choices += preset.uuid + \" \" + selectedChoices[preset.uuid][0];\n                for (let i = 1; i < selectedChoices[preset.uuid].length; i++)\n                    choices += \":\\\"\" + selectedChoices[preset.uuid][i] + \"\\\"\";\n                choices += \" \";\n            }\n        }\n\n        if (total_iterations !== \"\") {\n            this.setState({\n                command: \"taskplan \" + (this.state.isTest ? \"test \" : \"start \") + this.props.project_name + \" \" + total_iterations + \" \" + choices,\n                commandHint: \"Click to copy\"\n            });\n        } else {\n            this.setState({\n                command: \"\",\n                commandHint: \"Total iterations missing\"\n            });\n        }\n    }\n\n    componentDidMount() {\n        $(this.wrapperRef.current).find('[data-toggle=\"tooltip\"]').tooltip();\n    }\n\n    componentDidUpdate() {\n        $(this.wrapperRef.current).find('[data-toggle=\"tooltip\"]').tooltip();\n    }\n\n    copyCommand() {\n        this.commandInput.current.select();\n        document.execCommand(\"copy\");\n        this.setState({\n            commandHint: \"Copied!\"\n        }, () => $(this.commandInput.current).tooltip('show'));\n    }\n\n    onIsTestChange(event) {\n        this.setState({\n            isTest: event.target.checked\n        }, () => this.updateCommand());\n    }\n\n    onDeviceChange(event) {\n        this.setState({\n            device: event.target.value\n        });\n    }\n\n    render() {\n        return (\n            <div ref={this.wrapperRef} style={{'display': (this.state.open ? 'block' : 'none')}}>\n                <div className=\"task-editor slide-editor editor\">\n                    <div className=\"header\">Start task<i className=\"fas fa-times\" onClick={this.close}></i></div>\n                    <div className=\"field\">\n                        <label>Total iterations:</label>\n                        <input value={this.state.total_iterations} onChange={this.onTotalIterationsChange} required=\"required\" />\n                    </div>\n                    <div className=\"field\">\n                        <label>Save interval:</label>\n                        <input value={this.state.save_interval} onChange={this.onSaveIntervalChange} required=\"required\" />\n                    </div>\n                    <div className=\"field\">\n                        <label>Checkpoint interval:</label>\n                        <input value={this.state.checkpoint_interval} onChange={this.onCheckpointIntervalChange} required=\"required\" />\n                    </div>\n                    <div className=\"field\">\n                        <label>Is test:</label>\n                        <input checked={this.state.isTest} onChange={this.onIsTestChange} type=\"checkbox\" />\n                    </div>\n                    <PresetFilter presetsByGroup={this.props.presetsByGroup} selectedChoices={this.state.selectedChoices} onSelectionChange={this.onSelectionChange} useTemplateFields={true}/>\n                    <ConfigEditor ref={this.configEditor} url={\"/config/task/\" + this.props.project_name} bases={Object.values(this.state.selectedChoices)} preview={true} />\n                    <div className=\"field\">\n                        <label>Device:</label>\n                        <select value={this.state.device} onChange={this.onDeviceChange}>\n                            {this.props.devices.map(device => (\n                                <option value={device.uuid}>{device.name}</option>\n                            ))}\n                        </select>\n                    </div>\n                    <div className=\"field\">\n                        <label>Command:</label>\n                        <input className=\"command\" ref={this.commandInput} onClick={this.copyCommand} data-toggle=\"tooltip\" data-placement=\"bottom\" data-original-title={this.state.commandHint} value={this.state.command} readOnly={true} />\n                    </div>\n                    <div className=\"buttons\">\n                        <div onClick={this.run}>Run</div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default TaskEditor;","import React from 'react';\nimport Preset from \"./Preset\";\nimport State from \"./Global\";\nimport FinishedTask from \"./FinishedTask\";\nimport PausedTask from \"./PausedTask\";\nimport PresetEditor from \"./PresetEditor\";\nimport ChoiceEditor from \"./ChoiceEditor\";\nimport TaskEditor from \"./TaskEditor\";\nimport TaskView from \"./TaskView\";\nimport PresetFilter from \"./PresetFilter\";\nimport TaskViewer from \"./TaskViewer\";\nimport View from \"./View\";\nimport PresetTab from \"./PresetTab\";\nimport PresetViewer from \"./PresetViewer\";\n\nclass TaskTab extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n        };\n        this.newTask = this.newTask.bind(this);\n        this.rerunTask = this.rerunTask.bind(this);\n        this.closeEditors = this.closeEditors.bind(this);\n        this.taskEditor = React.createRef();\n    }\n\n    closeEditors() {\n        this.taskEditor.current.close();\n    }\n\n    newTask() {\n        this.taskEditor.current.new();\n    }\n\n    rerunTask(task) {\n        this.taskEditor.current.open(task);\n    }\n\n    render() {\n        return (\n            <div className=\"tab\" style={{'display': (this.props.active ? 'flex' : 'none')}}>\n                <ul className=\"tasks-tab\" >\n                    {this.props.selectedTasks.filter(uuid => uuid in this.props.tasks).map(uuid => this.props.tasks[uuid]).sort((a, b) => {\n                        let s;\n                        switch(this.props.sorting[1]) {\n                            case 0:\n                                s = a.saved_time - b.saved_time; break;\n                            case 1:\n                                s = a.preset_name.localeCompare(b.preset_name); break;\n                            case 2:\n                                s = a.creation_time - b.creation_time; break;\n                            case 3:\n                                s = a.finished_iterations - b.finished_iterations; break;\n                        }\n                        if (s === 0)\n                            s = a.try - b.try;\n                        if (this.props.sortingDescending[1])\n                            s *= -1;\n                        return s;\n                    }).map(task => (\n                        <PausedTask\n                            rerunTask={this.rerunTask}\n                            key={task.uuid}\n                            task={task}\n                            showTask={this.props.showTask}\n                            highlight={task.uuid === this.props.highlightedTask}\n                            filterLikeTask={this.props.filterLikeTask}\n                            devices={this.props.devices}\n                        />\n                    ))}\n                </ul>\n                <TaskEditor devices={this.props.devices} ref={this.taskEditor} presets={this.props.presets} presetsByGroup={this.props.presetsByGroup} project_name={this.props.project.name} />\n                <div className=\"tab-toolbar\">\n                    <label>\n                    </label>\n                    <div className=\"buttons\">\n                        <div onClick={this.newTask}>New task</div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n\nexport default TaskTab;\n","\nimport React from 'react';\nimport PausedTask from \"./PausedTask\";\n\nclass PresetNode extends React.Component {\n    render() {\n        return (\n            <div>\n                <div>{this.props.presets[0].name}</div>\n                <ul>\n                    {Object.keys(this.props.tasksPerChoice).map(choiceUuid => (\n                        <li>\n                            <div>{this.props.presets[0].choices.find(choice => choice.uuid === choiceUuid).name}</div>\n                            <Node presets={this.props.presets.slice(1)} tasks={this.props.tasksPerChoice[choiceUuid]} />\n                        </li>\n                    ))}\n                </ul>\n            </div>\n        );\n    }\n}\n\nclass TasksNode extends React.Component {\n    render() {\n        return (\n            <div>\n                {this.props.tasks.map(task => (\n                    <PausedTask\n                        rerunTask={this.rerunTask}\n                        key={task.uuid}\n                        task={task}\n                    />\n                ))}\n            </div>\n        );\n    }\n}\n\nclass Node extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        let presets = this.props.presets.slice(0);\n        let tasksPerChoice = {};\n        while (presets.length > 0) {\n            let preset = presets[0];\n            if (preset.deprecated_choice === \"\")\n                continue;\n\n            tasksPerChoice = {};\n            for (const task of this.props.tasks) {\n                let choice = task.choices.find(e => e.preset === preset.uuid);\n                if (choice === undefined)\n                    choice = preset.deprecated_choice.uuid;\n                else\n                    choice = choice.uuid;\n\n                if (!tasksPerChoice.hasOwnProperty(choice))\n                    tasksPerChoice[choice] = [];\n                tasksPerChoice[choice].push(task);\n            }\n            if (Object.keys(tasksPerChoice).length > 1)\n                break;\n            presets.shift();\n        }\n\n        if (presets.length > 0) {\n            return <PresetNode tasksPerChoice={tasksPerChoice} presets={presets} />\n        } else {\n            return <TasksNode tasks={this.props.tasks}/>\n        }\n    }\n}\n\n\nclass TaskView extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <Node presets={this.props.presets} tasks={this.props.tasks} />\n        );\n    }\n}\n\n\nexport default TaskView;","import React from 'react';\nimport ConfigEditor from \"./ConfigEditor\";\nimport {TaskName} from \"./Task\";\nimport State from \"./Global\";\n\nclass TaskViewer extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            task: null,\n            selectedChoices: {},\n            notes: \"\"\n        };\n\n        this.configEditor = React.createRef();\n        this.open = this.open.bind(this);\n        this.close = this.close.bind(this);\n        this.updateTasks = this.updateTasks.bind(this);\n        this.extractCheckpoint = this.extractCheckpoint.bind(this);\n        this.notesTextarea = React.createRef();\n        this.updateNotes = this.updateNotes.bind(this);\n        this.timer = null;\n    }\n\n    componentDidMount() {\n        this.props.repository.onChange(\"tasks\", this.updateTasks);\n    }\n\n    componentWillUnmount() {\n        this.props.repository.removeOnChange(\"tasks\", this.updateTasks);\n    }\n\n\n    open(task) {\n        let selectedChoices = {};\n        for (const preset of this.props.presets) {\n            let suitableChoice = null;\n            let args = [];\n            for (const choice of task.choices) {\n                if (choice[0].preset === preset.uuid) {\n                    suitableChoice = choice[0];\n                    args = choice.slice(1);\n                    break;\n                }\n            }\n\n            if (suitableChoice === null)\n                selectedChoices[preset.uuid] = preset.deprecated_choice.name;\n            else {\n                selectedChoices[preset.uuid] = suitableChoice.name;\n                for (let i = 0; i < args.length; i++)\n                    selectedChoices[preset.uuid] = selectedChoices[preset.uuid].replace(\"$T\" + (i) + \"$\", args[i]);\n            }\n\n        }\n\n        this.setState({\n            task: task,\n            selectedChoices: selectedChoices,\n            notes: task.notes\n        });\n    }\n\n    updateTasks(tasks) {\n        if (this.state.task !== null) {\n            this.setState({\n                task: this.state.task.uuid in tasks ? tasks[this.state.task.uuid] : null\n            });\n        }\n    }\n\n    close() {\n        this.setState({\n            task: null\n        });\n    }\n\n    extractCheckpoint(i) {\n        fetch(\"/extract_checkpoint/\" + this.state.task.uuid + \"/\" + i)\n        .then(res => res.json())\n        .then(\n            (result) => {\n            },\n            (error) => {\n\n            }\n        );\n    }\n\n\n    updateNotes(evt) {\n        const newValue = evt.target.value;\n        const task_uuid = this.state.task.uuid;\n        if (this.timer !== null)\n            clearTimeout(this.timer);\n\n        this.timer = setTimeout(() => {\n            var data = new FormData();\n\n            var dataJson = {};\n            dataJson['notes'] = newValue;\n\n            data.append(\"data\", JSON.stringify(dataJson));\n\n            var url = \"set_task_notes/\" + task_uuid;\n\n            fetch(url,\n                {\n                    method: \"POST\",\n                    body: data\n                })\n                .then(res => res.json())\n                .then(\n                    (result) => {\n\n                    },\n                    (error) => {\n\n                    }\n                );\n        }, 1000);\n\n\n        this.setState({\n            notes: newValue\n        });\n    }\n\n    render() {\n        if (this.state.task !== null) {\n            return (\n                <div className=\"task-viewer slide-editor editor\" >\n                    <div className=\"header\">Task details<i class=\"fas fa-times\" onClick={this.close}></i></div>\n                    <div className=\"title\"><span className=\"try-number\">{this.state.task.try}</span><TaskName task={this.state.task}/></div>\n                    <div className=\"metadata\">\n                        <div><span>Status:</span> {this.state.task.state === State.RUNNING ? \"Running\" : (this.state.task.state === State.QUEUED ? \"Queued\": \"Stopped\")}</div>\n                        <div><span>Iterations:</span> {this.state.task.finished_iterations} / {this.state.task.total_iterations}</div>\n                        <div><span>Started:</span> {this.state.task.creation_time.toShortStr()}</div>\n                        <div><span>Paused:</span> {this.state.task.saved_time.toShortStr()} {this.state.task.had_error == true && <span className=\"task-error\">(Error)</span>}</div>\n                        <div><span>Project:</span> {this.state.task.project_name}</div>\n                        <div><span>Code version:</span> {this.props.codeVersions[this.state.task.version].name}</div>\n                    </div>\n                    <ConfigEditor ref={this.configEditor} url={\"/config/task_timestep/\" + this.state.task.uuid + \"/0\"} bases={[]} preview={true}/>\n                    <h2>Notes:</h2>\n                    <div className=\"notes\">\n                        <textarea ref={this.notesTextarea} value={this.state.notes} onChange={evt => this.updateNotes(evt)}/>\n                    </div>\n                    <h2>Presets</h2>\n                    <div className=\"presets\">\n                        {this.props.presets.sort((a, b) => {\n                            return a.name.localeCompare(b.name);\n                        }).map(preset => (\n                            <div><span>{preset.name}:</span>{this.state.selectedChoices[preset.uuid]}</div>\n                        ))}\n                    </div>\n                    <h2>Checkpoints</h2>\n                    <div className=\"checkpoints\">\n                        {this.state.task.checkpoints.length > 0 ?\n                                this.state.task.checkpoints.map((checkpoint, i) => (\n                                    <div>\n                                        <span className=\"iteration\">{checkpoint.finished_iterations}</span>\n                                        <span className=\"time\">{checkpoint.time.toShortStr()}</span>\n                                        <div className=\"action\" onClick={() => this.extractCheckpoint(i)} title=\"Add task based on checkpoint\">\n                                            <i className=\"fas fa-arrow-right\"></i>\n                                        </div>\n                                    </div>\n                                ))\n                            :\n                            <span>No checkpoints exist</span>\n                        }\n                    </div>\n                </div>\n            );\n        } else {\n            return \"\";\n        }\n    }\n}\n\nexport default TaskViewer;","class Node {\n    constructor() {\n        this.children = {};\n        this.parent = null;\n        this.parentKey = \"\";\n    }\n\n    setChild(key, child) {\n        this.children[key] = child;\n        child.parent = this;\n        child.parentKey = key;\n    }\n\n    insertAsParent(key, newParent) {\n        this.parent.setChild(this.parentKey, newParent);\n        newParent.setChild(key, this);\n    }\n\n    remove() {\n        const key = Object.keys(this.children)[0];\n\n        let child = this.children[key];\n        this.parent.children[this.parentKey] = child;\n        child.parent = this.parent;\n        child.parentKey = this.parentKey;\n        return key;\n    }\n\n    removeSubtree() {\n        delete this.parent.children[this.parentKey];\n    }\n\n    getFirstTaskIn() {\n        if (Object.keys(this.children).length > 0)\n            return this.children[Object.keys(this.children)[0]].getFirstTaskIn();\n        else\n            return null;\n    }\n\n    getAllContainedTasks() {\n        let tasks = [];\n        for (let child of Object.values(this.children)) {\n            tasks = tasks.concat(child.getAllContainedTasks());\n        }\n        return tasks;\n    }\n}\n\nclass RootNode extends Node {\n\n}\n\nclass PresetNode extends Node {\n    constructor(preset) {\n        super();\n        this.preset = preset;\n    }\n}\n\n\nclass CodeVersionNode extends Node {\n    constructor(preset) {\n        super();\n    }\n}\n\nclass TasksNode extends Node {\n    getFirstTaskIn() {\n        if (Object.keys(this.children).length > 0)\n            return this.children[\"0\"];\n        else\n            return null;\n    }\n\n    getAllContainedTasks() {\n        return Object.values(this.children);\n    }\n}\n\nclass View {\n    constructor(includeCodeVersion) {\n        this.root = new RootNode();\n        this.root.setChild(\"default\", new TasksNode());\n        this.taskByUuid = {};\n        this.tasks = {};\n        this.presets = [];\n        this.presetsByUuid = {};\n        this.includeCodeVersion = includeCodeVersion;\n    }\n\n    presetCompare(a, b) {\n        if (a.sorting !== b.sorting)\n            return a.sorting - b.sorting;\n        else\n            return a.uuid.localeCompare(b.uuid);\n    }\n\n    updatePresets(presets) {\n        for (let preset of presets) {\n            this.presetsByUuid[preset.uuid] = preset;\n        }\n\n        let sortedPresets = presets.slice().sort((a, b) => this.presetCompare(a, b));\n\n        for (let i = 0; i < this.presets.length; i++) {\n            if (sortedPresets.findIndex(x => x.uuid === this.presets[i].uuid) === - 1) {\n                this.removePreset(this.presets[i]);\n                i--;\n            }\n        }\n\n        for (let i = 0; i < sortedPresets.length; i++) {\n            if (i >= this.presets.length) {\n                this.addPreset(sortedPresets[i], i);\n                continue;\n            }\n\n            if (this.presets[i].uuid !== sortedPresets[i].uuid) {\n                if (this.presets.findIndex(x => x.uuid === sortedPresets[i].uuid) !== -1) {\n                    const preset = this.presets.find(x => x.uuid === sortedPresets[i].uuid);\n                    this.removePreset(preset);\n                }\n                this.addPreset(sortedPresets[i], i);\n\n                if (this.presets[i].uuid !== sortedPresets[i].uuid)\n                    throw new Error(\"Error with the presets in the view\");\n            } else {\n                this.presets[i] = sortedPresets[i];\n            }\n        }\n    }\n\n    addPreset(preset, insert_index) {\n        this.presets.splice(insert_index, 0, preset);\n        this.addNodeWithPreset(preset, this.root.children[\"default\"]);\n    }\n\n    addNodeWithPreset(preset, root) {\n        if ((root instanceof PresetNode && this.presetCompare(this.presetsByUuid[root.preset], preset) > 0) || root instanceof TasksNode) {\n            const firstTask = root.getFirstTaskIn();\n            if (firstTask !== null) {\n                const formerChoiceKey = this.getChoiceKeyToPreset(this.tasks[firstTask], preset);\n\n                const tasks = root.getAllContainedTasks();\n                let tasksWithDifferentChoice = [];\n                for (let task of tasks) {\n                    if (this.getChoiceKeyToPreset(this.tasks[task], preset) !== formerChoiceKey)\n                        tasksWithDifferentChoice.push(task);\n                }\n\n                if (tasksWithDifferentChoice.length > 0) {\n                    let newNode = new PresetNode(preset.uuid);\n                    this.addPresetBeforeNode(root, newNode, formerChoiceKey);\n\n                    for (let task of tasksWithDifferentChoice) {\n                        this.removeTask(this.tasks[task]);\n                        this.addTask(this.tasks[task]);\n                    }\n                }\n            }\n        } else {\n            for (let key in root.children)\n                this.addNodeWithPreset(preset, root.children[key]);\n        }\n    }\n\n    removePreset(preset) {\n        if (this.presets.includes(preset)) {\n            this.presets.splice(this.presets.indexOf(preset), 1);\n            this.removeNodesWithPreset(preset, this.root.children[\"default\"]);\n        }\n    }\n\n    removeNodesWithPreset(preset, root) {\n        if (root instanceof PresetNode && root.preset === preset.uuid) {\n            let tasks = [];\n            for (let key of Object.keys(root.children).slice(1)) {\n                tasks = tasks.concat(this.removeSubtree(root.children[key]))\n            }\n\n            root.remove();\n            for (let task of tasks)\n                this.addTask(this.tasks[task]);\n        } else if (!(root instanceof TasksNode)) {\n            for (let key in root.children)\n                this.removeNodesWithPreset(preset, root.children[key]);\n        }\n    }\n\n    removeSubtree(root) {\n        const tasks = root.getAllContainedTasks();\n        for (let task of tasks) {\n            delete this.taskByUuid[task.uuid];\n        }\n\n        root.removeSubtree();\n        return tasks;\n    }\n\n    updateTasks(tasks) {\n        this.tasks = tasks;\n    }\n\n    updateTask(task) {\n        this.tasks[task.uuid] = task;\n    }\n\n    addTasks(tasks) {\n        for (const task of tasks)\n            this.addTask(task);\n    }\n\n    addTask(task) {\n        this.tasks[task.uuid] = task;\n        let node = this.root.children[\"default\"];\n        let branching_options = [];\n        if (this.includeCodeVersion)\n            branching_options.push(\"code_version\");\n        branching_options = branching_options.concat(this.presets);\n\n        for (const branching_option of branching_options) {\n            let key, nodeExists, suitableChoice;\n            if (typeof branching_option === \"object\") {\n                if (branching_option.deprecated_choice === '')\n                    continue;\n\n                key = this.getChoiceKeyToPreset(task, branching_option);\n                nodeExists = node instanceof PresetNode && node.preset === branching_option.uuid;\n\n            } else if (branching_option === \"code_version\") {\n                key = task.version;\n                nodeExists = node instanceof CodeVersionNode\n            } else {\n                throw new Error(\"Invalid branching option\");\n            }\n\n            if (!nodeExists) {\n                const firstTask = node.getFirstTaskIn();\n                if (firstTask === null)\n                    continue;\n\n                let newNode, formerKey;\n                if (typeof branching_option === \"object\") {\n                    formerKey = this.getChoiceKeyToPreset(this.tasks[firstTask], branching_option);\n                    if (formerKey === key)\n                        continue;\n                    else {\n                        newNode = new PresetNode(branching_option.uuid);\n                    }\n                } else if (branching_option === \"code_version\") {\n                    if (this.tasks[firstTask].version === key)\n                        continue;\n                    else {\n                        newNode = new CodeVersionNode();\n                        formerKey = this.tasks[firstTask].version;\n                    }\n                } else {\n                    throw \"\";\n                }\n\n                node = this.addPresetBeforeNode(node, newNode, formerKey)\n            }\n\n            if (!(key in node.children)) {\n                node.setChild(key, new TasksNode())\n            }\n\n            node = node.children[key]\n        }\n\n        this.insertTask(node, task)\n    }\n\n    removeTask(task) {\n        let node = this.taskByUuid[task.uuid];\n        const key = parseInt(this.keyInDict(node.children, task.uuid));\n\n        delete node.children[key];\n        let i = key;\n        while (i + 1 in node.children) {\n            node.children[i] = node.children[i + 1];\n            delete node.children[i + 1];\n            i++;\n        }\n\n        delete this.taskByUuid[task.uuid];\n    }\n\n    keyInDict(dict, value) {\n        return Object.keys(dict).find(key => dict[key] === value);\n\n    }\n\n    checkNodeForRemoval(node) {\n        if (Object.keys(node.children).length === 0 && !(node.parent instanceof RootNode)) {\n            delete node.parent.children[node.parentKey];\n            this.checkNodeForRemoval(node.parent)\n        } else if (Object.keys(node.children).length === 1 && node.parent instanceof PresetNode) {\n            node.remove();\n        }\n    }\n\n    addPresetBeforeNode(node, newNode, formerKey) {\n        node.insertAsParent(formerKey, newNode);\n        return newNode;\n    }\n\n    getChoiceToPreset(task, preset) {\n        let suitableChoice = null;\n        let args = [];\n        for (const choice of task.choices) {\n            if (choice[0].preset === preset.uuid) {\n                suitableChoice = choice[0];\n                args = choice.slice(1);\n                break;\n            }\n        }\n\n        if (suitableChoice === null)\n            return [preset.deprecated_choice, args];\n        else\n            return [suitableChoice, args];\n    }\n\n    getChoiceKeyToPreset(task, preset) {\n        let choice = this.getChoiceToPreset(task, preset);\n        return this.getKeyToChoice(choice);\n    }\n\n    getKeyToChoice(choice) {\n        let key = choice[0].name;\n\n        for (let i = 0; i < choice[1].length; i++) {\n            key = key.replace(\"$T\" + (i) + \"$\", choice[1][i]);\n        }\n\n        return key\n    }\n\n    compTasks(firstTask, secondTask) {\n        return this.tasks[firstTask].creation_time < this.tasks[secondTask].creation_time;\n    }\n\n    insertTask(node, task) {\n        this.taskByUuid[task.uuid] = node;\n        const keys = Object.keys(node.children);\n\n        let targetKey = keys.length;\n        for (let i = 0; i < keys.length; i++) {\n            if (!this.compTasks(node.children[i], task.uuid)) {\n                targetKey = i;\n                break;\n            }\n        }\n\n        for (let i = keys.length - 1; i >= targetKey; i--) {\n            node.children[i + 1] = node.children[i];\n        }\n\n        node.children[targetKey] = task.uuid;\n    }\n\n    getNodeChoicePath(node, task) {\n        let choices = [];\n        while (!(node instanceof RootNode) && !(node.parent instanceof RootNode) && !(node instanceof CodeVersionNode) && !(node.parent instanceof CodeVersionNode)) {\n            choices.unshift([this.presetsByUuid[node.parent.preset], ...this.getChoiceToPreset(task, this.presetsByUuid[node.parent.preset])]);\n            node = node.parent;\n        }\n        return choices;\n    }\n\n    getSelectedTask(selectedChoices, codeVersion=null) {\n        let node = this.root.children[\"default\"];\n\n        if (node instanceof CodeVersionNode) {\n            if (!(codeVersion in node.children)) {\n                return [];\n            }\n            node = node.children[codeVersion]\n        }\n\n        for (const preset of this.presets) {\n            if (preset.deprecated_choice !== '') {\n                const suitableChoice = preset.choices.find((choice) => choice.uuid === selectedChoices[preset.uuid][0]);\n                const suitableKey = this.getKeyToChoice([suitableChoice, selectedChoices[preset.uuid].slice(1)]);\n\n                if (node instanceof TasksNode || node.preset !== preset.uuid) {\n                    const firstTask = node.getFirstTaskIn();\n                    if (firstTask === null)\n                        return [];\n\n                    const formerChoiceKey = this.getChoiceKeyToPreset(this.tasks[firstTask], preset);\n                    if (formerChoiceKey === suitableKey)\n                        continue;\n                    else\n                        return [];\n                }\n\n                if (!(suitableKey in node.children)) {\n                    return [];\n                }\n\n                node = node.children[suitableKey]\n            }\n        }\n\n        if (!(node instanceof TasksNode))\n            throw new Error(\"Error in selecting tasks\");\n\n        return Object.values(node.children);\n    }\n\n\n}\n\nexport default View;","module.exports = __webpack_public_path__ + \"static/media/Roboto-300-cyrillic-ext1.d69a2de8.woff2\";","module.exports = __webpack_public_path__ + \"static/media/Roboto-300-cyrillic2.a5383450.woff2\";","module.exports = __webpack_public_path__ + \"static/media/Roboto-300-greek-ext3.d4a587db.woff2\";","module.exports = __webpack_public_path__ + \"static/media/Roboto-300-greek4.f7059272.woff2\";","module.exports = __webpack_public_path__ + \"static/media/Roboto-300-latin-ext6.e83b8f97.woff2\";","module.exports = __webpack_public_path__ + \"static/media/Roboto-300-latin7.ef7c6637.woff2\";","module.exports = __webpack_public_path__ + \"static/media/Roboto-300-vietnamese5.484cddf4.woff2\";","module.exports = __webpack_public_path__ + \"static/media/Roboto-400-cyrillic-ext8.4743c758.woff2\";","module.exports = __webpack_public_path__ + \"static/media/Roboto-400-cyrillic9.8bb64952.woff2\";","module.exports = __webpack_public_path__ + \"static/media/Roboto-400-greek-ext10.182ee6a4.woff2\";","module.exports = __webpack_public_path__ + \"static/media/Roboto-400-greek11.c1e9793c.woff2\";","module.exports = __webpack_public_path__ + \"static/media/Roboto-400-latin-ext13.455200cb.woff2\";","module.exports = __webpack_public_path__ + \"static/media/Roboto-400-latin14.479970ff.woff2\";","module.exports = __webpack_public_path__ + \"static/media/Roboto-400-vietnamese12.a8be5b46.woff2\";","module.exports = __webpack_public_path__ + \"static/media/Roboto-500-cyrillic-ext15.378698af.woff2\";","module.exports = __webpack_public_path__ + \"static/media/Roboto-500-cyrillic16.7fd643e6.woff2\";","module.exports = __webpack_public_path__ + \"static/media/Roboto-500-greek-ext17.0f80978b.woff2\";","module.exports = __webpack_public_path__ + \"static/media/Roboto-500-greek18.665639f6.woff2\";","module.exports = __webpack_public_path__ + \"static/media/Roboto-500-latin-ext20.b1b80843.woff2\";","module.exports = __webpack_public_path__ + \"static/media/Roboto-500-latin21.020c97dc.woff2\";","module.exports = __webpack_public_path__ + \"static/media/Roboto-500-vietnamese19.16423fb4.woff2\";","module.exports = __webpack_public_path__ + \"static/media/Roboto-700-cyrillic-ext22.2522a38e.woff2\";","module.exports = __webpack_public_path__ + \"static/media/Roboto-700-cyrillic23.9d484aa9.woff2\";","module.exports = __webpack_public_path__ + \"static/media/Roboto-700-greek-ext24.029b92b9.woff2\";","module.exports = __webpack_public_path__ + \"static/media/Roboto-700-greek25.16d9701c.woff2\";","module.exports = __webpack_public_path__ + \"static/media/Roboto-700-latin-ext27.188b3976.woff2\";","module.exports = __webpack_public_path__ + \"static/media/Roboto-700-latin28.2735a3a6.woff2\";","module.exports = __webpack_public_path__ + \"static/media/Roboto-700-vietnamese26.d9600d97.woff2\";","var content = require(\"!!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-3-1!../../node_modules/postcss-loader/src/index.js??postcss!./fonts.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {}\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = require(\"!../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n\nif (module.hot) {\n  if (!content.locals) {\n    module.hot.accept(\n      \"!!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-3-1!../../node_modules/postcss-loader/src/index.js??postcss!./fonts.css\",\n      function () {\n        var newContent = require(\"!!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-3-1!../../node_modules/postcss-loader/src/index.js??postcss!./fonts.css\");\n\n        if (typeof newContent === 'string') {\n          newContent = [[module.id, newContent, '']];\n        }\n        \n        update(newContent);\n      }\n    )\n  }\n\n  module.hot.dispose(function() { \n    update();\n  });\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'\nrequire('./less/index.less');\nrequire('./fonts/fonts.css');\n\nReactDOM.render(\n    <App/>,\n    document.getElementById('root')\n);","var content = require(\"!!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-7-1!../../node_modules/postcss-loader/src/index.js??postcss!../../node_modules/less-loader/dist/cjs.js??ref--6-oneOf-7-3!./index.less\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {}\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = require(\"!../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n\nif (module.hot) {\n  if (!content.locals) {\n    module.hot.accept(\n      \"!!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-7-1!../../node_modules/postcss-loader/src/index.js??postcss!../../node_modules/less-loader/dist/cjs.js??ref--6-oneOf-7-3!./index.less\",\n      function () {\n        var newContent = require(\"!!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-7-1!../../node_modules/postcss-loader/src/index.js??postcss!../../node_modules/less-loader/dist/cjs.js??ref--6-oneOf-7-3!./index.less\");\n\n        if (typeof newContent === 'string') {\n          newContent = [[module.id, newContent, '']];\n        }\n        \n        update(newContent);\n      }\n    )\n  }\n\n  module.hot.dispose(function() { \n    update();\n  });\n}"],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClCA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAnDA;AACA;AAoDA;;;;;;;;;;;;;;;;;AClEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AA7CA;AACA;AA8CA;;;;;;;;;;;;;;;;;AClcA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAhNA;AACA;AAiNA;;;;;;;;;;;;;;;;;;ACrtKA;AACA;AAuKA;;;;;;;;;;;;;;;;;;AC5KA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AAEA;AACA;AAFA;AAOA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAEA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AA1FA;AACA;AA2FA;;;;;;;;;;;;;;;;;AChGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AA1CA;AACA;AA2CA;;;;;;;;;;;;;;;;;;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AA9GA;AACA;AAgHA;;;;;;;;;;;;;;;;;ACtnEA;AACA;AAoEA;;;;;;;;;;;;;;;;ACxEA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAtBA;AACA;AAuBA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AADA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AAAA;AAAA;AAAA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AAvEA;AACA;AAyEA;;;;;;;;;;;;ACpGA;AAAA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChzKA;AACA;AA0KA;;;;;;;;;;;;;;;;ACxNA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAnBA;AACA;AAoBA;;;;;;;;;;;;;;;;;;;;ACvlJA;AACA;AAmJA;;;;;;;;;;;;;;;;;;;;AC1JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAzHA;AACA;AA0HA;;;;;;;;;;;;;;;;;ACjIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAFA;AAcA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAvEA;AACA;AAwEA;;;;;;;;;;;;;;;;AC5EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAKA;AAEA;AACA;AAFA;AAcA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AA1IA;AACA;AA2IA;;;;;;;;;;;;;;;;;AC9IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AACA;AAhGA;AACA;AAiGA;;;;;;;;;;;;;;;;;ACrGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AACA;AAzCA;AACA;AA0CA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AArFA;AACA;AAuFA;;;;;;;;;;;;;;;;;;;ACtGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAzCA;AACA;AA0CA;;;;;;;;;;;;;;;;;;;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AADA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AA/RA;AACA;AAiSA;;;;;;;;;;;;;;;;;;;;ACxSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AArMA;AACA;AAuMA;;;;;;;;;;;;;;;;;AC9MA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAFA;AAahIA;AACA;AAiIA;;;;;;;;;;;;;;;;ACrIA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAIA;AAWA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AA5DA;AACA;AA6DA;;;;;;;;;;;;AChEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAGA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAxPA;AACA;AA0PA;;;;;;;;;;;;;;;;;;;AC/PA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AADA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AADA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AADA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAzGA;AACA;AA2GA;;;;;;;;;;;;;;;;;;;;;ACjHA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAhDA;AACA;AAkrLA;AACA;AAstFA;AACA;AAuFA;;;;;;;;;;;;;;;;;;;;;;;ACvWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AAEA;AAEA;AAEA;AACA;AAFA;AAcA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AADA;AAGA;AACA;AACA;AAEA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAnQA;AACA;AAoQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7QA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AARA;AACA;AASA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAnEA;AACA;AAqEA;;;;;;;;;;;;;;;;;ACpFA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAhBA;AACA;AAiBA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AAdA;AACA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AAKA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AApCA;AACA;AAsCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAVA;AACA;AAYA;;;;;;;;;;;;;;;;;;;AC1FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AASA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAFA;AAapLA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AA9CA;AACA;AA+CA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AACA;AACA;AACA;AAJA;AACA;AAKA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAXA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AA5UA;AACA;AA+UA;;;;;;;;;;;AC/ZA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACpCA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;A","sourceRoot":""}