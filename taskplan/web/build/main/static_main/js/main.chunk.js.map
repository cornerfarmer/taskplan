{"version":3,"file":"static_main/js/main.chunk.js","sources":["/home/domin/Dokumente/taskplan/taskplan/web/src/less/index.less","/home/domin/Dokumente/taskplan/taskplan/web/src/fonts/fonts.css","/home/domin/Dokumente/taskplan/taskplan/web/src/App.js","/home/domin/Dokumente/taskplan/taskplan/web/src/CodeVersionViewer.js","/home/domin/Dokumente/taskplan/taskplan/web/src/CollapsedTasks.js","/home/domin/Dokumente/taskplan/taskplan/web/src/ConfigEditor.js","/home/domin/Dokumente/taskplan/taskplan/web/src/ControlBar.js","/home/domin/Dokumente/taskplan/taskplan/web/src/Device.js","/home/domin/Dokumente/taskplan/taskplan/web/src/FlashMessageManager.js","/home/domin/Dokumente/taskplan/taskplan/web/src/Global.js","/home/domin/Dokumente/taskplan/taskplan/web/src/GroupedTasks.js","/home/domin/Dokumente/taskplan/taskplan/web/src/JsonEditor.js","/home/domin/Dokumente/taskplan/taskplan/web/src/Param.js","/home/domin/Dokumente/taskplan/taskplan/web/src/ParamBatchEditor.js","/home/domin/Dokumente/taskplan/taskplan/web/src/ParamEditor.js","/home/domin/Dokumente/taskplan/taskplan/web/src/ParamFilter.js","/home/domin/Dokumente/taskplan/taskplan/web/src/ParamGroup.js","/home/domin/Dokumente/taskplan/taskplan/web/src/ParamSelection.js","/home/domin/Dokumente/taskplan/taskplan/web/src/ParamTab.js","/home/domin/Dokumente/taskplan/taskplan/web/src/ParamValue.js","/home/domin/Dokumente/taskplan/taskplan/web/src/ParamValueEditor.js","/home/domin/Dokumente/taskplan/taskplan/web/src/ParamViewer.js","/home/domin/Dokumente/taskplan/taskplan/web/src/PausedTask.js","/home/domin/Dokumente/taskplan/taskplan/web/src/Project.js","/home/domin/Dokumente/taskplan/taskplan/web/src/ProjectManager.js","/home/domin/Dokumente/taskplan/taskplan/web/src/Prompt.js","/home/domin/Dokumente/taskplan/taskplan/web/src/ReassuringPrompt.js","/home/domin/Dokumente/taskplan/taskplan/web/src/Repository.js","/home/domin/Dokumente/taskplan/taskplan/web/src/Scheduler.js","/home/domin/Dokumente/taskplan/taskplan/web/src/TagsEdit.js","/home/domin/Dokumente/taskplan/taskplan/web/src/Task.js","/home/domin/Dokumente/taskplan/taskplan/web/src/TaskContainer.js","/home/domin/Dokumente/taskplan/taskplan/web/src/TaskEditor.js","/home/domin/Dokumente/taskplan/taskplan/web/src/TaskTab.js","/home/domin/Dokumente/taskplan/taskplan/web/src/TaskViewer.js","/home/domin/Dokumente/taskplan/taskplan/web/src/fonts/Roboto-300-cyrillic-ext1.woff2","/home/domin/Dokumente/taskplan/taskplan/web/src/fonts/Roboto-300-cyrillic2.woff2","/home/domin/Dokumente/taskplan/taskplan/web/src/fonts/Roboto-300-greek-ext3.woff2","/home/domin/Dokumente/taskplan/taskplan/web/src/fonts/Roboto-300-greek4.woff2","/home/domin/Dokumente/taskplan/taskplan/web/src/fonts/Roboto-300-latin-ext6.woff2","/home/domin/Dokumente/taskplan/taskplan/web/src/fonts/Roboto-300-latin7.woff2","/home/domin/Dokumente/taskplan/taskplan/web/src/fonts/Roboto-300-vietnamese5.woff2","/home/domin/Dokumente/taskplan/taskplan/web/src/fonts/Roboto-400-cyrillic-ext8.woff2","/home/domin/Dokumente/taskplan/taskplan/web/src/fonts/Roboto-400-cyrillic9.woff2","/home/domin/Dokumente/taskplan/taskplan/web/src/fonts/Roboto-400-greek-ext10.woff2","/home/domin/Dokumente/taskplan/taskplan/web/src/fonts/Roboto-400-greek11.woff2","/home/domin/Dokumente/taskplan/taskplan/web/src/fonts/Roboto-400-latin-ext13.woff2","/home/domin/Dokumente/taskplan/taskplan/web/src/fonts/Roboto-400-latin14.woff2","/home/domin/Dokumente/taskplan/taskplan/web/src/fonts/Roboto-400-vietnamese12.woff2","/home/domin/Dokumente/taskplan/taskplan/web/src/fonts/Roboto-500-cyrillic-ext15.woff2","/home/domin/Dokumente/taskplan/taskplan/web/src/fonts/Roboto-500-cyrillic16.woff2","/home/domin/Dokumente/taskplan/taskplan/web/src/fonts/Roboto-500-greek-ext17.woff2","/home/domin/Dokumente/taskplan/taskplan/web/src/fonts/Roboto-500-greek18.woff2","/home/domin/Dokumente/taskplan/taskplan/web/src/fonts/Roboto-500-latin-ext20.woff2","/home/domin/Dokumente/taskplan/taskplan/web/src/fonts/Roboto-500-latin21.woff2","/home/domin/Dokumente/taskplan/taskplan/web/src/fonts/Roboto-500-vietnamese19.woff2","/home/domin/Dokumente/taskplan/taskplan/web/src/fonts/Roboto-700-cyrillic-ext22.woff2","/home/domin/Dokumente/taskplan/taskplan/web/src/fonts/Roboto-700-cyrillic23.woff2","/home/domin/Dokumente/taskplan/taskplan/web/src/fonts/Roboto-700-greek-ext24.woff2","/home/domin/Dokumente/taskplan/taskplan/web/src/fonts/Roboto-700-greek25.woff2","/home/domin/Dokumente/taskplan/taskplan/web/src/fonts/Roboto-700-latin-ext27.woff2","/home/domin/Dokumente/taskplan/taskplan/web/src/fonts/Roboto-700-latin28.woff2","/home/domin/Dokumente/taskplan/taskplan/web/src/fonts/Roboto-700-vietnamese26.woff2","webpack:///./src/fonts/fonts.css?65f1","/home/domin/Dokumente/taskplan/taskplan/web/src/index.js","webpack:///./src/less/index.less?4a5c"],"sourcesContent":["exports = module.exports = require(\"../../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \"body {\\n  font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\\n  color: #757575;\\n  line-height: 1.15;\\n  background: #FAFAFA;\\n}\\nhtml,\\nbody,\\n#root,\\n#root > #page,\\n#root > #page > .container > .row,\\n#root > #page > .container > .row > div,\\n#root > #page > .container > .row > div > #scheduler {\\n  height: 100%;\\n}\\n#root > #page > .container {\\n  height: calc(100% - 39px);\\n  max-width: none;\\n}\\n#root > #page > .container > .row > div:first-child {\\n  padding-right: 0;\\n}\\n#root > .container > .row > div:last-child {\\n  padding-left: 0;\\n}\\nh1 {\\n  font-size: 80px;\\n  font-weight: 300;\\n  line-height: 1;\\n  margin-bottom: 40px;\\n}\\nh2 {\\n  font-size: 30px;\\n  font-weight: 400;\\n  line-height: 40px;\\n  margin-bottom: 15px;\\n}\\n.buttons {\\n  display: flex;\\n}\\n.buttons div {\\n  background: rgba(158, 158, 158, 0.2);\\n  padding: 6px 10px;\\n  border-radius: 2px;\\n  cursor: pointer;\\n  text-transform: uppercase;\\n  font-size: 14px;\\n}\\n.buttons div:first-child {\\n  background: #3f51b5;\\n  color: white;\\n  margin-right: 10px;\\n}\\n.buttons div:last-child {\\n  margin-right: 0;\\n}\\nlabel {\\n  margin-bottom: 0;\\n}\\n.separator {\\n  margin: 0 5px;\\n}\\n#scheduler {\\n  padding: 16px 0 16px 0;\\n  overflow-y: auto;\\n  margin: 0 auto;\\n  display: flex;\\n  flex-direction: row;\\n  flex-wrap: wrap;\\n  align-items: flex-start;\\n  align-content: flex-start;\\n  justify-content: center;\\n}\\n#scheduler #max-running-tasks {\\n  cursor: pointer;\\n}\\n#scheduler > .dropdown {\\n  width: 510px;\\n  margin-bottom: 10px;\\n}\\n#scheduler > .dropdown div.action {\\n  margin-bottom: 0;\\n}\\n#scheduler > .dropdown > .dropdown-menu {\\n  border-radius: 0px;\\n  transform: translate3d(0px, 24px, 0px) !important;\\n}\\n#scheduler > .dropdown > .dropdown-menu .dropdown-item {\\n  cursor: pointer;\\n}\\n#scheduler > .dropdown > .dropdown-menu .dropdown-item:active {\\n  background-color: #3f51b5;\\n}\\n.mock-device {\\n  width: 510px;\\n  height: 0;\\n}\\n.device {\\n  border: 1px solid rgba(0, 0, 0, 0.1);\\n  margin-bottom: 20px;\\n  width: 500px;\\n  margin-right: 10px;\\n}\\n.device > .header {\\n  background: rgba(0, 0, 0, 0.05);\\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: space-between;\\n  align-items: center;\\n  height: 40px;\\n  padding: 0 16px;\\n}\\n.device > .header > span {\\n  flex: 1 1;\\n}\\n.device > .header .action {\\n  margin-bottom: 0;\\n  margin-right: 16px;\\n}\\n.device > .header .hide-device {\\n  cursor: pointer;\\n}\\n.device .queue-header {\\n  display: flex;\\n  align-items: center;\\n}\\n.device .queue-header .action {\\n  box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 3px 1px -2px rgba(0, 0, 0, 0.2), 0 1px 5px 0 rgba(0, 0, 0, 0.12);\\n  width: 21px;\\n  height: 21px;\\n  align-items: center;\\n  justify-content: center;\\n  padding: 0;\\n  margin: 0;\\n  margin-right: 8px;\\n}\\n.device .body {\\n  padding: 16px;\\n}\\n.device .tasks {\\n  padding: 0;\\n  margin-bottom: 10px;\\n}\\n.device .tasks.tasks-queued {\\n  margin: 0;\\n}\\n.device .tasks.tasks-queued .task {\\n  margin-top: 10px;\\n}\\n.device .tasks .mock-task {\\n  background: white;\\n  border: 2px dashed rgba(0, 0, 0, 0.1);\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n  font-weight: 300;\\n  font-size: 20px;\\n  color: rgba(0, 0, 0, 0.4);\\n  height: 132px;\\n}\\n.device .tasks .task {\\n  list-style: none;\\n  box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 3px 1px -2px rgba(0, 0, 0, 0.2), 0 1px 5px 0 rgba(0, 0, 0, 0.12);\\n  background: white;\\n}\\n.device .tasks .task .content {\\n  padding: 16px;\\n  padding-bottom: 12px;\\n  border: 1px solid rgba(0, 0, 0, 0.1);\\n  border-bottom: none;\\n}\\n.device .tasks .task .header {\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: space-between;\\n  align-items: flex-start;\\n}\\n.device .tasks .task .header .status {\\n  text-align: right;\\n  line-height: 1;\\n}\\n.device .tasks .task .header .status .iterations {\\n  font-size: 12px;\\n  color: #AAA;\\n}\\n.tasks-queued.device .tasks .task .header {\\n  cursor: grab;\\n}\\n.device .tasks .task .header .project-name {\\n  font-weight: 300;\\n  font-size: 24px;\\n  margin-bottom: 10px;\\n}\\n.device .tasks .task .progress {\\n  background: #3f51b5;\\n  height: 2px;\\n  margin-bottom: 10px;\\n  border-radius: 0;\\n  transition: width 400ms ease-in-out;\\n}\\n.device .tasks .task .param-name {\\n  font-size: 14px;\\n  cursor: pointer;\\n}\\n.device .tasks .task .try-number {\\n  background: rgba(158, 158, 158, 0.2);\\n  padding: 1px 7px 2px 7px;\\n  margin-right: 7px;\\n  display: inline-block;\\n  line-height: 1;\\n  vertical-align: top;\\n}\\n.device .tasks .task .toolbar {\\n  background: rgba(158, 158, 158, 0.2);\\n  padding: 5px 16px 1px 16px;\\n  line-height: 1;\\n  border: 1px solid rgba(0, 0, 0, 0.1);\\n}\\n.device .tasks .task .toolbar > span {\\n  display: flex;\\n  align-items: center;\\n}\\n#scheduler > .dropdown .action,\\n.device .action,\\n.device .tasks .task .toolbar .action {\\n  background: #3f51b5;\\n  padding: 0 10px;\\n  text-transform: uppercase;\\n  display: inline-flex;\\n  align-items: center;\\n  color: white;\\n  border-radius: 2px;\\n  font-weight: 500;\\n  /* box-shadow: 0 2px 2px 0 rgba(0,0,0,.14),0 3px 1px -2px rgba(0,0,0,.2),0 1px 5px 0 rgba(0,0,0,.12);*/\\n  height: 24px;\\n  font-size: 13px;\\n  cursor: pointer;\\n  margin-right: 5px;\\n  margin-bottom: 4px;\\n}\\n.device .tasks .task .toolbar .action i {\\n  margin-right: 7px;\\n}\\n.device .tasks .task .toolbar .action span {\\n  margin-top: 2px;\\n}\\n.device .tasks .task .toolbar .dropdown {\\n  display: inline-flex;\\n  margin-bottom: 4px;\\n}\\n.device .tasks .task .toolbar .action.dropdown-toggle i {\\n  margin: 0;\\n}\\n.device .tasks .task .toolbar .current-action {\\n  flex: 2 1;\\n  text-align: right;\\n  font-size: 12px;\\n}\\n.device .tasks .task.on-drag-over {\\n  border: 3px dashed #3f51b5;\\n  box-shadow: none;\\n}\\n.device .tasks .task.on-drag-over .content,\\n.device .tasks .task.on-drag-over .toolbar {\\n  visibility: hidden;\\n}\\n#root div.jsoneditor-tree div.jsoneditor-tree-inner {\\n  padding-bottom: 100px;\\n}\\n.jsoneditor .inherited-value .jsoneditor-field,\\n.jsoneditor .inherited-value .jsoneditor-value {\\n  color: #888888;\\n}\\n.jsoneditor table.jsoneditor-values.inherited-value td .revert {\\n  display: none;\\n}\\n.jsoneditor table.jsoneditor-values:not(.inherited-value) td .revert {\\n  width: 24px;\\n  height: 24px;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  font-size: 16px;\\n  color: #3f51b5;\\n  cursor: pointer;\\n}\\n.jsoneditor table.jsoneditor-values.new-value td .revert i:before {\\n  content: \\\"\\\\f00d\\\";\\n}\\n#project-manager {\\n  border: 1px solid rgba(0, 0, 0, 0.1);\\n  border-top: 0;\\n  border-bottom: 0;\\n  height: 100%;\\n  position: relative;\\n  display: flex;\\n  flex-direction: column;\\n}\\n#project-manager #projects-toolbar {\\n  display: flex;\\n  padding: 5px 16px;\\n  background: #e8e8e8;\\n  justify-content: space-between;\\n  z-index: 10;\\n}\\n#project-manager #projects-toolbar #project-selector span {\\n  margin-right: 20px;\\n}\\n#project-manager #projects-toolbar #project-selector span i {\\n  color: #BBB;\\n}\\n#project-manager #projects-toolbar #project-selector span.active i {\\n  color: inherit;\\n  cursor: pointer;\\n}\\n#project-manager #projects-toolbar #project-toolbar {\\n  display: flex;\\n  flex-direction: row;\\n}\\n#project-manager #projects-toolbar #project-toolbar #code-version {\\n  padding: 0 10px;\\n  border-radius: 2px;\\n  font-weight: 500;\\n  margin-right: 10px;\\n  color: #757575;\\n  background: #f2f2f2;\\n  display: flex;\\n  align-items: stretch;\\n  border: 1px solid rgba(0, 0, 0, 0.1);\\n  cursor: pointer;\\n}\\n#project-manager #projects-toolbar #project-toolbar #reload-tasks {\\n  cursor: pointer;\\n  margin-right: 10px;\\n}\\n#project-manager #projects-toolbar #project-toolbar a {\\n  color: #757575;\\n}\\n#project-manager #projects {\\n  overflow-y: hidden;\\n  flex: 1 1 auto;\\n  height: 100px;\\n  background: #FAFAFA;\\n  z-index: 10;\\n}\\n#project-manager #projects .project {\\n  height: 100%;\\n  display: flex;\\n  flex-direction: column;\\n}\\n#project-manager #projects .project .search-bar {\\n  padding: 5px 16px;\\n  display: flex;\\n  align-items: center;\\n}\\n#project-manager #projects .project .search-bar span {\\n  margin-right: 10px;\\n}\\n#project-manager #projects .project .tabs {\\n  display: flex;\\n  border: 1px solid rgba(0, 0, 0, 0.1);\\n  border-right: none;\\n  border-left: none;\\n  background: white;\\n  flex: 0 0 auto;\\n}\\n#project-manager #projects .project .tabs div {\\n  padding: 16px;\\n  border-right: 1px solid rgba(0, 0, 0, 0.1);\\n  flex: 2 1;\\n  text-align: center;\\n  font-weight: 300;\\n  font-size: 24px;\\n  background: rgba(0, 0, 0, 0.05);\\n  cursor: pointer;\\n}\\n#project-manager #projects .project .tabs div:hover {\\n  background: rgba(0, 0, 0, 0.025);\\n}\\n#project-manager #projects .project .tabs div.tab-active,\\n#project-manager #projects .project .tabs div.tab-active:hover {\\n  background: white;\\n}\\n#project-manager #projects .project .tabs div:last-child {\\n  border: none;\\n}\\n#project-manager #projects .project .sorting {\\n  padding: 5px 16px;\\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\\n}\\n#project-manager #projects .project .sorting > div > * {\\n  margin-right: 10px;\\n}\\n#project-manager #projects .project .sorting > div > .fa,\\n#project-manager #projects .project .sorting > div > .fas {\\n  cursor: pointer;\\n}\\n#project-manager #projects .project .sorting .filter-enabled {\\n  color: #3f51b5;\\n}\\n#project-manager #projects .project > .param-filter {\\n  border: none;\\n}\\n#project-manager #projects .project .tab {\\n  flex: 1 1 auto;\\n  display: flex;\\n  flex-direction: column;\\n  min-height: 0;\\n}\\n#project-manager #projects .project .params-tab,\\n#project-manager #projects .project .tasks-tab {\\n  overflow-y: auto;\\n  flex: 1 1 auto;\\n  position: relative;\\n}\\n#project-manager #projects .project .tasks-tab .collapse-toggle {\\n  display: flex;\\n  justify-content: center;\\n  padding: 5px;\\n  background: #e5e5e5;\\n  font-weight: 300;\\n  cursor: pointer;\\n}\\n#project-manager #projects .project .tasks-tab .param-group > .group-header {\\n  padding: 10px;\\n  background: #f2f2f2;\\n  border: 1px solid #d9d9d9;\\n  border-left: 0;\\n  cursor: pointer;\\n  border-right: 0;\\n}\\n#project-manager #projects .project .tasks-tab .param-group > .group-header .title {\\n  display: flex;\\n  align-items: end;\\n}\\n#project-manager #projects .project .tasks-tab .param-group > .group-header .title i {\\n  margin-right: 5px;\\n  font-size: 20px;\\n}\\n#project-manager #projects .project .tasks-tab .param-group .group-tasks {\\n  padding-left: 10px;\\n  background: #d9d9d9;\\n}\\n#project-manager #projects .project ul {\\n  padding: 0;\\n  margin-bottom: 0;\\n}\\n#project-manager #projects .project ul .item {\\n  list-style: none;\\n}\\n#project-manager #projects .project ul .item-param[draggable=\\\"true\\\"] .header {\\n  cursor: grab;\\n}\\n#project-manager #projects .project ul .item-param.on-drag-over {\\n  border: 3px dashed #3f51b5;\\n  box-shadow: none;\\n}\\n#project-manager #projects .project ul .item-param.on-drag-over .header {\\n  visibility: hidden;\\n}\\n#project-manager #projects .project ul .item-param .grip-icon {\\n  width: 28px;\\n  height: 28px;\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n}\\n#project-manager #projects .project ul .item-param .group-header,\\n#project-manager #projects .project ul .item-param .header {\\n  cursor: pointer;\\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: space-between;\\n  align-items: center;\\n}\\n#project-manager #projects .project ul .item-param .group-header {\\n  background: white;\\n  font-weight: 300;\\n  justify-content: center;\\n  font-size: 24px;\\n  padding: 0 0 0 16px;\\n  text-transform: uppercase;\\n}\\n#project-manager #projects .project ul .item-param .header {\\n  height: 40px;\\n  padding-left: 16px;\\n  padding-right: 10px;\\n  background: rgba(0, 0, 0, 0.05);\\n}\\n#project-manager #projects .project ul .item-param .header .title {\\n  font-weight: 300;\\n  font-size: 18px;\\n}\\n#project-manager #projects .project ul .item-param .header .toolbar {\\n  display: flex;\\n  align-items: center;\\n}\\n#project-manager #projects .project ul .item-task,\\n#project-manager #projects .project ul .item-param-value {\\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\\n  background: white;\\n  display: flex;\\n}\\n#project-manager #projects .project ul .item-task.item-task-collapsed {\\n  border-left: 10px solid #d9d9d9;\\n}\\n#project-manager #projects .project ul .item-task.task-running {\\n  background-image: repeating-linear-gradient(-45deg, #f4f5ff, #f4f5ff 11px, white 10px, white 20px);\\n  background-size: 28px 28px;\\n  animation: move 2s linear infinite;\\n}\\n@keyframes move {\\n  0% {\\n    background-position: 0 0;\\n  }\\n  100% {\\n    background-position: 28px 0;\\n  }\\n}\\n#project-manager #projects .project ul .item-task.task-queued:not(.item-highlight) {\\n  background-image: repeating-linear-gradient(-45deg, #f4f4f4, #f4f4f4 11px, white 10px, white 20px);\\n  background-size: 28px 28px;\\n}\\n#project-manager #projects .project ul .item-task.item-highlight {\\n  border-bottom: 1px solid #3f51b5;\\n  border-top: 1px solid #3f51b5;\\n}\\n@keyframes highlight {\\n  0% {\\n    background-color: #4f61f4;\\n  }\\n  100% {\\n    background-color: white;\\n  }\\n}\\n#project-manager #projects .project ul .item-param-value.item-abstract {\\n  font-style: italic;\\n}\\n#project-manager #projects .project ul .item-task.item-task-loading {\\n  height: 102px;\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n}\\n#project-manager #projects .project ul .item-task .content,\\n#project-manager #projects .project ul .item-param-value .content {\\n  flex: 1 1 auto;\\n  padding: 16px;\\n}\\n#project-manager #projects .project ul .item-task .content .title,\\n#project-manager #projects .project ul .item-param-value .content .title {\\n  font-weight: 300;\\n  font-size: 20px;\\n  margin-bottom: 10px;\\n}\\n#project-manager #projects .project ul .item-task .content .title .try-number,\\n#project-manager #projects .project ul .item-param-value .content .title .try-number {\\n  background: #ececec;\\n  padding: 4px 10px;\\n  margin-right: 10px;\\n  display: inline-block;\\n  line-height: 1;\\n  font-size: 18px;\\n  vertical-align: top;\\n}\\n#project-manager #projects .project ul .item-task .content .tags {\\n  display: flex;\\n  margin-top: 5px;\\n}\\n#project-manager #projects .project ul .item-task .content .tags div {\\n  margin-right: 5px;\\n  text-transform: uppercase;\\n  font-size: 12px;\\n  background: #3f51b5;\\n  display: inline-flex;\\n  align-items: center;\\n  color: white;\\n  border-radius: 2px;\\n  font-weight: 500;\\n  padding: 5px;\\n}\\n#project-manager #projects .project ul .item-task .content .footer,\\n#project-manager #projects .project ul .item-param-value .content .footer {\\n  font-size: 14px;\\n  font-weight: 300;\\n  border-top: 1px solid rgba(0, 0, 0, 0.1);\\n  padding-top: 10px;\\n  margin-top: 10px;\\n}\\n#project-manager #projects .project ul .item-task .content .footer .task-error {\\n  color: #ef767a;\\n  font-weight: 400;\\n}\\n#project-manager #projects .project ul .item-task .content .footer span:not(.task-error):before {\\n  content: \\\"-\\\";\\n  margin: 0 7px;\\n}\\n#project-manager #projects .project ul .item-task .content .footer span:first-child:before,\\n#project-manager #projects .project ul .item-param-value .content .footer span:first-child:before {\\n  content: \\\"\\\";\\n  margin: 0;\\n}\\n#project-manager #projects .project ul .item-task .content .footer span span,\\n#project-manager #projects .project ul .item-param-value .content .footer span span {\\n  font-weight: 400;\\n}\\n#project-manager #projects .project ul .item-task .toolbar,\\n#project-manager #projects .project ul .item-param-value .toolbar {\\n  border-left: 1px solid rgba(0, 0, 0, 0.1);\\n  padding: 10px;\\n  background: #f2f2f2;\\n  display: flex;\\n  flex-direction: column;\\n}\\n#project-manager #projects .project ul .item .toolbar .action {\\n  box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 3px 1px -2px rgba(0, 0, 0, 0.2), 0 1px 5px 0 rgba(0, 0, 0, 0.12);\\n  width: 28px;\\n  height: 28px;\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n  background: #3f51b5;\\n  border-radius: 2px;\\n  cursor: pointer;\\n  color: white;\\n  font-size: 12px;\\n}\\n#project-manager #projects .project ul .item .toolbar .action.action-disabled {\\n  cursor: not-allowed;\\n  background: gray;\\n}\\n#project-manager #projects .project ul .item-task .toolbar .action,\\n#project-manager #projects .project ul .item-param-value .toolbar .action {\\n  margin-bottom: 4px;\\n}\\n#project-manager #projects .project ul .item-param .header .toolbar .action {\\n  margin-left: 4px;\\n}\\n.tasks .task .toolbar .action.dropdown-toggle,\\n#project-manager #projects .project ul .item-task .toolbar .action.dropdown-toggle,\\n#project-manager #projects .project ul .item-param-value .toolbar .action.dropdown-toggle {\\n  margin: 0;\\n}\\n#project-manager #projects .project ul .item-task .toolbar .action.dropdown-toggle,\\n#project-manager #projects .project ul .item-param-value .toolbar .action.dropdown-toggle {\\n  height: 14px;\\n}\\n.tasks .task .toolbar .action.dropdown-toggle:after,\\n#project-manager #projects .project ul .item-task .toolbar .action.dropdown-toggle:after,\\n#project-manager #projects .project ul .item-param-value .toolbar .action.dropdown-toggle:after {\\n  display: none;\\n}\\n.tasks .task .toolbar .dropdown-menu,\\n#project-manager #projects .project ul .item-task .toolbar .dropdown-menu,\\n#project-manager #projects .project ul .item-param-value .toolbar .dropdown-menu {\\n  box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 3px 1px -2px rgba(0, 0, 0, 0.2), 0 1px 5px 0 rgba(0, 0, 0, 0.12);\\n  min-width: auto;\\n  padding: 7px;\\n  border: 1px solid #E3E3E3;\\n  border-radius: 0;\\n  margin-top: 5px;\\n}\\n.tasks .task .toolbar .dropdown-menu {\\n  left: -42px !important;\\n}\\n#project-manager #projects .project ul .item .toolbar .dropdown-menu {\\n  left: 4px !important;\\n}\\n.tasks .task .toolbar .dropdown-menu:after,\\n#project-manager #projects .project ul .item .toolbar .dropdown-menu:after {\\n  content: \\\" \\\";\\n  position: absolute;\\n  bottom: 100%;\\n  left: 50%;\\n  margin-left: -8px;\\n  border: 10px solid transparent;\\n  border-bottom-color: white;\\n}\\n.tasks .task .toolbar .dropdown-menu .action:last-child,\\n#project-manager #projects .project ul .item .toolbar .dropdown-menu .action:last-child {\\n  margin: 0;\\n}\\n#project-manager #projects .project .tab-toolbar {\\n  display: flex;\\n  padding: 5px 16px;\\n  background: rgba(158, 158, 158, 0.2);\\n  flex-direction: row;\\n  justify-content: space-between;\\n  flex: 0 0 auto;\\n}\\n#project-manager #projects .project .tab-toolbar label {\\n  margin-bottom: 0;\\n  display: flex;\\n  align-items: center;\\n}\\n#project-manager #projects .project .tab-toolbar label input {\\n  margin-right: 10px;\\n}\\n#project-manager #projects .project .tab-toolbar .buttons div:last-child {\\n  margin-right: 0;\\n}\\n.prompt-wrapper {\\n  position: fixed;\\n  left: 0;\\n  right: 0;\\n  top: 0;\\n  bottom: 0;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  background: rgba(0, 0, 0, 0.5);\\n  z-index: 100;\\n}\\n.prompt-wrapper .prompt {\\n  box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 3px 1px -2px rgba(0, 0, 0, 0.2), 0 1px 5px 0 rgba(0, 0, 0, 0.12);\\n  background: white;\\n  max-width: 300px;\\n  border-radius: 2px;\\n}\\n.prompt-wrapper .prompt.param-prompt {\\n  max-width: 600px;\\n  width: 600px;\\n}\\n.prompt-wrapper .prompt .prompt-header {\\n  background: #3f51b5;\\n  padding: 5px 16px;\\n  color: white;\\n}\\n.prompt-wrapper .prompt .prompt-text {\\n  font-size: 14px;\\n  padding: 16px;\\n  padding-bottom: 0;\\n}\\n.prompt-wrapper .prompt > input,\\n.prompt-wrapper .prompt > select {\\n  margin: 10px 16px 0 16px;\\n  text-align: right;\\n  width: calc(100% - 32px);\\n}\\n.prompt-wrapper .jsoneditor {\\n  width: calc(100% - 32px);\\n  margin: 10px 16px 16px 16px;\\n  height: 250px;\\n  border-color: #3f51b5;\\n}\\n.prompt-wrapper .jsoneditor div.jsoneditor-menu {\\n  background-color: #3f51b5;\\n  border-color: #3f51b5;\\n}\\n.editor .buttons,\\n.prompt-wrapper .prompt .buttons {\\n  display: flex;\\n  justify-content: flex-end;\\n  margin: 16px 16px 16px 16px;\\n}\\n.prompt-wrapper .prompt .param-filter .param-name {\\n  cursor: pointer;\\n}\\n.editor.task-editor {\\n  flex: 1 1;\\n}\\n.editor .header {\\n  padding: 5px 16px;\\n  background: rgba(158, 158, 158, 0.2);\\n}\\n.editor .field {\\n  margin: 10px 16px;\\n}\\n.editor .param-filter {\\n  margin: 30px 16px;\\n}\\n.editor .field {\\n  display: flex;\\n  align-items: center;\\n  justify-content: stretch;\\n}\\n.editor .field label {\\n  margin: 0;\\n  width: 150px;\\n}\\n.editor .field input,\\n.editor .field select {\\n  flex: 2 1;\\n  padding-left: 5px;\\n}\\n.editor .field input[type=\\\"checkbox\\\"] {\\n  flex: none;\\n}\\n.editor .jsoneditor {\\n  width: calc(100% - 32px);\\n  resize: vertical;\\n  margin: 16px;\\n  height: 250px;\\n  border-color: #3f51b5;\\n}\\n.editor .jsoneditor-readOnly .jsoneditor {\\n  border-color: rgba(158, 158, 158, 0.2);\\n  height: auto;\\n}\\n.editor .jsoneditor-readOnly .ace-jsoneditor .ace_marker-layer .ace_active-line,\\n.editor .jsoneditor-readOnly .ace-jsoneditor .ace_gutter-active-line {\\n  background-color: inherit;\\n}\\n.editor .jsoneditor-readOnly .ace-jsoneditor .ace_scroller {\\n  background-color: rgba(158, 158, 158, 0.1);\\n}\\n.editor .jsoneditor-readOnly .ace_cursor-layer {\\n  display: none;\\n}\\n.editor .editor-loading {\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n  height: 250px;\\n  border: 1px solid rgba(0, 0, 0, 0.1);\\n  margin: 16px;\\n}\\n.editor .jsoneditor div.jsoneditor-menu {\\n  background-color: #3f51b5;\\n  border-color: #3f51b5;\\n}\\n.task-editor .command {\\n  cursor: pointer;\\n}\\n.slide-editor {\\n  position: absolute;\\n  width: 400px;\\n  left: -400px;\\n  top: 0;\\n  border-left: 1px solid rgba(0, 0, 0, 0.1);\\n  border-right: 1px solid rgba(0, 0, 0, 0.1);\\n  background: #fafafa;\\n  height: 100%;\\n  animation: slide-in 0.4s ease;\\n  overflow-y: auto;\\n}\\n@keyframes slide-in {\\n  0% {\\n    transform: translateX(400px);\\n  }\\n  100% {\\n    transform: translateY(0);\\n  }\\n}\\n.slide-editor .header {\\n  display: flex;\\n  justify-content: space-between;\\n  align-items: center;\\n  cursor: pointer;\\n}\\n.slide-editor .header i {\\n  padding: 2px 10px;\\n  margin: -2px -10px;\\n}\\n.task-viewer .title,\\n.task-viewer .metadata,\\n.task-viewer h2,\\n.task-viewer .notes,\\n.task-viewer .params,\\n.task-viewer .checkpoints,\\n.task-viewer .code-versions,\\n.code-version-viewer .metadata {\\n  margin: 10px 16px;\\n}\\n.task-viewer .title {\\n  font-weight: 300;\\n  font-size: 20px;\\n}\\n.task-viewer .title .try-number {\\n  background: rgba(158, 158, 158, 0.2);\\n  padding: 4px 10px;\\n  margin-right: 10px;\\n  display: inline-block;\\n  line-height: 1;\\n  font-size: 18px;\\n  vertical-align: top;\\n}\\n.task-viewer .metadata,\\n.task-viewer .params {\\n  font-weight: 300;\\n}\\n.task-viewer .metadata div,\\n.task-viewer .params div {\\n  margin-bottom: 5px;\\n}\\n.task-viewer .metadata div:first-child {\\n  margin: 10px 0;\\n}\\n.task-viewer .metadata div span,\\n.task-viewer .params div span {\\n  font-weight: 400;\\n  display: inline-block;\\n  width: 150px;\\n}\\n.code-version-viewer .metadata {\\n  font-weight: 300;\\n}\\n.code-version-viewer .metadata div {\\n  margin-bottom: 10px;\\n}\\n.code-version-viewer .metadata div:first-child {\\n  margin: 10px 0;\\n}\\n.code-version-viewer .metadata div span {\\n  font-weight: 400;\\n  display: block;\\n  margin-bottom: 5px;\\n}\\n.code-version-viewer .buttons div:first-child {\\n  background: rgba(158, 158, 158, 0.2);\\n  color: inherit;\\n}\\n.task-viewer h2 {\\n  font-weight: 300;\\n  font-size: 24px;\\n}\\n.task-viewer .checkpoints {\\n  max-height: 300px;\\n  overflow: auto;\\n}\\n.task-viewer .checkpoints > div {\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: space-between;\\n  background: white;\\n  border: 1px solid rgba(0, 0, 0, 0.1);\\n  margin-bottom: 5px;\\n  align-items: center;\\n}\\n.task-viewer .checkpoints > div .iteration {\\n  background: rgba(158, 158, 158, 0.2);\\n}\\n.task-viewer .checkpoints > div .action {\\n  background: #3f51b5;\\n  cursor: pointer;\\n  color: white;\\n}\\n.task-viewer .checkpoints > div .iteration,\\n.task-viewer .checkpoints > div .action {\\n  width: 28px;\\n  height: 28px;\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n}\\n.task-viewer .checkpoints > div .time {\\n  font-weight: 300;\\n}\\n.task-viewer .code-versions {\\n  max-height: 300px;\\n  overflow: auto;\\n}\\n.task-viewer .code-versions > div {\\n  display: flex;\\n  flex-direction: row;\\n  background: white;\\n  border: 1px solid rgba(0, 0, 0, 0.1);\\n  margin-bottom: 5px;\\n  align-items: center;\\n  cursor: pointer;\\n}\\n.task-viewer .code-versions > div .iteration {\\n  background: rgba(158, 158, 158, 0.2);\\n}\\n.task-viewer .code-versions > div .iteration {\\n  width: 28px;\\n  height: 28px;\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n}\\n.task-viewer .code-versions > div .name {\\n  font-weight: 300;\\n  margin-left: 10px;\\n}\\n.task-viewer textarea {\\n  min-height: 150px;\\n  width: 100%;\\n}\\n.task-viewer .tags-edit {\\n  margin-bottom: 15px;\\n}\\n.task-viewer .tags-edit > div {\\n  margin: 0 16px;\\n}\\n.code-version-viewer {\\n  display: flex;\\n  flex-direction: column;\\n}\\n.code-version-viewer .code-versions {\\n  overflow: auto;\\n}\\n.code-version-viewer .code-versions .code-version-row {\\n  display: flex;\\n  flex-direction: row;\\n  align-items: center;\\n  justify-content: center;\\n}\\n.code-version-viewer .code-versions .code-version-row .code-version-branch-arrow {\\n  width: 30px;\\n  height: 30px;\\n  cursor: pointer;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n}\\n.code-version-viewer .code-versions .code-version {\\n  background: rgba(158, 158, 158, 0.1);\\n  margin: 5px 0;\\n  max-width: 300px;\\n  border-radius: 5px;\\n  cursor: pointer;\\n  border: 1px solid rgba(0, 0, 0, 0.1);\\n  flex: 1 1 auto;\\n}\\n.code-version-viewer .code-versions .code-version.current-code-version {\\n  background: #3f51b5;\\n  color: white;\\n}\\n.code-version-viewer .code-versions .code-version .name {\\n  background: rgba(0, 0, 0, 0.05);\\n  font-weight: 300;\\n  padding: 5px 16px;\\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\\n}\\n.code-version-viewer .code-versions .code-version .time {\\n  font-size: 12px;\\n  text-align: center;\\n  padding: 2px 0;\\n}\\n.code-version-viewer .code-versions .arrow {\\n  text-align: center;\\n  font-size: 20px;\\n}\\n.param-viewer label {\\n  display: flex;\\n  align-items: center;\\n  margin: 10px 16px;\\n}\\n.param-viewer label input {\\n  margin-right: 10px;\\n}\\n.param-viewer .param-filter {\\n  margin: 10px 16px;\\n  max-height: none;\\n}\\n#flash-messages {\\n  position: absolute;\\n  left: 0;\\n  top: 0;\\n  z-index: 10;\\n  display: flex;\\n  flex-direction: column;\\n  align-items: flex-start;\\n}\\n#flash-messages .flash-message {\\n  opacity: 1;\\n  background: #3f51b5;\\n  border-radius: 0 2px 2px 0;\\n  color: white;\\n  padding: 5px 10px;\\n  max-width: 400px;\\n  display: inline-block;\\n  height: 26px;\\n  margin-top: 10px;\\n  transition: margin 0.4s;\\n  white-space: nowrap;\\n  text-overflow: ellipsis;\\n  font-size: 14px;\\n  font-weight: 300;\\n}\\n#flash-messages .flash-message:hover {\\n  opacity: 1;\\n}\\n#flash-messages .flash-message.level-40 {\\n  background: #ef767a;\\n}\\n#flash-messages .flash-message.level-30 {\\n  background: #eeb868;\\n}\\n#controlbar {\\n  box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 3px 1px -2px rgba(0, 0, 0, 0.2), 0 1px 5px 0 rgba(0, 0, 0, 0.12);\\n  background: rgba(158, 158, 158, 0.4);\\n  color: white;\\n}\\n#controlbar > .container {\\n  display: flex;\\n  align-items: center;\\n  flex-direction: row;\\n}\\n#controlbar > .container #title {\\n  background: #3f51b5;\\n  font-size: 24px;\\n  padding: 7px 10px;\\n  font-weight: 400;\\n  border-top: 1px solid rgba(0, 0, 0, 0.1);\\n  margin: 0 50px 0 0;\\n}\\n#controlbar > .container .action {\\n  box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 3px 1px -2px rgba(0, 0, 0, 0.2), 0 1px 5px 0 rgba(0, 0, 0, 0.12);\\n  width: 30px;\\n  height: 30px;\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n  border-radius: 2px;\\n  cursor: pointer;\\n  font-size: 14px;\\n  background: #3f51b5;\\n  margin-right: 10px;\\n}\\n.param-filter {\\n  border: 1px solid rgba(158, 158, 158, 0.2);\\n  border-bottom: none;\\n  max-height: 350px;\\n  overflow: auto;\\n}\\n.param-filter .param-name {\\n  background: rgba(158, 158, 158, 0.05);\\n  padding: 5px 10px;\\n  display: flex;\\n  overflow: hidden;\\n  justify-content: space-between;\\n}\\n.param-filter .param-name.param-name-selected {\\n  background: #3f51b5;\\n  color: white;\\n}\\n.param-filter .param-name i {\\n  cursor: pointer;\\n}\\n.param-filter .param-name.param-name-collapsed {\\n  border-bottom: 1px solid rgba(158, 158, 158, 0.2);\\n}\\n.param-filter .param-name.param-name-expanded {\\n  justify-content: space-between;\\n}\\n.param-filter .param-name .param-value-hint,\\n.param-filter .param-name .all-button {\\n  border-radius: 2px;\\n  font-weight: 600;\\n  padding: 0 5px;\\n  background: #ececec;\\n}\\n.param-filter .param-name .param-value-hint {\\n  margin-left: 10px;\\n}\\n.param-filter .param-name .all-button {\\n  cursor: pointer;\\n}\\n.param-filter .param-name .all-button.all-button-activated {\\n  background: #3f51b5;\\n  color: white;\\n}\\n.param-filter .param-values {\\n  border-top: 1px solid rgba(158, 158, 158, 0.2);\\n  border-bottom: 1px solid rgba(158, 158, 158, 0.2);\\n  overflow-y: auto;\\n}\\n.param-filter .param-values .param-value {\\n  padding: 10px;\\n  white-space: nowrap;\\n}\\n.param-filter .param-values .param-value {\\n  background: white;\\n  cursor: pointer;\\n}\\n.param-filter .param-values .param-value-selected.param-value {\\n  background: #3f51b5;\\n  color: white;\\n}\\n.param-filter .param-values {\\n  display: flex;\\n}\\n.param-filter .param-values .param-value {\\n  border-right: 1px solid rgba(158, 158, 158, 0.2);\\n}\\n.param-filter .param-values .param-value.param-value-default {\\n  font-weight: 500;\\n}\\n.param-filter .param-values .param-value .task-numbers {\\n  margin-left: 10px;\\n  background: #ededed;\\n  border-radius: 2px;\\n  color: #1c1c1c;\\n  font-weight: 300;\\n  padding: 0 2px;\\n}\\n.param-filter .param-values .param-value input {\\n  padding: 0;\\n  border: 1px solid rgba(158, 158, 158, 0.2);\\n}\\n.param-filter .group-header {\\n  cursor: pointer;\\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\\n  display: flex;\\n  flex-direction: row;\\n  align-items: center;\\n  background: white;\\n  font-weight: 300;\\n  justify-content: center;\\n  font-size: 24px;\\n  padding: 0 0 0 16px;\\n  text-transform: uppercase;\\n}\\n.param-viewer > input {\\n  width: calc(100% - 32px);\\n  margin: 10px 16px;\\n  display: flex;\\n}\\n.param-viewer .table-cols {\\n  display: flex;\\n}\\n.param-viewer .table-cols .table-col {\\n  flex: 1 1;\\n  margin: 10px;\\n}\\n.param-viewer .table-cols .table-col .table-col-entry {\\n  background: white;\\n  border: 1px solid rgba(0, 0, 0, 0.1);\\n  margin: 5px 0;\\n  padding: 5px;\\n  display: flex;\\n  align-items: center;\\n  cursor: grab;\\n}\\n.param-viewer .table-cols .table-col .table-col-dummy {\\n  height: 30px;\\n  margin: 5px 0;\\n}\\n.param-viewer .table-cols .table-col .table-col-dummy.on-drag-over,\\n.param-viewer .table-cols .table-col .table-col-entry.on-drag-over {\\n  border: 3px dashed #3f51b5;\\n  box-shadow: none;\\n}\\n.param-viewer .table-cols .table-col .table-col-entry i {\\n  margin-left: 5px;\\n  cursor: pointer;\\n}\\n.param-viewer .table-cols .table-col .table-col-entry div {\\n  flex: 2 1;\\n}\\n.param-viewer .param-filter:empty {\\n  border: none;\\n}\\n#project-manager #projects .project .param-viewer .param-filter ul,\\n.param-viewer .param-filter ul {\\n  padding: 0;\\n  margin-bottom: 0;\\n}\\n#project-manager #projects .project .param-viewer .param-filter ul .item,\\n.param-viewer .param-filter ul .item {\\n  list-style: none;\\n}\\n#project-manager #projects .project .param-viewer .param-filter ul .item-param .header,\\n.param-viewer .param-filter ul .item-param .header {\\n  height: auto;\\n  padding: 5px 10px;\\n  background: rgba(158, 158, 158, 0.05);\\n  cursor: grab;\\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: space-between;\\n  align-items: center;\\n}\\n#project-manager #projects .project .param-viewer .param-filter ul .item-param.on-drag-over,\\n.param-viewer .param-filter ul .item-param.on-drag-over {\\n  border: 3px dashed #3f51b5;\\n  box-shadow: none;\\n}\\n#project-manager #projects .project .param-viewer .param-filter ul .item-param.on-drag-over .header,\\n.param-viewer .param-filter ul .item-param.on-drag-over .header {\\n  visibility: hidden;\\n}\\n#project-manager #projects .project .param-viewer .param-filter ul .item-param .header .title,\\n.param-viewer .param-filter ul .item-param .header .title {\\n  font-size: initial;\\n  font-weight: initial;\\n}\\n#project-manager #projects .project .param-viewer .param-filter ul .item-param .header .grip-icon,\\n.param-viewer .param-filter ul .item-param .header .grip-icon {\\n  height: auto;\\n  width: auto;\\n}\\n.param-viewer .param-filter #tb-link {\\n  background: #F57C00;\\n  color: white;\\n  border-radius: 2px;\\n  padding: 0 3px;\\n  font-weight: 500;\\n  cursor: pointer;\\n  display: flex;\\n  align-items: center;\\n  margin-right: 10px;\\n}\\n.tags-edit > div > .value {\\n  background: #3f51b5;\\n  display: inline-flex;\\n  align-items: center;\\n  color: white;\\n  border-radius: 2px;\\n  font-weight: 500;\\n  /* box-shadow: 0 2px 2px 0 rgba(0,0,0,.14),0 3px 1px -2px rgba(0,0,0,.2),0 1px 5px 0 rgba(0,0,0,.12);*/\\n  font-size: 14px;\\n  cursor: pointer;\\n  text-decoration: none;\\n  padding: 6px 10px;\\n  margin-right: 5px;\\n  margin-bottom: 5px;\\n}\\n.tags-edit > div > .value i {\\n  margin-left: 7px;\\n}\\n.tags-edit > div > .value span {\\n  /*margin-top: 2px;*/\\n}\\n.tags-edit {\\n  display: flex;\\n  align-items: center;\\n}\\n.tags-edit > label {\\n  margin: 0;\\n  width: 100px;\\n}\\n.tags-edit > div {\\n  border: 1px solid lightgray;\\n  background: white;\\n  flex: 1 1;\\n  display: flex;\\n  flex-wrap: wrap;\\n  padding: 5px 5px 0;\\n}\\n.tags-edit > div > div {\\n  flex: 1 1;\\n  min-width: 100px;\\n  margin-bottom: 5px;\\n}\\n.tags-edit > div > div > input {\\n  border: none;\\n  background: transparent;\\n  width: 100%;\\n  padding-top: 5px;\\n  padding-left: 10px;\\n}\\n.tags-edit > div > div > div > .autocomplete-hover {\\n  background: rgba(0, 0, 0, 0.05);\\n}\\n.tags-edit > div > div > div {\\n  overflow: auto;\\n  max-height: 300px;\\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.1);\\n  border: 1px solid rgba(0, 0, 0, 0.1);\\n  border-bottom: none;\\n  background: white;\\n  z-index: 100;\\n}\\n.tags-edit > div > div > div > div {\\n  padding: 5px 10px;\\n  cursor: pointer;\\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\\n}\\n\", \"\"]);\n\n","exports = module.exports = require(\"../../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Imports\nvar urlEscape = require(\"../../node_modules/css-loader/dist/runtime/url-escape.js\");\nvar ___CSS_LOADER_URL___0___ = urlEscape(require(\"./Roboto-300-cyrillic-ext1.woff2\"));\nvar ___CSS_LOADER_URL___1___ = urlEscape(require(\"./Roboto-300-cyrillic2.woff2\"));\nvar ___CSS_LOADER_URL___2___ = urlEscape(require(\"./Roboto-300-greek-ext3.woff2\"));\nvar ___CSS_LOADER_URL___3___ = urlEscape(require(\"./Roboto-300-greek4.woff2\"));\nvar ___CSS_LOADER_URL___4___ = urlEscape(require(\"./Roboto-300-vietnamese5.woff2\"));\nvar ___CSS_LOADER_URL___5___ = urlEscape(require(\"./Roboto-300-latin-ext6.woff2\"));\nvar ___CSS_LOADER_URL___6___ = urlEscape(require(\"./Roboto-300-latin7.woff2\"));\nvar ___CSS_LOADER_URL___7___ = urlEscape(require(\"./Roboto-400-cyrillic-ext8.woff2\"));\nvar ___CSS_LOADER_URL___8___ = urlEscape(require(\"./Roboto-400-cyrillic9.woff2\"));\nvar ___CSS_LOADER_URL___9___ = urlEscape(require(\"./Roboto-400-greek-ext10.woff2\"));\nvar ___CSS_LOADER_URL___10___ = urlEscape(require(\"./Roboto-400-greek11.woff2\"));\nvar ___CSS_LOADER_URL___11___ = urlEscape(require(\"./Roboto-400-vietnamese12.woff2\"));\nvar ___CSS_LOADER_URL___12___ = urlEscape(require(\"./Roboto-400-latin-ext13.woff2\"));\nvar ___CSS_LOADER_URL___13___ = urlEscape(require(\"./Roboto-400-latin14.woff2\"));\nvar ___CSS_LOADER_URL___14___ = urlEscape(require(\"./Roboto-500-cyrillic-ext15.woff2\"));\nvar ___CSS_LOADER_URL___15___ = urlEscape(require(\"./Roboto-500-cyrillic16.woff2\"));\nvar ___CSS_LOADER_URL___16___ = urlEscape(require(\"./Roboto-500-greek-ext17.woff2\"));\nvar ___CSS_LOADER_URL___17___ = urlEscape(require(\"./Roboto-500-greek18.woff2\"));\nvar ___CSS_LOADER_URL___18___ = urlEscape(require(\"./Roboto-500-vietnamese19.woff2\"));\nvar ___CSS_LOADER_URL___19___ = urlEscape(require(\"./Roboto-500-latin-ext20.woff2\"));\nvar ___CSS_LOADER_URL___20___ = urlEscape(require(\"./Roboto-500-latin21.woff2\"));\nvar ___CSS_LOADER_URL___21___ = urlEscape(require(\"./Roboto-700-cyrillic-ext22.woff2\"));\nvar ___CSS_LOADER_URL___22___ = urlEscape(require(\"./Roboto-700-cyrillic23.woff2\"));\nvar ___CSS_LOADER_URL___23___ = urlEscape(require(\"./Roboto-700-greek-ext24.woff2\"));\nvar ___CSS_LOADER_URL___24___ = urlEscape(require(\"./Roboto-700-greek25.woff2\"));\nvar ___CSS_LOADER_URL___25___ = urlEscape(require(\"./Roboto-700-vietnamese26.woff2\"));\nvar ___CSS_LOADER_URL___26___ = urlEscape(require(\"./Roboto-700-latin-ext27.woff2\"));\nvar ___CSS_LOADER_URL___27___ = urlEscape(require(\"./Roboto-700-latin28.woff2\"));\n\n// Module\nexports.push([module.id, \"/* cyrillic-ext */\\n@font-face {\\n  font-family: 'Roboto';\\n  font-style: normal;\\n  font-weight: 300;\\n  src: local('Roboto Light'), local('Roboto-Light'), url(\" + ___CSS_LOADER_URL___0___ + \") format('woff2');\\n  unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;\\n}\\n/* cyrillic */\\n@font-face {\\n  font-family: 'Roboto';\\n  font-style: normal;\\n  font-weight: 300;\\n  src: local('Roboto Light'), local('Roboto-Light'), url(\" + ___CSS_LOADER_URL___1___ + \") format('woff2');\\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\\n}\\n/* greek-ext */\\n@font-face {\\n  font-family: 'Roboto';\\n  font-style: normal;\\n  font-weight: 300;\\n  src: local('Roboto Light'), local('Roboto-Light'), url(\" + ___CSS_LOADER_URL___2___ + \") format('woff2');\\n  unicode-range: U+1F00-1FFF;\\n}\\n/* greek */\\n@font-face {\\n  font-family: 'Roboto';\\n  font-style: normal;\\n  font-weight: 300;\\n  src: local('Roboto Light'), local('Roboto-Light'), url(\" + ___CSS_LOADER_URL___3___ + \") format('woff2');\\n  unicode-range: U+0370-03FF;\\n}\\n/* vietnamese */\\n@font-face {\\n  font-family: 'Roboto';\\n  font-style: normal;\\n  font-weight: 300;\\n  src: local('Roboto Light'), local('Roboto-Light'), url(\" + ___CSS_LOADER_URL___4___ + \") format('woff2');\\n  unicode-range: U+0102-0103, U+0110-0111, U+1EA0-1EF9, U+20AB;\\n}\\n/* latin-ext */\\n@font-face {\\n  font-family: 'Roboto';\\n  font-style: normal;\\n  font-weight: 300;\\n  src: local('Roboto Light'), local('Roboto-Light'), url(\" + ___CSS_LOADER_URL___5___ + \") format('woff2');\\n  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\\n}\\n/* latin */\\n@font-face {\\n  font-family: 'Roboto';\\n  font-style: normal;\\n  font-weight: 300;\\n  src: local('Roboto Light'), local('Roboto-Light'), url(\" + ___CSS_LOADER_URL___6___ + \") format('woff2');\\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\\n}\\n/* cyrillic-ext */\\n@font-face {\\n  font-family: 'Roboto';\\n  font-style: normal;\\n  font-weight: 400;\\n  src: local('Roboto'), local('Roboto-Regular'), url(\" + ___CSS_LOADER_URL___7___ + \") format('woff2');\\n  unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;\\n}\\n/* cyrillic */\\n@font-face {\\n  font-family: 'Roboto';\\n  font-style: normal;\\n  font-weight: 400;\\n  src: local('Roboto'), local('Roboto-Regular'), url(\" + ___CSS_LOADER_URL___8___ + \") format('woff2');\\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\\n}\\n/* greek-ext */\\n@font-face {\\n  font-family: 'Roboto';\\n  font-style: normal;\\n  font-weight: 400;\\n  src: local('Roboto'), local('Roboto-Regular'), url(\" + ___CSS_LOADER_URL___9___ + \") format('woff2');\\n  unicode-range: U+1F00-1FFF;\\n}\\n/* greek */\\n@font-face {\\n  font-family: 'Roboto';\\n  font-style: normal;\\n  font-weight: 400;\\n  src: local('Roboto'), local('Roboto-Regular'), url(\" + ___CSS_LOADER_URL___10___ + \") format('woff2');\\n  unicode-range: U+0370-03FF;\\n}\\n/* vietnamese */\\n@font-face {\\n  font-family: 'Roboto';\\n  font-style: normal;\\n  font-weight: 400;\\n  src: local('Roboto'), local('Roboto-Regular'), url(\" + ___CSS_LOADER_URL___11___ + \") format('woff2');\\n  unicode-range: U+0102-0103, U+0110-0111, U+1EA0-1EF9, U+20AB;\\n}\\n/* latin-ext */\\n@font-face {\\n  font-family: 'Roboto';\\n  font-style: normal;\\n  font-weight: 400;\\n  src: local('Roboto'), local('Roboto-Regular'), url(\" + ___CSS_LOADER_URL___12___ + \") format('woff2');\\n  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\\n}\\n/* latin */\\n@font-face {\\n  font-family: 'Roboto';\\n  font-style: normal;\\n  font-weight: 400;\\n  src: local('Roboto'), local('Roboto-Regular'), url(\" + ___CSS_LOADER_URL___13___ + \") format('woff2');\\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\\n}\\n/* cyrillic-ext */\\n@font-face {\\n  font-family: 'Roboto';\\n  font-style: normal;\\n  font-weight: 500;\\n  src: local('Roboto Medium'), local('Roboto-Medium'), url(\" + ___CSS_LOADER_URL___14___ + \") format('woff2');\\n  unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;\\n}\\n/* cyrillic */\\n@font-face {\\n  font-family: 'Roboto';\\n  font-style: normal;\\n  font-weight: 500;\\n  src: local('Roboto Medium'), local('Roboto-Medium'), url(\" + ___CSS_LOADER_URL___15___ + \") format('woff2');\\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\\n}\\n/* greek-ext */\\n@font-face {\\n  font-family: 'Roboto';\\n  font-style: normal;\\n  font-weight: 500;\\n  src: local('Roboto Medium'), local('Roboto-Medium'), url(\" + ___CSS_LOADER_URL___16___ + \") format('woff2');\\n  unicode-range: U+1F00-1FFF;\\n}\\n/* greek */\\n@font-face {\\n  font-family: 'Roboto';\\n  font-style: normal;\\n  font-weight: 500;\\n  src: local('Roboto Medium'), local('Roboto-Medium'), url(\" + ___CSS_LOADER_URL___17___ + \") format('woff2');\\n  unicode-range: U+0370-03FF;\\n}\\n/* vietnamese */\\n@font-face {\\n  font-family: 'Roboto';\\n  font-style: normal;\\n  font-weight: 500;\\n  src: local('Roboto Medium'), local('Roboto-Medium'), url(\" + ___CSS_LOADER_URL___18___ + \") format('woff2');\\n  unicode-range: U+0102-0103, U+0110-0111, U+1EA0-1EF9, U+20AB;\\n}\\n/* latin-ext */\\n@font-face {\\n  font-family: 'Roboto';\\n  font-style: normal;\\n  font-weight: 500;\\n  src: local('Roboto Medium'), local('Roboto-Medium'), url(\" + ___CSS_LOADER_URL___19___ + \") format('woff2');\\n  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\\n}\\n/* latin */\\n@font-face {\\n  font-family: 'Roboto';\\n  font-style: normal;\\n  font-weight: 500;\\n  src: local('Roboto Medium'), local('Roboto-Medium'), url(\" + ___CSS_LOADER_URL___20___ + \") format('woff2');\\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\\n}\\n/* cyrillic-ext */\\n@font-face {\\n  font-family: 'Roboto';\\n  font-style: normal;\\n  font-weight: 700;\\n  src: local('Roboto Bold'), local('Roboto-Bold'), url(\" + ___CSS_LOADER_URL___21___ + \") format('woff2');\\n  unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;\\n}\\n/* cyrillic */\\n@font-face {\\n  font-family: 'Roboto';\\n  font-style: normal;\\n  font-weight: 700;\\n  src: local('Roboto Bold'), local('Roboto-Bold'), url(\" + ___CSS_LOADER_URL___22___ + \") format('woff2');\\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\\n}\\n/* greek-ext */\\n@font-face {\\n  font-family: 'Roboto';\\n  font-style: normal;\\n  font-weight: 700;\\n  src: local('Roboto Bold'), local('Roboto-Bold'), url(\" + ___CSS_LOADER_URL___23___ + \") format('woff2');\\n  unicode-range: U+1F00-1FFF;\\n}\\n/* greek */\\n@font-face {\\n  font-family: 'Roboto';\\n  font-style: normal;\\n  font-weight: 700;\\n  src: local('Roboto Bold'), local('Roboto-Bold'), url(\" + ___CSS_LOADER_URL___24___ + \") format('woff2');\\n  unicode-range: U+0370-03FF;\\n}\\n/* vietnamese */\\n@font-face {\\n  font-family: 'Roboto';\\n  font-style: normal;\\n  font-weight: 700;\\n  src: local('Roboto Bold'), local('Roboto-Bold'), url(\" + ___CSS_LOADER_URL___25___ + \") format('woff2');\\n  unicode-range: U+0102-0103, U+0110-0111, U+1EA0-1EF9, U+20AB;\\n}\\n/* latin-ext */\\n@font-face {\\n  font-family: 'Roboto';\\n  font-style: normal;\\n  font-weight: 700;\\n  src: local('Roboto Bold'), local('Roboto-Bold'), url(\" + ___CSS_LOADER_URL___26___ + \") format('woff2');\\n  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\\n}\\n/* latin */\\n@font-face {\\n  font-family: 'Roboto';\\n  font-style: normal;\\n  font-weight: 700;\\n  src: local('Roboto Bold'), local('Roboto-Bold'), url(\" + ___CSS_LOADER_URL___27___ + \") format('woff2');\\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\\n}\\n\", \"\"]);\n\n","import 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap/dist/js/bootstrap.js';\nimport \"@fortawesome/fontawesome-free/css/all.min.css\"\n\nimport React from 'react';\nimport Scheduler from './Scheduler'\nimport ProjectManager from \"./ProjectManager\";\nimport FlashMessageManager from \"./FlashMessageManager\"\nimport ControlBar from \"./ControlBar\";\nimport ReconnectingEventSource from \"reconnecting-eventsource\";\nimport Repository from \"./Repository\";\n\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            noConnection: true,\n            devices: []\n        };\n\n        this.evtSource = new ReconnectingEventSource(\"/update\", {});\n        this.repository = new Repository(this.evtSource);\n        this.projectManagerRef = React.createRef();\n\n        this.refreshConnectionState = this.refreshConnectionState.bind(this);\n\n        this.evtSource.onerror = this.refreshConnectionState;\n        this.evtSource.onopen = this.refreshConnectionState;\n\n        this.state.noConnection = (this.evtSource.readyState === 0);\n\n        this.evtSource.addEventListener(\"SCHEDULER_OPTIONS\", (e) => {\n            const options = JSON.parse(e.data);\n            this.setState({\n                devices: options.devices\n            });\n        });\n    }\n\n    refreshConnectionState() {        this.setState({\n            noConnection: this.evtSource.readyState === 0\n        });\n    }\n\n    render() {\n        return (\n            <div id=\"page\">\n                <FlashMessageManager evtSource={this.evtSource} noConnection={this.state.noConnection}/>\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-sm-8\">\n                            <Scheduler devices={this.state.devices} evtSource={this.evtSource} repository={this.repository} highlightTask={(task) => this.projectManagerRef.current.highlightTask(task)}/>\n                        </div>\n                        <div className=\"col-sm-4\">\n                            <ProjectManager devices={this.state.devices} evtSource={this.evtSource}  ref={this.projectManagerRef} repository={this.repository}/>\n                        </div>\n                    </div>\n                </div>\n                <ControlBar evtSource={this.evtSource}/>\n            </div>\n        );\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReassuringPrompt from \"./ReassuringPrompt\";\nclass CodeVersionViewer extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            commit_id: null,\n            open: false,\n            label: \"\",\n            data: null\n        };\n\n        this.open = this.open.bind(this);\n        this.close = this.close.bind(this);\n        this.onLabelChange = this.onLabelChange.bind(this);\n        this.onIdChange = this.onIdChange.bind(this);\n\n        this.reassuringHardResetPromptRef = React.createRef();\n        this.reassuringSoftResetPromptRef = React.createRef();\n    }\n\n    open(commit_id) {\n        this.setState({\n            commit_id: commit_id,\n            open: true,\n            data: null\n        }, () => this.load());\n    }\n\n    close() {\n        this.setState({\n            open: false\n        });\n    }\n\n    onLabelChange(event) {\n        this.setState({\n            label: event.target.value\n        }, () => this.updateLabel());\n    }\n\n    onIdChange(event) {\n        this.setState({\n            commit_id: event.target.value\n        }, this.state.commit_id !== event.target.value ? () => this.load() : null);\n    }\n\n    load() {\n        fetch(\"/fetch_code_version/\" + this.state.commit_id)\n        .then(res => res.json())\n        .then(\n            (result) => {\n                if (result !== null)\n                    result.date = new Date(result.date * 1000);\n                this.setState({\n                    data: result,\n                    label: result !== null ? result.label : null\n                });\n            },\n            (error) => {\n\n            }\n        );\n    }\n\n    updateLabel() {\n        fetch(\"/set_version_label/\" + this.state.commit_id + \"/\" + this.state.label)\n        .then(res => res.json())\n        .then(\n            (result) => {\n                this.props.updateView();\n            },\n            (error) => {\n\n            }\n        );\n    }\n\n\n    render() {\n        if (this.state.open) {\n            return (\n                <div className=\"code-version-viewer slide-editor editor\" >\n                    <div className=\"header\">Code version<i class=\"fas fa-times\" onClick={this.close}></i></div>\n                        <div className=\"metadata\">\n                             <div><input value={this.state.commit_id} onChange={this.onIdChange} required=\"required\" style={{\"width\": \"100%\"}} /></div>\n                        {this.state.data !== null &&\n                            <React.Fragment>\n                                <div><span>Message:</span> {this.state.data.message}</div>\n                                <div><span>Date:</span> {this.state.data.date.toShortStr()}</div>\n                                <div onClick={this.state.data.parent !== null ? () => this.open(this.state.data.parent) : null} style={this.state.data.parent !== null ? {\"cursor\": \"pointer\"} : {}}><span>Parent:</span> {this.state.data.parent === null ? \"-\" : this.state.data.parent}</div>\n                                <div><span>Label:</span>  <input placeholder={this.state.data.inherited_label} value={this.state.label} onChange={this.onLabelChange} /></div>\n                            </React.Fragment>\n                        }\n                        </div>\n\n                    <div className=\"buttons\">\n                        <div onClick={() => this.reassuringHardResetPromptRef.current.openDialog()}>Hard reset</div>\n                        <div onClick={() => this.reassuringSoftResetPromptRef.current.openDialog()}>Soft reset</div>\n                    </div>\n\n                    <ReassuringPrompt ref={this.reassuringHardResetPromptRef} header=\"Really want to do a hard reset?\" text=\"Do you really want to remove this parameter value?\" url={\"/hard_reset/\" + this.state.commit_id}/>\n                    <ReassuringPrompt ref={this.reassuringSoftResetPromptRef} header=\"Really want to do a soft reset?\" text=\"Do you really want to remove this parameter value?\" url={\"/soft_reset/\" + this.state.commit_id}/>\n                </div>\n            );\n        } else {\n            return \"\";\n        }\n    }\n}\n\nexport default CodeVersionViewer;","import React from 'react';\nimport PausedTask from \"./PausedTask\";\nimport LazyLoad from 'react-lazyload';\n\nclass CollapsedTasks extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            collapsed: true\n        };\n\n        this.toggleCollapsed = this.toggleCollapsed.bind(this);\n    }\n\n    toggleCollapsed() {\n        this.setState({\n            collapsed: !this.state.collapsed\n        })\n    }\n\n    render() {\n        let tasks = Object.values(this.props.tasks);//.filter(task => task.task !== null);\n        if (tasks.length > 0) {\n            return (\n                <div>\n                    <LazyLoad key={tasks[0].uuid} height={102} offset={[0, 0]} scrollContainer=\".project\" resize={true} overflow={true}>\n                        <PausedTask\n                            uuid={tasks[0].uuid}\n                            rerunTask={this.props.rerunTask}\n                            task={tasks[0].task}\n                            metrics={tasks[0].metrics}\n                            name={tasks[0].name}\n                            showTask={this.props.showTask}\n                            highlight={tasks[0].uuid === this.props.highlightedTask}\n                            filterLikeTask={this.props.filterLikeTask}\n                            devices={this.props.devices}\n                            detailCol={this.props.detailCol}\n                        />\n                     </LazyLoad>\n                    {tasks.length > 1 &&\n                        <div class=\"collapse-toggle\" onClick={this.toggleCollapsed}>{\n                            this.state.collapsed\n                                ?\n                                <div><i className=\"fas fa-angle-double-down\"></i> {\"Expand (\" + (tasks.length - 1) + \")\"}</div>\n                                :\n                                <div><i className=\"fas fa-angle-double-up\"></i> Collapse</div>\n                        }</div>\n                    }\n                    {!this.state.collapsed && tasks.slice(1).map(task => (\n                        <LazyLoad key={tasks.uuid} height={102} offset={[0, 0]} scrollContainer=\".project\" resize={true} overflow={true}>\n                            <PausedTask\n                                uuid={task.uuid}\n                                rerunTask={this.props.rerunTask}\n                                task={task.task}\n                                name={task.name}\n                                showTask={this.props.showTask}\n                                highlight={task.uuid === this.props.highlightedTask}\n                                filterLikeTask={this.props.filterLikeTask}\n                                devices={this.props.devices}\n                                detailCol={this.props.detailCol}\n                                metrics={task.metrics}\n                                collapsed={true}\n                            />\n                        </LazyLoad>\n                    ))}\n                </div>\n            );\n        } else {\n            return \"\";\n        }\n    }\n}\n\nexport default CollapsedTasks;","import React from 'react';\nimport JsonEditor from './JsonEditor';\n\nclass ConfigEditor extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            config: {},\n            inheritedConfig: {},\n            loadedUrl: null,\n            dataJsonString: ''\n        };\n\n        this.jsonEditor = React.createRef();\n        this.onChange = this.onChange.bind(this);\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps.url !== this.props.url || JSON.stringify(prevProps.bases) !== JSON.stringify(this.props.bases))\n            this.reload();\n    }\n\n    componentDidMount() {\n        this.setState({\n            loadedUrl: null\n        });\n        this.reload();\n    }\n\n    reload() {\n        if (this.props.url === \"\") {\n\n            if (this.state.loadedUrl !== this.props.url) {\n                this.setState({\n                    config: {},\n                    inheritedConfig: {},\n                    loadedUrl: this.props.url\n                });\n                if (this.jsonEditor.current !== null)\n                    this.jsonEditor.current.updateEditor();\n            }\n        } else {\n            var dataJson = {};\n            dataJson['bases'] = this.props.bases;\n            let dataJsonString = JSON.stringify(dataJson);\n            if (this.state.loadedUrl !== this.props.url || this.state.dataJsonString !== dataJsonString) {\n                var data = new FormData();\n\n                data.append(\"data\", dataJsonString);\n\n                fetch(this.props.url,\n                    {\n                        method: \"POST\",\n                        body: data\n                    })\n                    .then(res => res.json())\n                    .then(\n                        (result) => {\n                            this.setState({\n                                inheritedConfig: result['inherited_config'],\n                                config: result['config'] !== null ? result['config'] : this.state.config,\n                                loadedUrl: this.props.url,\n                                dataJsonString: dataJsonString\n                            });\n                            this.jsonEditor.current.updateEditor();\n\n                            if (this.props.onDynamicChange !== undefined)\n                                this.props.onDynamicChange(result['dynamic'])\n                        },\n                        (error) => {\n\n                        }\n                    )\n            }\n        }\n    }\n\n    onChange(data) {\n        this.setState({\n            config: data\n        });\n    }\n\n    render() {\n        if (this.state.loadedUrl === this.props.url)\n            return (\n                <JsonEditor ref={this.jsonEditor} json={this.state.config} inheritedJson={this.state.inheritedConfig} onChange={this.onChange} options={this.props.preview ? {mode: 'code', modes: ['code'], readOnly: true, mainMenuBar: false, statusBar: false} : {}} />\n            );\n        else\n            return (\n                <div className=\"editor-loading\"><i className=\"fas fa-sync fa-spin fa-2x\"></i></div>\n            )\n    }\n}\n\nexport default ConfigEditor;","import React from 'react';\n\nclass ControlBar extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.openGlobalLog = this.openGlobalLog.bind(this);\n        this.pauseAll = this.pauseAll.bind(this);\n    }\n\n    openGlobalLog() {\n        window.open(\"/log\", '_blank');\n    }\n\n    pauseAll() {\n        fetch(\"/pause_all/\")\n            .then(res => res.json())\n            .then(\n                (result) => {\n\n                },\n                (error) => {\n\n                }\n            )\n    }\n\n    render() {\n        return (\n            <div id=\"controlbar\">\n                <div className=\"container\">\n                    <h1 id=\"title\">\n                        TaskPlan\n                    </h1>\n                    <div className=\"action\" onClick={this.pauseAll} title=\"Pause all running tasks\">\n                        <i className=\"fa fa-pause\"></i>\n                    </div>\n                    <div className=\"action\" onClick={this.openGlobalLog} title=\"Open the global log\">\n                        <i className=\"far fa-file-alt\"></i>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ControlBar;","import React from 'react';\nimport State from './Global'\nimport Task from './Task'\n\nclass Device extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            max_running: 1,\n            showQueue: false\n        };\n\n        this.openMaxRunningDialog = this.openMaxRunningDialog.bind(this);\n        this.connect = this.connect.bind(this);\n        this.disconnect = this.disconnect.bind(this);\n        this.toggleQueue = this.toggleQueue.bind(this);\n    }\n\n    openMaxRunningDialog() {\n        this.openMaxRunningDialogRefs.current.openDialog();\n    }\n\n    connect() {\n        fetch(\"/connect_device/\" + this.props.device.uuid)\n            .then(res => res.json())\n            .then(\n                (result) => {\n                }\n            )\n    }\n\n    disconnect() {\n        fetch(\"/disconnect_device/\" + this.props.device.uuid)\n            .then(res => res.json())\n            .then(\n                (result) => {\n                }\n            )\n    }\n\n    toggleQueue() {\n        this.setState({\n            showQueue: !this.state.showQueue\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"device\">\n                <div className=\"header\">\n                    <span>{this.props.device.name}</span>\n                    {this.props.device.is_connected === 0 &&\n                        <div className=\"action\" onClick={this.connect}>\n                            Connect\n                        </div>\n                    }\n                    {this.props.device.is_connected === 1 &&\n                        <div className=\"action\" onClick={this.disconnect}>\n                            Disconnect\n                        </div>\n                    }\n                    <div className=\"hide-device\" onClick={() => this.props.hideDevice(this.props.device)}>\n                        <i className=\"fas fa-times\"></i>\n                    </div>\n                </div>\n\n                <div className=\"body\">\n                    {this.props.device.is_connected !== 0 &&\n                        <ul className=\"tasks\" id=\"tasks-running\">\n                            {this.props.tasks.filter(task => task.state === State.RUNNING).length === 0 &&\n                            <li className=\"mock-task\">\n                                Idle\n                            </li>\n                            }\n                            {this.props.tasks.filter(task => task.state === State.RUNNING).map((task, index) => (\n                                <Task\n                                    key={task.uuid}\n                                    task={task}\n                                    index={index}\n                                    highlightTask={this.props.highlightTask}\n                                />\n                            ))\n                            }\n                        </ul>\n                    }\n\n                    <div className=\"queue-header\">\n                        <div className=\"action\" onClick={this.toggleQueue}>\n                            {this.state.showQueue ?\n                                <i className=\"fas fa-minus\"></i>\n                                :\n                                <i className=\"fas fa-plus\"></i>\n                            }\n                        </div>\n                        Waiting ({this.props.tasks.filter(task => task.state === State.QUEUED).length})\n                    </div>\n                    {this.state.showQueue &&\n                        <ul className=\"tasks tasks-queued\">\n                            {this.props.tasks.filter(task => task.state === State.QUEUED).sort(function (a, b) {\n                                return a.queue_index - b.queue_index\n                            }).map((task, index) => (\n                                <Task\n                                    key={task.uuid}\n                                    task={task}\n                                    index={index}\n                                    highlightTask={this.props.highlightTask}\n                                />\n                            ))}\n                        </ul>\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\n\nexport default Device;","import React from 'react';\n\n\nclass FlashMessage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            state: (\"state\" in props ? props.state : 0)\n        };\n    }\n\n    render() {\n        let style = {};\n        if (this.state.state === 0)\n            style = {marginLeft: -400};\n        else if (this.state.state === 1)\n            style = {marginLeft: 0};\n        else if (this.state.state === 2)\n            style = {marginLeft: 0, marginTop: -26};\n        return (\n            <div className={'flash-message level-' + this.props.flashMessage.level} style={style} title={this.props.flashMessage.message}>\n                {this.props.flashMessage.short}\n            </div>\n        );\n    }\n}\n\nclass FlashMessageManager extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            flashMessages: []\n        };\n        this.flashMessagesRefs = [];\n        this.nextId = 0;\n\n        var fm = this;\n        this.props.evtSource.addEventListener(\"FLASH_MESSAGE\", function (e) {\n            const flashMessages = fm.state.flashMessages.slice();\n            const newFlashMessage = JSON.parse(e.data);\n\n            newFlashMessage.id = fm.nextId++;\n\n            flashMessages.push(newFlashMessage);\n            fm.flashMessagesRefs.push(React.createRef());\n            let flashMessageRef = fm.flashMessagesRefs[fm.flashMessagesRefs.length - 1];\n            setTimeout(() => fm.nextState(flashMessageRef), 100);\n\n            fm.setState({\n                flashMessages: flashMessages\n            });\n        });\n\n    }\n\n\n    nextState(flashMessage) {\n        if (flashMessage.current.state.state === 0) {\n            flashMessage.current.setState({state: 1});\n            setTimeout(() => this.nextState(flashMessage), 10000);\n        } else if (flashMessage.current.state.state === 1) {\n            flashMessage.current.setState({state: 2});\n            setTimeout(() => this.nextState(flashMessage), 1000);\n        } else if (flashMessage.current.state.state === 2) {\n            const flashMessages = this.state.flashMessages.slice();\n            const messageIndex = this.flashMessagesRefs.findIndex(function (e) {\n                return e === flashMessage\n            });\n\n            flashMessages.splice(messageIndex, 1);\n            this.flashMessagesRefs.splice(messageIndex, 1);\n\n            this.setState({\n                flashMessages: flashMessages\n            });\n        }\n    }\n\n    render() {\n        return (\n            <div id=\"flash-messages\">\n                {this.state.flashMessages.map((flashMessage, index) => (\n                    <FlashMessage\n                        key={flashMessage.id}\n                        flashMessage={flashMessage}\n                        ref={this.flashMessagesRefs[index]}\n                    />\n                ))}\n                {this.props.noConnection &&\n                    <FlashMessage\n                        key=\"-1\"\n                        flashMessage={{\"short\": \"No connection to server\", \"level\": \"40\"}}\n                        state=\"1\"\n                    />\n                }\n            </div>\n        );\n    }\n}\n\n\nexport default FlashMessageManager;","\nvar State = {\n    INIT: 0,\n    QUEUED: 1,\n    RUNNING: 2,\n    STOPPED: 3\n};\n\nDate.prototype.toShortStr = function() {\n    function pad(n) {\n        n = parseInt(n);\n        return (n < 10) ? (\"0\" + n) : n;\n    }\n    return this.getDate() + \".\" + (this.getMonth() + 1) + \" - \" + pad(this.getHours()) + \":\" + pad(this.getMinutes());\n};\n\nexport default State;","import React from 'react';\nimport Prompt from \"./Prompt\";\nimport {TaskName} from \"./Task\";\nimport State from \"./Global\";\nimport ReassuringPrompt from \"./ReassuringPrompt\";\nimport PausedTask from \"./PausedTask\";\nimport CollapsedTasks from \"./CollapsedTasks\";\n\nclass GroupedTasks extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            collapsed: {}\n        };\n\n        this.toggleCollapsed = this.toggleCollapsed.bind(this);\n    }\n\n    toggleCollapsed(group) {\n        let collapsed = Object.assign({}, this.state.collapsed);\n\n        if (!(group in collapsed))\n            collapsed[group] = true;\n        else\n            collapsed[group] = !collapsed[group];\n\n        this.setState({\n            collapsed: collapsed\n        })\n    }\n\n    render() {\n        if (Object.values(this.props.tasks).length > 0) {\n            if (this.props.tasks instanceof Array) {\n                console.log(this.props.tasks);\n                return this.props.tasks.map((tasks, i) => (\n                        <CollapsedTasks\n                            tasks={tasks}\n                            key={tasks[0] !== null ? tasks[0].uuid : i}\n                            rerunTask={this.props.rerunTask}\n                            showTask={this.props.showTask}\n                            filterLikeTask={this.props.filterLikeTask}\n                            devices={this.props.devices}\n                            detailCol={this.props.detailCol}\n                            highlightedTask={this.props.highlightedTask}\n                        />\n                    ));\n            } else {\n                return Object.keys(this.props.tasks).sort((a, b) => a.localeCompare(b)).map((group) => (\n                    <div key={group} className=\"param-group\">\n                        <div className=\"group-header\" onClick={() => this.toggleCollapsed(group)}>\n                            <div className=\"title\">\n                                {(!(group in this.state.collapsed) || !this.state.collapsed[group])\n                                    ?\n                                    <i className=\"fas fa-caret-down\"></i>\n                                    :\n                                    <i className=\"fas fa-caret-right\"></i>\n                                }\n                                {group}\n                            </div>\n                        </div>\n                        {(!(group in this.state.collapsed) || !this.state.collapsed[group]) &&\n                            <div className=\"group-tasks\">\n                                <GroupedTasks\n                                    tasks={this.props.tasks[group]}\n                                    rerunTask={this.props.rerunTask}\n                                    showTask={this.props.showTask}\n                                    filterLikeTask={this.props.filterLikeTask}\n                                    devices={this.props.devices}\n                                    detailCol={this.props.detailCol}\n                                    highlightedTask={this.props.highlightedTask}\n                                />\n                            </div>\n                        }\n                    </div>\n                ));\n            }\n        } else {\n            return \"\";\n        }\n    }\n}\n\nexport default GroupedTasks;","import React from 'react';\nimport cloneDeep from 'lodash/cloneDeep';\nimport merge from 'lodash/merge';\nimport isEmpty from 'lodash/isEmpty';\nimport isEqual from 'lodash/isEqual';\nimport JSONEditor from 'jsoneditor';\nimport 'jsoneditor-react/es/editor.min.css';\nimport ace from 'brace';\nimport 'brace/mode/json';\n\nvar stringify = require('json-stable-stringify');\n\nvar Node = require('jsoneditor/src/js/Node');\n\nvar originalUpdateDom = Node.prototype.updateDom;\nNode.prototype.updateDom = function (options) {\n    originalUpdateDom.call(this, options);\n    var tdRevert = this.dom.tdRevert;\n    if (!tdRevert && this.dom && this.dom.tr && this.fieldEditable && (this.type === \"auto\" || this.type === \"array\" || this.type === \"string\")) {\n        tdRevert = document.createElement('td');\n        this.dom.tdRevert = tdRevert;\n        this.dom.tdValue.parentNode.appendChild(tdRevert);\n\n        var icon = document.createElement('i');\n        icon.type = 'i';\n        icon.className = 'fas fa-undo-alt';\n\n        var button = document.createElement('div');\n        button.type = 'div';\n        button.className = 'revert';\n        button.onclick = () => {\n            this.editor.options.onRevert({path: this.getPath(), field: this.field, value: this.value})\n        };\n        button.appendChild(icon);\n\n\n        tdRevert.appendChild(button);\n    }\n\n};\n\nJSONEditor.VALID_OPTIONS.push('onRevert');\nconsole.log(Node);\n\n\nclass JsonEditor extends React.Component {\n    componentDidMount() {\n        const options = {};\n        options.onModeChange = (mode) => {\n            this.updateEditor();\n            if (mode === \"tree\")\n                this.jsoneditor.expandAll();\n        };\n        options.onClassName = (node) => {\n\n            if (this.pathExistsInJson(node.path, this.props.inheritedJson) && !this.pathExistsInJson(node.path, this.props.json)) {\n                return 'inherited-value';\n            } else if (!this.pathExistsInJson(node.path, this.props.inheritedJson) && this.pathExistsInJson(node.path, this.props.json)) {\n                return 'new-value';\n            }\n\n            return undefined;\n        };\n        options.onEditable = (node) => {\n\n            if (this.pathExistsInJson(node.path, this.props.inheritedJson) ) {\n                return {\"field\": false, \"value\": true};\n            } else {\n                return {\"field\": true, \"value\": true};\n            }\n\n        };\n        options.onChange = () => {\n            if (this.jsoneditor.getMode() === \"code\") {\n                try {\n                    const currentJson = this.jsoneditor.get();\n                    if (this.props.json !== currentJson) {\n                        this.props.onChange(currentJson);\n                    }\n                } catch (err) {\n                    this.err = err;\n                }\n            }\n        };\n        options.onChangeJSON = (json) => {\n            if (this.jsoneditor.getMode() === \"tree\") {\n                var newJson = {};\n                this.updateFromJsonEditor(newJson, this.props.json, this.props.inheritedJson, json, []);\n                this.props.onChange(newJson);\n                console.log(newJson);\n            }\n        };\n        options.onRevert = (node) => {\n            var newJson = cloneDeep(this.props.json);\n            var currentBlock = newJson;\n            var prevBlocks = [newJson];\n\n            for (var i = 0; i < node.path.length; i++) {\n                if (i === node.path.length - 1) {\n                    delete currentBlock[node.path[i]];\n                } else {\n                    currentBlock = currentBlock[node.path[i]];\n                    prevBlocks.push(currentBlock)\n                }\n            }\n\n            for (var i = node.path.length - 2; i >= 0; i--) {\n                if (isEmpty(prevBlocks[i][node.path[i]])) {\n                    delete prevBlocks[i][node.path[i]];\n                } else {\n                    break;\n                }\n            }\n\n            this.props.onChange(newJson);\n            this.updateEditor();\n        };\n        options.mode = 'mode' in this.props.options ? this.props.options.mode : 'code';\n        options.modes = 'modes' in this.props.options ? this.props.options.modes : ['code', 'tree'];\n        options.ace = ace;\n        options.history = false;\n        options.enableSort = false;\n        options.enableTransform = false;\n        options.mainMenuBar = 'mainMenuBar' in this.props.options ? this.props.options.mainMenuBar : true;\n        options.statusBar = 'statusBar' in this.props.options ? this.props.options.statusBar : true;\n\n        this.jsoneditor = new JSONEditor(this.container, options);\n\n        if ('readOnly' in this.props.options && this.props.options.readOnly) {\n            this.jsoneditor.aceEditor.setReadOnly(true);\n        }\n\n        if ('json' in this.props) {\n            this.updateEditor();\n            if (options.mode === 'tree')\n                this.jsoneditor.expandAll();\n        }\n    }\n\n    updateFromJsonEditor(newJson, oldJson, inheritedJson, editorJson, path) {\n        for (var prop in editorJson) {\n            if (typeof editorJson[prop] === \"object\" && !Array.isArray(editorJson[prop]) && Object.keys(editorJson[prop]).length > 0) {\n                this.updateFromJsonEditor(\n                    newJson,\n                    prop in oldJson ? oldJson[prop] : {},\n                    prop in inheritedJson ? inheritedJson[prop] : {},\n                    editorJson[prop],\n                    path.concat([prop])\n                );\n            } else {\n                if ((prop in inheritedJson && !isEqual(inheritedJson[prop], editorJson[prop])) || !(prop in inheritedJson) || prop in oldJson) {\n                    this.setValueAtPath(newJson, path.concat([prop]), editorJson[prop]);\n                }\n            }\n        }\n    }\n\n    pathExistsInJson(path, json) {\n        if (!path) {\n            return false;\n        }\n\n        var currentBlock = json;\n        for (var i = 0; i < path.length; i++) {\n            if (i === path.length - 1) {\n                return path[i] in currentBlock;\n            } else {\n                if (!(path[i] in currentBlock)) {\n                    return false;\n                }\n                currentBlock = currentBlock[path[i]];\n            }\n        }\n        return false;\n    }\n\n    setValueAtPath(json, path, value) {\n        var currentBlock = json;\n        for (var i = 0; i < path.length; i++) {\n            if (i === path.length - 1) {\n                currentBlock[path[i]] = value;\n            } else {\n                if (!(path[i] in currentBlock)) {\n                    currentBlock[path[i]] = {};\n                }\n                currentBlock = currentBlock[path[i]];\n            }\n        }\n    }\n\n    componentDidUpdate() {\n    }\n\n    updateEditor() {\n        if (this.jsoneditor.getMode() === \"code\") {\n            this.jsoneditor.setText(stringify(this.props.json, { space: '  ' }));\n        } else {\n            var mergedJson = cloneDeep(this.props.inheritedJson);\n            merge(mergedJson, this.props.json);\n            this.jsoneditor.setText(stringify(mergedJson, { space: '  ' }));\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.jsoneditor) {\n            this.jsoneditor.destroy();\n        }\n    }\n\n    render() {\n        return (\n            <div className={\"jsoneditor-react-container\" + ('readOnly' in this.props.options && this.props.options.readOnly ? ' jsoneditor-readOnly' : '')} ref={elem => this.container = elem}/>\n        );\n    }\n}\n\nexport default JsonEditor;","import React from 'react';\nimport ParamValue from \"./ParamValue\";\nimport ReassuringPrompt from \"./ReassuringPrompt\";\n\nclass Param extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hideParamValues: true\n        };\n\n        this.toggleHideParamValues = this.toggleHideParamValues.bind(this);\n        this.onDragStart = this.onDragStart.bind(this);\n        this.onDragOver = this.onDragOver.bind(this);\n        this.onDragEnter = this.onDragEnter.bind(this);\n        this.onDragLeave = this.onDragLeave.bind(this);\n        this.onDrop = this.onDrop.bind(this);\n        this.reassuringRemovePromptRefs = React.createRef();\n        this.paramRef = React.createRef();\n        this.dragEnterCounter = 0\n    }\n\n    toggleHideParamValues() {\n        this.setState({\n            hideParamValues: !this.state.hideParamValues\n        });\n    }\n\n    onDragStart(e) {\n        e.dataTransfer.setData(\"text/plain\", this.props.param.uuid);\n    }\n\n    onDragOver(e) {\n        if (this.props.sortMode && this.props.param.uuid !== e.dataTransfer.getData(\"text/plain\")) {\n            e.preventDefault();\n        }\n    }\n\n    onDrop(e) {\n        if (this.props.sortMode && this.props.param.uuid !== e.dataTransfer.getData(\"text/plain\")) {\n            e.preventDefault();\n            this.props.reorderParam(e.dataTransfer.getData(\"text/plain\"), this.props.param);\n\n            this.dragEnterCounter = 0;\n            this.paramRef.current.className = \"item item-param\";\n        }\n    }\n\n    onDragEnter(e) {\n        if (this.props.sortMode && this.props.param.uuid !== e.dataTransfer.getData(\"text/plain\")) {\n            e.preventDefault();\n            this.paramRef.current.className = \"item item-param on-drag-over\";\n            this.dragEnterCounter++;\n        }\n    }\n\n    onDragLeave(e) {\n        if (this.props.sortMode && this.props.param.uuid !== e.dataTransfer.getData(\"text/plain\")) {\n            e.preventDefault();\n            this.dragEnterCounter--;\n            if (this.dragEnterCounter === 0)\n                this.paramRef.current.className = \"item item-param\";\n        }\n    }\n\n\n    render() {\n        return (\n            <li ref={this.paramRef} className=\"item item-param\" onDragOver={this.onDragOver} onDragLeave={this.onDragLeave} onDragEnter={this.onDragEnter} onDrop={this.onDrop} onDragStart={this.onDragStart} draggable={this.props.sortMode ? \"true\" : \"false\"}>\n                <div className=\"header\" onClick={() => this.toggleHideParamValues()}>\n                    {this.props.sortMode &&\n                        <input type=\"checkbox\" style={{\"margin-right\": \"5px\"}} checked={this.props.forceInName} onChange={(e) => this.props.onChangeForceParamInName(e, this.props.param.uuid)}/>\n                    }\n\n                    <div className=\"title\">{this.props.sortMode ? this.props.param.group.concat([this.props.param.name]).join(\" / \") : this.props.param.name}</div>\n                    <div style={{\"flex\": \"2 1 auto\"}}></div>\n                    {!this.props.sortMode ?\n                        <div className=\"toolbar\">\n                            <div className=\"action\" onClick={(e) => {this.props.newParamValueFunc(this.props.param, this.props.param.values); e.stopPropagation();}} title=\"New parameter value\">\n                                <i className=\"fas fa-plus\"></i>\n                            </div>\n                            <div className=\"action\" onClick={(e) => {this.props.editParamFunc(this.props.param); e.stopPropagation();}} title=\"Edit parameter\">\n                                <i className=\"fa fa-edit\"></i>\n                            </div>\n                            {this.props.param.values.length === 0 ?\n                                <div className=\"action\" onClick={() => this.reassuringRemovePromptRefs.current.openDialog()} title=\"Remove parameter\">\n                                    <i className=\"far fa-trash-alt\"></i>\n                                </div>\n                                :\n                                <div className=\"action action-disabled\" title=\"Parameter cannot be removed, as it still has values.\">\n                                    <i className=\"far fa-trash-alt\"></i>\n                                </div>\n                            }\n                        </div>\n                        :\n                        <div className=\"toolbar\">\n                            <div className=\"grip-icon\">\n                                <i className=\"fas fa-bars\"></i>\n                            </div>\n                        </div>\n                    }\n                </div>\n                {!this.state.hideParamValues && !this.props.sortMode &&\n                    <ul>\n                        {this.props.param.values.sort((a, b) => {\n                            return a.name.localeCompare(b.name);\n                        }).map(value => (\n                            <ParamValue\n                                key={value.uuid}\n                                paramValue={value}\n                                param={this.props.param}\n                                editFunc={this.props.editParamValueFunc}\n                                removable={Object.values(value.number_of_tasks).map(x => x[0]).reduce((accumulator, currentValue) => accumulator + currentValue, 0) === 0}\n                            />\n                        ))}\n                    </ul>\n                }\n                <ReassuringPrompt ref={this.reassuringRemovePromptRefs} header=\"Really want to delete?\" text=\"Do you really want to remove this parameter?\" url={\"/remove_param/\" + this.props.param.uuid}/>\n            </li>\n        );\n    }\n}\n\nexport default Param;","import React from 'react';\nimport ConfigEditor from \"./ConfigEditor\";\n\nclass ParamBatchEditor extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            open: false\n        };\n\n        this.configEditor = React.createRef();\n        this.open = this.open.bind(this);\n        this.close = this.close.bind(this);\n        this.save = this.save.bind(this);\n    }\n\n    open() {\n        this.props.closeEditors();\n        this.setState({\n            open: true\n        });\n    }\n\n    close() {\n        this.setState({\n            open: false\n        });\n    }\n\n    save() {\n        var data = new FormData();\n\n        var dataJson = {};\n        dataJson['config'] = this.configEditor.current.state.config;\n\n        data.append(\"data\", JSON.stringify(dataJson));\n\n        var url = \"/add_param_batch\";\n\n        fetch(url,\n            {\n                method: \"POST\",\n                body: data\n            })\n            .then(res => res.json())\n            .then(\n                (result) => {\n\n                },\n                (error) => {\n\n                }\n            );\n\n        this.close();\n    }\n\n\n    render() {\n        if (this.state.open) {\n            return (\n                <div className=\"param-batch-editor editor\" >\n                    <div className=\"header\">Add multiple parameters</div>\n                    <ConfigEditor ref={this.configEditor} url=\"\"/>\n                    <div className=\"buttons\">\n                        <div onClick={this.save}>Save</div>\n                        <div onClick={this.close}>Cancel</div>\n                    </div>\n                </div>\n            );\n        } else {\n            return \"\";\n        }\n    }\n}\n\nexport default ParamBatchEditor;","import React from 'react';\n\nclass ParamEditor extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            param: null,\n            name: '',\n            deprecatedParamValue: '',\n            defaultParamValue: ''\n        };\n\n        this.configEditor = React.createRef();\n        this.open = this.open.bind(this);\n        this.close = this.close.bind(this);\n        this.save = this.save.bind(this);\n        this.new = this.new.bind(this);\n        this.onNameChange = this.onNameChange.bind(this);\n        this.onDeprecatedParamValueChange = this.onDeprecatedParamValueChange.bind(this);\n        this.onDefaultParamValueChange = this.onDefaultParamValueChange.bind(this);\n    }\n\n    open(param) {\n        this.props.closeEditors();\n        this.setState({\n            param: param,\n            name: param.name,\n            deprecatedParamValue: param.deprecated_param_value.uuid === undefined ? param.values[0].uuid : param.deprecated_param_value.uuid,\n            defaultParamValue: param.default_param_value.uuid === undefined ? param.values[0].uuid : param.default_param_value.uuid\n        });\n    }\n\n    new() {\n        this.props.closeEditors();\n        this.setState({\n            param: {name: 'New parameter', values: []},\n            name: '',\n            deprecatedParamValue: '',\n            defaultParamValue: ''\n        });\n    }\n\n    close() {\n        this.setState({\n            param: null\n        });\n    }\n\n    save() {\n        var data = new FormData();\n\n        var dataJson = {};\n        dataJson['name'] = this.state.name;\n        dataJson['deprecated_param_value'] = this.state.deprecatedParamValue;\n        dataJson['default_param_value'] = this.state.defaultParamValue;\n        dataJson['config'] = {};\n\n        data.append(\"data\", JSON.stringify(dataJson));\n\n        var url = \"\";\n        if (this.state.param.uuid)\n            url = \"/edit_param/\" + this.state.param.uuid;\n        else\n            url = \"/add_param/\";\n\n        fetch(url,\n            {\n                method: \"POST\",\n                body: data\n            })\n            .then(res => res.json())\n            .then(\n                (result) => {\n\n                },\n                (error) => {\n\n                }\n            );\n\n        this.close();\n    }\n\n    onNameChange(event) {\n        this.setState({\n            name: event.target.value\n        });\n    }\n\n    onDeprecatedParamValueChange(event) {\n        this.setState({\n            deprecatedParamValue: event.target.value\n        });\n    }\n\n    onDefaultParamValueChange(event) {\n        this.setState({\n            defaultParamValue: event.target.value\n        });\n    }\n\n    render() {\n        if (this.state.param !== null) {\n            return (\n                <div className=\"param-editor editor\" >\n                    <div className=\"header\">{this.state.param.name}</div>\n                    <div className=\"field\">\n                        <label>Name:</label>\n                        <input value={this.state.name} onChange={this.onNameChange} required=\"required\" />\n                    </div>\n                    {this.state.param.values.length > 0 &&\n                    <div className=\"field\">\n                        <label>Parameter value for deprecated tasks:</label>\n                        <select value={this.state.deprecatedParamValue} onChange={this.onDeprecatedParamValueChange}>\n                            {this.state.param.values.map(value => (\n                                <option value={value.uuid}>{value.name}</option>\n                            ))}\n                        </select>\n                    </div>\n                    }\n                    {this.state.param.values.length > 0 &&\n                    <div className=\"field\">\n                        <label>Default parameter value for new tasks:</label>\n                        <select value={this.state.defaultParamValue} onChange={this.onDefaultParamValueChange}>\n                            {this.state.param.values.map(value => (\n                                <option value={value.uuid}>{value.name}</option>\n                            ))}\n                        </select>\n                    </div>\n                    }\n                    <div className=\"buttons\">\n                        <div onClick={this.save}>Save</div>\n                        <div onClick={this.close}>Cancel</div>\n                    </div>\n                </div>\n            );\n        } else {\n            return \"\";\n        }\n    }\n}\n\nexport default ParamEditor;","import React from 'react';\n\n\nclass ParamFilterParam extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n        };\n\n        this.mapValueToValues = this.mapValueToValues.bind(this);\n        this.calcParamValueName = this.calcParamValueName.bind(this);\n        this.toggleAll = this.toggleAll.bind(this);\n    }\n\n    calcParamValueName(paramValue, args) {\n        let name = paramValue.name;\n        for (let i = 0; i < args.length; i++) {\n            name = name.replace(\"$T\" + i + \"$\", args[i]);\n        }\n        return name;\n    }\n\n    calcParamValueClasses(param, value) {\n        let classes = \"param-value \";\n        if (this.props.selectMultiple) {\n            const paramValue = [value.uuid, ...value.args];\n            if (!(param.uuid in this.props.selectedParamValues) || (param.uuid in this.props.selectedParamValues && this.props.selectedParamValues[param.uuid].findIndex(selection => selection.length === paramValue.length && selection.every((value, index) => value === paramValue[index])) !== -1))\n                classes += \"param-value-selected \";\n        } else {\n            if (param.uuid in this.props.selectedParamValues && this.props.selectedParamValues[param.uuid][0] === value.uuid && (!(\"resolvedName\" in value) || this.calcParamValueName(value, this.props.selectedParamValues[param.uuid].slice(1)) === value.resolvedName))\n                classes += \"param-value-selected \";\n        }\n        if (param.default_param_value.uuid === value.uuid)\n            classes += \"param-value-default \";\n        return classes;\n    }\n\n    mapValueToValues(paramValue) {\n        let paramValues = [];\n        for (let name in paramValue.number_of_tasks)\n            paramValues.push({\"uuid\": paramValue.uuid, \"name\": paramValue.name, \"resolvedName\": name, \"numberOfTasks\": paramValue.number_of_tasks[name][0], \"args\": paramValue.number_of_tasks[name][1]});\n        return paramValues;\n    }\n\n    toggleAll(evt) {\n        this.props.toggleSelection(this.props.param, null, []);\n        evt.stopPropagation();\n    }\n\n    getSelectedValues() {\n        if (!(this.props.param.uuid in this.props.selectedParamValues))\n            return [\"All\"];\n        else if (this.props.selectedParamValues[this.props.param.uuid].length === 0)\n            return [\"None\"];\n        else {\n            let selectedParamValues = this.props.selectedParamValues[this.props.param.uuid];\n            if (!this.props.selectMultiple)\n                selectedParamValues = [selectedParamValues];\n\n            let values = [];\n            for (let selection of selectedParamValues) {\n                const paramValue = this.props.param.values.find(value => value.uuid === selection[0]);\n                values.push(this.calcParamValueName(paramValue, selection.slice(1)));\n            }\n            return values;\n        }\n    }\n\n    render() {\n        return (\n            <div key={this.props.param.uuid} className=\"param\">\n                <div className={this.props.expanded ? \"param-name param-name-expanded\" : \"param-name param-name-collapsed\"} onClick={() => this.props.toggleExpandedParam(this.props.param.uuid)}>\n                    {this.props.param.name}\n\n                    {this.props.expanded ?\n                        this.props.selectMultiple &&\n                        <span className={!(this.props.param.uuid in this.props.selectedParamValues) ? \"all-button all-button-activated\" : \"all-button\"} onClick={this.toggleAll}>\n                            All\n                        </span>\n                        :\n                        this.getSelectedValues().map(paramValue =>\n                            <span className=\"param-value-hint\">\n                                {paramValue}\n                            </span>\n                        )\n                    }\n                </div>\n                {this.props.expanded &&\n                    <div className=\"param-values-wrapper\">\n                        <div className=\"param-values\">\n                            {this.props.param.values.sort((a, b) => {\n                                return a.name.localeCompare(b.name);\n                            }).map(paramValue =>\n                                !paramValue.isTemplate || !this.props.useTemplateFields ?\n                                this.mapValueToValues(paramValue).map(value => (\n                                        <div key={value.uuid} className={this.calcParamValueClasses(this.props.param, value)} onClick={() => this.props.toggleSelection(this.props.param, value, value.args)}>\n                                            <React.Fragment>\n                                                {value.resolvedName}\n                                                {value.numberOfTasks !== null && <span className=\"task-numbers\">{value.numberOfTasks}</span>}\n                                            </React.Fragment>\n                                        </div>\n                                    )\n                                ):(\n                                 <div key={paramValue.uuid} className={this.calcParamValueClasses(this.props.param, paramValue)} onClick={() => this.props.toggleSelection(this.props.param, paramValue, [this.props.getParamValueArg(this.props.param, paramValue)])}>\n                                    <React.Fragment>\n                                        {paramValue.name.split(\"$T0$\")[0]}\n                                        <input value={this.props.getParamValueArg(this.props.param, paramValue)} style={{\"width\": Math.max(10, (10 * (this.props.getParamValueArg(this.props.param, paramValue)).toString().length)) + \"px\"}} onChange={(evt) => this.props.onParamValueArgChange(this.props.param, paramValue, evt)}/>\n                                        {paramValue.name.split(\"$T0$\")[1]}\n                                    </React.Fragment>\n                                </div>\n                                )\n                            )}\n                        </div>\n                    </div>\n                }\n            </div>\n        );\n    }\n}\n\nclass ParamFilter extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            paramValueArguments: {},\n            expandedParam: null\n        };\n        this.onParamValueArgChange = this.onParamValueArgChange.bind(this);\n        this.getParamValueArg = this.getParamValueArg.bind(this);\n        this.toggleExpandedParam = this.toggleExpandedParam.bind(this);\n    }\n\n\n    onParamValueArgChange(param, value, evt) {\n        const paramValueArguments = Object.assign({}, this.state.paramValueArguments);\n\n        paramValueArguments[value.uuid] = evt.target.value;\n        this.props.toggleSelection(param, value, evt.target.value);\n\n        this.setState({\n            paramValueArguments: paramValueArguments\n        });\n    }\n\n    getParamValueArg(param, value) {\n        if (param.uuid in this.props.selectedParamValues && this.props.selectedParamValues[param.uuid].length > 1) {\n            if (!(value.uuid in this.state.paramValueArguments) || this.state.paramValueArguments[value.uuid] !== this.props.selectedParamValues[param.uuid][1]) {\n                const paramValueArguments = Object.assign({}, this.state.paramValueArguments);\n\n                paramValueArguments[value.uuid] = this.props.selectedParamValues[param.uuid][1];\n\n                this.setState({\n                    paramValueArguments: paramValueArguments\n                });\n            }\n\n            return this.props.selectedParamValues[param.uuid][1];\n        } else if (value.uuid in this.state.paramValueArguments)\n            return this.state.paramValueArguments[value.uuid];\n        else if (value.template_defaults.length > 0)\n            return value.template_defaults[0];\n        else\n            return null;\n    }\n\n    toggleExpandedParam(param) {\n        this.setState({\n            expandedParam: param === this.state.expandedParam ? null : param\n        })\n    }\n\n    render() {\n        let tagsParam = null;\n\n        if (this.props.tags !== undefined && this.props.tags.length > 0) {\n            tagsParam = {\n                \"uuid\": \"tags\",\n                \"name\": \"tags\",\n                \"deprecated_param_value\": this.props.tags[0],\n                \"default_param_value\": this.props.tags[0],\n                \"values\": []\n            };\n            tagsParam[\"values\"] = [];\n            for (const tag of this.props.tags) {\n                tagsParam[\"values\"].push({\"name\": tag, \"uuid\": tag, \"number_of_tasks\": {[tag]: [null, []]}});\n            }\n        }\n\n        let versionsParam = null;\n        if (this.props.codeVersions !== undefined && this.props.codeVersions.length > 0) {\n            versionsParam = {\n                \"uuid\": \"versions\",\n                \"name\": \"versions\",\n                \"deprecated_param_value\": \"test\",\n                \"default_param_value\": \"test\",\n                \"values\": []\n            };\n            versionsParam[\"values\"] = [];\n            for (const version of this.props.codeVersions) {\n                versionsParam[\"values\"].push({\"name\": version, \"uuid\": version, \"number_of_tasks\": {[version]: [null, []]}});\n            }\n        }\n\n        return (\n            <div className=\"param-filter\">\n                {versionsParam !== null &&\n                    <ParamFilterParam\n                        param={versionsParam}\n                        useTemplateFields={this.props.useTemplateFields}\n                        toggleSelection={this.props.toggleSelection}\n                        selectedParamValues={this.props.selectedParamValues}\n                        getParamValueArg={this.getParamValueArg}\n                        selectMultiple={this.props.selectMultiple}\n                        expanded={\"versions\" === this.state.expandedParam}\n                        toggleExpandedParam={this.toggleExpandedParam}\n                        onParamValueArgChange={this.onParamValueArgChange}\n                        />\n                }\n                {tagsParam !== null &&\n                    <ParamFilterParam\n                        param={tagsParam}\n                        useTemplateFields={this.props.useTemplateFields}\n                        toggleSelection={this.props.toggleSelection}\n                        selectedParamValues={this.props.selectedParamValues}\n                        getParamValueArg={this.getParamValueArg}\n                        selectMultiple={this.props.selectMultiple}\n                        expanded={\"tags\" === this.state.expandedParam}\n                        toggleExpandedParam={this.toggleExpandedParam}\n                        onParamValueArgChange={this.onParamValueArgChange}\n                        />\n                }\n                {Object.keys(this.props.paramsByGroup).sort((a, b) => a.localeCompare(b)).map((group) => (\n                    <div key={group} className=\"param-group\">\n                        {group !== \"\" &&\n                        <div className=\"group-header\" onClick={() => this.toggleHideParamValues()}>\n                            <div className=\"title\">{group}</div>\n                        </div>\n                        }\n                        <div className=\"params\">\n                            <div className=\"params\">\n                                {this.props.paramsByGroup[group].sort((a, b) => a.name.localeCompare(b.name)).filter(param => param.values.length > 0).map(param => (\n                                    <ParamFilterParam\n                                        param={param}\n                                        useTemplateFields={this.props.useTemplateFields}\n                                        toggleSelection={this.props.toggleSelection}\n                                        selectedParamValues={this.props.selectedParamValues}\n                                        getParamValueArg={this.getParamValueArg}\n                                        selectMultiple={this.props.selectMultiple}\n                                        expanded={param.uuid === this.state.expandedParam}\n                                        toggleExpandedParam={this.toggleExpandedParam}\n                                        onParamValueArgChange={this.onParamValueArgChange}\n                                        />\n                                ))}\n                            </div>\n                        </div>\n                    </div>\n                ))}\n            </div>\n        );\n    }\n}\n\nexport default ParamFilter;","import React from 'react';\nimport Param from \"./Param\";\n\nclass ParamGroup extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hideParamValue: false\n        };\n\n        this.toggleHideParamValues = this.toggleHideParamValues.bind(this);\n    }\n\n    toggleHideParamValues() {\n        this.setState({\n            hideParamValue: !this.state.hideParamValue\n        });\n    }\n\n  render() {\n        return (\n            <li className=\"item item-param\">\n                {this.props.group !== \"\"  &&\n                    <div className=\"group-header\" onClick={() => this.toggleHideParamValues()}>\n                        <div className=\"title\">{this.props.group}</div>\n                    </div>\n                }\n                {!this.state.hideParamValue &&\n                    <ul>\n                        {this.props.params.sort((a, b) => a.name.localeCompare(b.name)).map(param => (\n                            <Param\n                                key={param.uuid}\n                                param={param}\n                                editParamFunc={this.props.editParamFunc}\n                                editParamValueFunc={this.props.editParamValueFunc}\n                                newParamValueFunc={this.props.newParamValueFunc}\n                            />\n                        ))}\n                </ul>\n                }\n            </li>\n        );\n    }\n}\n\nexport default ParamGroup;","import React from 'react';\nimport ConfigEditor from \"./ConfigEditor\";\n\nclass ParamSelection extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            dialogOpen: false,\n            selectedParams: []\n        };\n\n        this.configEditor = React.createRef();\n        this.openDialog = this.openDialog.bind(this);\n        this.closeDialog = this.closeDialog.bind(this);\n        this.selectParam = this.selectParam.bind(this);\n        this.sendSelection = this.sendSelection.bind(this);\n    }\n\n    selectParam(param) {\n        if (this.props.selectMultiple) {\n             let selectedParams = this.state.selectedParams.slice();\n\n             let index = selectedParams.indexOf(param);\n             if (index === -1) {\n                 selectedParams.push(param);\n             } else {\n                 selectedParams.splice(index, 1);\n             }\n\n             this.setState({selectedParams: selectedParams});\n        } else {\n            this.props.onSelect(param);\n            this.closeDialog();\n        }\n    }\n\n    openDialog() {\n        this.setState({\n            dialogOpen: true,\n            device: (this.props.devices ? this.props.devices[0].uuid : null),\n            selectedParams: []\n        });\n    }\n\n    closeDialog() {\n        this.setState({\n            dialogOpen: false\n        });\n    }\n\n    sendSelection() {\n        this.props.onSelect(this.state.selectedParams);\n        this.closeDialog();\n    }\n\n    render() {\n        if (this.state.dialogOpen) {\n            return (\n                <div className=\"prompt-wrapper\">\n                    <div className= {this.props.paramEditor ? 'prompt param-prompt' : 'prompt'} style={{\"width\": \"300px\"}}>\n                        <div className=\"prompt-header\">{this.props.header}</div>\n                            <div className=\"param-filter\">\n                                {Object.keys(this.props.paramsByGroup).sort((a, b) => a.localeCompare(b)).map((group) => (\n                                    <div key={group} className=\"param-group\">\n                                        {group !== \"\" &&\n                                        <div className=\"group-header\" >\n                                            <div className=\"title\">{group}</div>\n                                        </div>\n                                        }\n                                        <div className=\"params\">\n                                            <div className=\"params\">\n                                                {this.props.paramsByGroup[group].sort((a, b) => a.name.localeCompare(b.name)).filter(param => param.values.length > 0).map(param => (\n                                                    <div key={param.uuid} className=\"param\">\n                                                        <div className={\"param-name param-name-collapsed \" + (this.state.selectedParams.indexOf(param) !== -1 ? \" param-name-selected\" : \"\")} onClick={() => this.selectParam(param)}>\n                                                            {param.name}\n                                                        </div>\n                                                    </div>\n                                                ))}\n                                            </div>\n                                        </div>\n                                    </div>\n                                ))}\n                            </div>\n                            {this.props.selectMultiple &&\n                                <div className=\"buttons\">\n                                    <div onClick={this.sendSelection}>Ok</div>\n                                    <div onClick={this.closeDialog}>Cancel</div>\n                                </div>\n                            }\n                        </div>\n                    </div>\n            );\n        } else {\n            return \"\";\n        }\n    }\n}\n\nexport default ParamSelection;","import React from 'react';\nimport Param from \"./Param\";\nimport ParamEditor from \"./ParamEditor\";\nimport ParamValueEditor from \"./ParamValueEditor\";\nimport ParamBatchEditor from \"./ParamBatchEditor\";\nimport ParamGroup from \"./ParamGroup\";\n\nclass ParamTab extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            showAbstract: true\n        };\n        this.toggleShowAbstract = this.toggleShowAbstract.bind(this);\n        this.addParam = this.addParam.bind(this);\n        this.addParamBatch = this.addParamBatch.bind(this);\n        this.closeEditors = this.closeEditors.bind(this);\n        this.reorderParam = this.reorderParam.bind(this);\n        this.onChangeForceParamInName = this.onChangeForceParamInName.bind(this);\n        this.paramEditor = React.createRef();\n        this.paramBatchEditor = React.createRef();\n        this.paramValueEditor = React.createRef();\n    }\n\n    toggleShowAbstract() {\n        this.setState({\n          showAbstract: !this.state.showAbstract,\n        });\n    }\n\n    closeEditors() {\n        this.paramEditor.current.close();\n        this.paramBatchEditor.current.close();\n        this.paramValueEditor.current.close();\n    }\n\n    addParam() {\n        this.paramEditor.current.new();\n    }\n\n    addParamBatch() {\n        this.paramBatchEditor.current.open();\n    }\n\n    addParamValue(param) {\n        this.paramValueEditor.current.new(param);\n    }\n\n    reorderParam(param_uuid, target_param) {\n        fetch(\"/reorder_param/\" + param_uuid + \"/\" + target_param.sorting)\n            .then(res => res.json())\n            .then(\n                (result) => {\n\n                },\n                (error) => {\n\n                }\n            );\n    }\n\n    onChangeForceParamInName(e, param_uuid) {\n          fetch(\"/force_param/\" + param_uuid + \"/\" + (e.target.checked ? \"1\": \"0\"))\n            .then(res => res.json())\n            .then(\n                (result) => {\n\n                },\n                (error) => {\n\n                }\n            );\n    }\n\n    render() {\n        return (\n            <div className=\"tab\" style={{'display': (this.props.active ? 'flex' : 'none')}}>\n                <ul className=\"params-tab\" >\n                    {this.props.paramSortingMode ?\n                        this.props.params.sort((a, b) => a.sorting - b.sorting).map((param) => (\n                            <Param\n                                key={param.uuid}\n                                param={param}\n                                sortMode={true}\n                                reorderParam={this.reorderParam}\n                                forceInName={param.force}\n                                onChangeForceParamInName={this.onChangeForceParamInName}\n                            />\n                        ))\n                        :\n                        Object.keys(this.props.paramsByGroup).sort((a, b) => a.localeCompare(b)).map((group) => (\n                            <ParamGroup\n                                key={group}\n                                params={this.props.paramsByGroup[group]}\n                                group={group}\n                                sorting={this.props.sorting[0]}\n                                sortingDescending={this.props.sorting[1]}\n                                editParamFunc={this.paramEditor.current.open}\n                                editParamValueFunc={this.paramValueEditor.current.open}\n                                newParamValueFunc={this.paramValueEditor.current.new}\n                            />\n                        ))\n                    }\n                </ul>\n                <ParamEditor ref={this.paramEditor} closeEditors={this.closeEditors} />\n                <ParamValueEditor ref={this.paramValueEditor} closeEditors={this.closeEditors} />\n                <ParamBatchEditor ref={this.paramBatchEditor} closeEditors={this.closeEditors} />\n                <div className=\"tab-toolbar\">\n                    <label>\n                        <input type=\"checkbox\" defaultChecked={this.state.showAbstract} onChange={this.toggleShowAbstract} />\n                        <span>Show abstract parameter values</span>\n                    </label>\n                    <div className=\"buttons\">\n                        <div onClick={this.addParam}>Add parameter</div>\n                        <div onClick={this.addParamBatch}>Add batch</div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n\nexport default ParamTab;\n","import React from 'react';\nimport ReassuringPrompt from \"./ReassuringPrompt\";\n\nclass ParamValue extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.reassuringRemovePromptRefs = React.createRef();\n    }\n\n    render() {\n        return (\n            <li className={this.props.paramValue.abstract ? \"item item-abstract item-param-value\" : \"item item-param-value\"}>\n                <div className=\"content\">\n                    <div className=\"title\">{this.props.paramValue.name}</div>\n                    <div className=\"footer\">\n                        {this.props.paramValue.base !== \"\" ? <span><span>Inherits from:</span> {this.props.paramValue.base}</span> : <span>-</span>}\n                        <span><span>Created:</span> {this.props.paramValue.creation_time.toShortStr()}</span>\n                    </div>\n                </div>\n                <div className=\"toolbar\">\n                    <div className=\"action\" onClick={() => this.props.editFunc(this.props.paramValue, true, this.props.param, this.props.param.values)} title=\"Clone parameter value\">\n                        <i className=\"far fa-copy\"></i>\n                    </div>\n                    <div className=\"action\" onClick={() => this.props.editFunc(this.props.paramValue, false, this.props.param, this.props.param.values)} title=\"Edit parameter value\">\n                        <i className=\"fa fa-edit\"></i>\n                    </div>\n                    <div className=\"dropdown\">\n                        <div className=\"action dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                            <i className=\"fas fa-ellipsis-h\"></i>\n                        </div>\n                        <div className=\"dropdown-menu\">\n                            {this.props.removable ?\n                                <div className=\"action\" onClick={() => this.reassuringRemovePromptRefs.current.openDialog()} title=\"Remove parameter value\">\n                                    <i className=\"far fa-trash-alt\"></i>\n                                </div>\n                                :\n                                <div className=\"action action-disabled\" title=\"Parameter value cannot be removed, as there are tasks using it.\">\n                                    <i className=\"far fa-trash-alt\"></i>\n                                </div>\n                            }\n                        </div>\n                    </div>\n                </div>\n                <ReassuringPrompt ref={this.reassuringRemovePromptRefs} header=\"Really want to delete?\" text=\"Do you really want to remove this parameter value?\" url={\"/remove_param_value/\" + this.props.paramValue.uuid}/>\n            </li>\n        );\n    }\n}\n\nexport default ParamValue;","import React from 'react';\nimport ConfigEditor from \"./ConfigEditor\";\n\nclass ParamValueEditor extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            paramValue: null,\n            name: '',\n            base: '',\n            abstract: false,\n            dynamic: false,\n            forceDynamic: false,\n            possible_base_param_values: [],\n            uuid_to_load: null,\n            param: null,\n            templateDefaults: \"\",\n            templateDeprecated: \"\"\n        };\n\n        this.configEditor = React.createRef();\n        this.open = this.open.bind(this);\n        this.close = this.close.bind(this);\n        this.save = this.save.bind(this);\n        this.new = this.new.bind(this);\n        this.onNameChange = this.onNameChange.bind(this);\n        this.onBaseChange = this.onBaseChange.bind(this);\n        this.onAbstractChange = this.onAbstractChange.bind(this);\n        this.onDynamicChange = this.onDynamicChange.bind(this);\n        this.onIsBaseDynamic = this.onIsBaseDynamic.bind(this);\n        this.onTemplateChange = this.onTemplateChange.bind(this);\n        this.onTemplateDefaultsChange = this.onTemplateDefaultsChange.bind(this);\n        this.onTemplateDeprecatedChange = this.onTemplateDeprecatedChange.bind(this);\n    }\n\n    open(paramValue, duplicate, param, possible_base_param_values) {\n        this.props.closeEditors();\n        if (duplicate) {\n            this.setState({\n                paramValue: {name: paramValue.name},\n                name: paramValue.name,\n                base: paramValue.base_uuid,\n                uuid_to_load: paramValue.uuid,\n                abstract: paramValue.abstract,\n                dynamic: paramValue.dynamic,\n                template: paramValue.isTemplate,\n                templateDefaults: paramValue.template_defaults,\n                templateDeprecated: paramValue.template_deprecated,\n                forceDynamic: false,\n                param: param,\n                possible_base_param_values: possible_base_param_values\n            });\n        } else {\n            this.setState({\n                paramValue: paramValue,\n                name: paramValue.name,\n                base: paramValue.base_uuid,\n                uuid_to_load: paramValue.uuid,\n                abstract: paramValue.abstract,\n                dynamic: paramValue.dynamic,\n                template: paramValue.isTemplate,\n                templateDefaults: paramValue.template_defaults,\n                templateDeprecated: paramValue.template_deprecated,\n                forceDynamic: false,\n                param: param,\n                possible_base_param_values: possible_base_param_values\n            });\n        }\n    }\n\n    new(param, possible_base_param_values) {\n        this.props.closeEditors();\n        this.setState({\n            paramValue: {name: 'New parameter value'},\n            name: '',\n            base: '',\n            abstract: false,\n            dynamic: false,\n            uuid_to_load: null,\n            forceDynamic: false,\n            param: param,\n            possible_base_param_values: possible_base_param_values\n        });\n    }\n\n    close() {\n        this.setState({\n            paramValue: null\n        });\n    }\n\n    save() {\n\n        var data = new FormData();\n\n        var dataJson = {};\n        if (this.state.name !== \"\")\n            dataJson['name'] = this.state.name;\n        if (this.state.base !== '')\n            dataJson['base'] = this.state.base;\n        if (this.state.abstract)\n            dataJson['abstract'] = this.state.abstract;\n        if (this.state.dynamic)\n            dataJson['dynamic'] = this.state.dynamic;\n        if (this.state.template) {\n            dataJson['isTemplate'] = this.state.template;\n            dataJson['template_defaults'] = this.state.templateDefaults;\n            dataJson['template_deprecated'] = this.state.templateDeprecated;\n        }\n        dataJson['config'] = this.configEditor.current.state.config;\n\n        data.append(\"data\", JSON.stringify(dataJson));\n\n        var url = \"\";\n        if (this.state.paramValue.uuid)\n            url = \"/edit_param_value/\" + this.state.param.uuid + \"/\" + this.state.paramValue.uuid;\n        else\n            url = \"/add_param_value/\" + this.state.param.uuid;\n\n        fetch(url,\n            {\n                method: \"POST\",\n                body: data\n            })\n            .then(res => res.json())\n            .then(\n                (result) => {\n\n                },\n                (error) => {\n\n                }\n            );\n\n        this.close();\n    }\n\n    onNameChange(event) {\n        this.setState({\n            name: event.target.value\n        });\n    }\n\n    onBaseChange(event) {\n        this.setState({\n            base: event.target.value\n        });\n    }\n\n    onAbstractChange(event) {\n        this.setState({\n            abstract: event.target.checked\n        });\n    }\n\n    onDynamicChange(event) {\n        this.setState({\n            dynamic: event.target.checked\n        });\n    }\n\n    onIsBaseDynamic(isDynamic) {\n        if (isDynamic) {\n            this.setState({\n                dynamic: true,\n                forceDynamic: true\n            });\n        } else if (this.state.forceDynamic) {\n            this.setState({\n                dynamic: false,\n                forceDynamic: false\n            });\n        }\n    }\n\n    onTemplateChange(event) {\n        this.setState({\n            template: event.target.checked\n        });\n    }\n\n    onTemplateDefaultsChange(event) {\n        this.setState({\n            templateDefaults: [event.target.value]\n        });\n    }\n\n    onTemplateDeprecatedChange(event) {\n        this.setState({\n            templateDeprecated: [event.target.value]\n        });\n    }\n\n    render() {\n        if (this.state.paramValue !== null) {\n            return (\n                <div className=\"param-value-editor editor\" >\n                    <div className=\"header\">{this.state.paramValue.name}</div>\n                    <div className=\"field\">\n                        <label>Name:</label>\n                        <input value={this.state.name} onChange={this.onNameChange}  required=\"required\" />\n                    </div>\n                    <div className=\"field\">\n                        <label>Base:</label>\n                        <select value={this.state.base} onChange={this.onBaseChange}>\n                            <option value=\"\">None</option>\n                            {this.state.possible_base_param_values.filter(value => value.uuid !== this.state.uuid_to_load).map(paramValue => (\n                                <option value={paramValue.uuid}>{paramValue.name}</option>\n                            ))}\n                        </select>\n                    </div>\n                    <div className=\"field\">\n                        <label>Abstract:</label>\n                        <input checked={this.state.abstract} onChange={this.onAbstractChange} type=\"checkbox\" />\n                    </div>\n                    <div className=\"field\">\n                        <label>Dynamic:</label>\n                        <input checked={this.state.dynamic} onChange={this.onDynamicChange} type=\"checkbox\" disabled={this.state.forceDynamic} />\n                    </div>\n                    <div className=\"field\">\n                        <label>Template:</label>\n                        <input checked={this.state.template} onChange={this.onTemplateChange} type=\"checkbox\" />\n                    </div>\n                    {this.state.template &&\n                    <div className=\"field\">\n                        <label>Template default:</label>\n                        <input value={this.state.templateDefaults[0]} onChange={this.onTemplateDefaultsChange} />\n                    </div> }\n                    {this.state.template &&\n                    <div className=\"field\">\n                        <label>Template deprecated:</label>\n                        <input value={this.state.templateDeprecated[0]} onChange={this.onTemplateDeprecatedChange} />\n                    </div> }\n                    <ConfigEditor ref={this.configEditor} onDynamicChange={this.onIsBaseDynamic} url={\"/config/param_value\" + (this.state.uuid_to_load !== null ? \"/\" + this.state.uuid_to_load : \"\")} bases={[this.state.base]}/>\n                    <div className=\"buttons\">\n                        <div onClick={this.save}>Save</div>\n                        <div onClick={this.close}>Cancel</div>\n                    </div>\n                </div>\n            );\n        } else {\n            return \"\";\n        }\n    }\n}\n\nexport default ParamValueEditor;","import React from 'react';\nimport ParamFilter from \"./ParamFilter\";\nimport ParamSelection from \"./ParamSelection\";\nimport Param from \"./Param\";\n\n\nclass Column extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {};\n\n        this.colRef = React.createRef();\n        this.onDragStart = this.onDragStart.bind(this);\n        this.onDrop = this.onDrop.bind(this);\n        this.onDragEnter = this.onDragEnter.bind(this);\n        this.onDragLeave = this.onDragLeave.bind(this);\n        this.onDragOver = this.onDragOver.bind(this);\n        this.getClassName = this.getClassName.bind(this);\n        this.dragEnterCounter = 0\n    }\n\n    getClassName() {\n        return this.props.isDummy ? \"table-col-dummy\" : \"table-col-entry\";\n    }\n\n    onDragStart(e) {\n        e.dataTransfer.setData(\"text/plain\", this.props.col);\n    }\n\n    onDragOver(e) {\n        e.preventDefault();\n    }\n\n    onDrop(e) {\n        if (this.props.allowDrop) {\n            e.preventDefault();\n            this.props.addCol(e.dataTransfer.getData(\"text/plain\"), this.props.col);\n\n            this.dragEnterCounter = 0;\n            this.colRef.current.className = this.getClassName();\n        }\n    }\n\n    onDragEnter(e) {\n        if (this.props.allowDrop) {\n            e.preventDefault();\n            this.colRef.current.className = this.getClassName() + \" on-drag-over\";\n            this.dragEnterCounter++;\n        }\n    }\n\n    onDragLeave(e) {\n        if (this.props.allowDrop) {\n            e.preventDefault();\n            this.dragEnterCounter--;\n            if (this.dragEnterCounter === 0)\n                this.colRef.current.className = this.getClassName();\n        }\n    }\n\n    render() {\n        return (\n            <div className={this.getClassName()} ref={this.colRef} onDragOver={this.onDragOver} onDragLeave={this.onDragLeave} onDragEnter={this.onDragEnter} onDrop={this.onDrop} onDragStart={this.onDragStart} draggable={\"true\"}>\n                {!this.props.isDummy &&\n                <React.Fragment>\n                    <div>{this.props.col}</div>\n                    {this.props.removeCol && <i className=\"fas fa-times\" onClick={() => this.props.removeCol(this.props.col)}></i>}\n                </React.Fragment>\n                }\n            </div>\n        );\n    }\n\n}\n\nclass ParamViewer extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            open: props.open == true,\n            filterSaveName: \"\",\n            viewPath: \"\"\n        };\n\n        this.paramCollapseSelection = React.createRef();\n        this.paramGroupSelection = React.createRef();\n        this.open = this.open.bind(this);\n        this.close = this.close.bind(this);\n        this.saveFilter = this.saveFilter.bind(this);\n        this.deleteFilter = this.deleteFilter.bind(this);\n        this.handleFilterSaveNameChange = this.handleFilterSaveNameChange.bind(this);\n        this.handleViewPathChange = this.handleViewPathChange.bind(this);\n        this.addView = this.addView.bind(this);\n        this.gotoTB = this.gotoTB.bind(this);\n    }\n\n    open() {\n        this.setState({\n            open: true\n        });\n    }\n\n    close() {\n        this.setState({\n            open: false\n        });\n    }\n\n    handleFilterSaveNameChange(event) {\n        this.setState({\n            filterSaveName: event.target.value\n        });\n    }\n\n\n    saveFilter() {\n        if (this.state.filterSaveName !== \"\") {\n            this.props.saveFilter(this.state.filterSaveName);\n        }\n    }\n\n    handleViewPathChange(event) {\n        this.setState({\n            viewPath: event.target.value\n        });\n    }\n\n\n    addView() {\n        if (this.state.viewPath !== \"\") {\n            this.props.addView(this.state.viewPath);\n        }\n    }\n\n    deleteFilter(name) {\n        var data = new FormData();\n        var dataJson = {};\n        dataJson['name'] = name;\n\n        data.append(\"data\", JSON.stringify(dataJson));\n\n        fetch(\"delete_filter\", {\n            method: \"POST\",\n            body: data\n        })\n    }\n\n    deleteView(path) {\n        var data = new FormData();\n        var dataJson = {};\n        dataJson['path'] = path;\n\n        data.append(\"data\", JSON.stringify(dataJson));\n\n        fetch(\"delete_view\", {\n            method: \"POST\",\n            body: data\n        })\n    }\n\n\n    gotoTB(path) {\n        if (!(path in this.props.tensorboard_ports)) {\n            var data = new FormData();\n            var dataJson = {};\n            dataJson['path'] = path;\n\n            data.append(\"data\", JSON.stringify(dataJson));\n\n            fetch(\"/tensorboard\", {\n                method: \"POST\",\n                body: data\n            })\n                .then(res => res.json())\n                .then(\n                    (result) => {\n                        window.open(\"//\" + window.location.hostname + \":\" + result.port, '_blank');\n                    },\n                    (error) => {\n\n                    }\n                )\n        } else {\n            window.open(\"//\" + window.location.hostname + \":\" + this.props.tensorboard_ports[path], '_blank');\n        }\n    }\n\n    render() {\n        if (this.state.open) {\n            return (\n                <div className=\"param-viewer slide-editor editor\" style={this.props.style}>\n                    <div className=\"header\">Save / Load{this.props.allowClose && <i className=\"fas fa-times\" onClick={this.close}></i>}</div>\n                    <div className=\"params-to-group param-filter\">\n                        {Object.keys(this.props.saved_filters).map(savedFilterName => (\n                            <div className=\"param-name param-name-collapsed\">\n                                <div onClick={() => this.props.loadFilter(this.props.saved_filters[savedFilterName])}>\n                                    {savedFilterName}\n                                </div>\n                                <i className=\"fas fa-times\" onClick={() => this.deleteFilter(savedFilterName)}></i>\n                            </div>\n                        ))}\n                    </div>\n                    <input type=\"text\" name=\"filterSaveName\" value={this.state.filterSaveName} onChange={this.handleFilterSaveNameChange}/>\n                    <div className=\"buttons\">\n                        <div onClick={this.saveFilter}>Save</div>\n                    </div>\n\n                    {!this.props.hideViews &&\n                    <React.Fragment>\n                        <div className=\"header\">Filesystem</div>\n                        <div className=\"params-to-group param-filter\">\n                            {Object.keys(this.props.views).map(path => (\n                                <div className=\"param-name param-name-collapsed\">\n                                    <div onClick={() => this.props.loadFilter(this.props.views[path])}>\n                                        {path}\n                                    </div>\n                                    <div style={{\"flex\": \"2 1 auto\"}}></div>\n                                    <div id=\"tb-link\" onClick={() => this.gotoTB(path)} title=\"Start and open tensorboard\">TB</div>\n                                    <i className=\"fas fa-times\" onClick={() => this.deleteView(path)}></i>\n                                </div>\n                            ))}\n                        </div>\n                        <input type=\"text\" name=\"viewPath\" value={this.state.viewPath} onChange={this.handleViewPathChange}/>\n                        <div className=\"buttons\">\n                            <div onClick={this.addView}>Add</div>\n                        </div>\n                    </React.Fragment>\n                    }\n\n                    <div className=\"header\">Filter</div>\n                    <ParamFilter tags={this.props.tags} codeVersions={this.props.codeVersions} selectMultiple={true} paramsByGroup={this.props.paramsByGroup} selectedParamValues={this.props.selectedParamValues} toggleSelection={this.props.toggleSelection}/>\n\n                    <div className=\"header\">Collapsing</div>\n                    <div className=\"params-to-collapse param-filter\">\n                        {this.props.collapsedParams.map(param_uuid => this.props.params.find(p => p.uuid === param_uuid)).map(param => (\n                            <div className=\"param-name param-name-collapsed\">{param.name} <i className=\"fas fa-times\" onClick={() => this.props.removeParamCollapse(param)}></i></div>\n                        ))}\n                    </div>\n                    <div style={{\"display\": \"flex\", \"align-items\": \"center\"}}>\n                        <label>Sorting:</label>\n                        <select value={this.props.collapseSorting[0]} onChange={this.props.onChangeCollapseSorting}>\n                            <option value=\"saved\">Saved</option>\n                            <option value=\"name\">Name</option>\n                            <option value=\"created\">Created</option>\n                            <option value=\"iterations\">Iterations</option>\n                            {this.props.metric_superset.map(col => (\n                                <option value={col}>{col}</option>\n                            ))}\n                        </select>\n                        <span style={{\"margin-left\": \"5px\", \"cursor\": \"pointer\"}} onClick={this.props.flipCollapseSortingDirection} className={this.props.collapseSorting[1] ? \"fa fa-sort-amount-down\" : \"fa fa-sort-amount-up\"}></span>\n                    </div>\n\n                    <ParamSelection header=\"Select param to collapse\" ref={this.paramCollapseSelection} paramsByGroup={this.props.paramsByGroup} onSelect={this.props.addParamCollapse}/>\n                    <div className=\"buttons\">\n                        <div onClick={() => this.paramCollapseSelection.current.openDialog()}>Add</div>\n                    </div>\n\n                    <div className=\"header\">Grouping</div>\n\n                    <div className=\"params-to-group param-filter\">\n                        {this.props.groupedParams.map(params => (\n                            <div className=\"param-name param-name-collapsed\">\n                                {params.map(param_uuid => this.props.params.find(p => p.uuid === param_uuid)).map(param => param.name).join(\" / \")}\n                                <i className=\"fas fa-times\" onClick={() => this.props.removeParamGroup(params)}></i>\n                            </div>\n                        ))}\n                    </div>\n                    <ParamSelection header=\"Select params to group\" selectMultiple={true} ref={this.paramGroupSelection} paramsByGroup={this.props.paramsByGroup} onSelect={this.props.addParamGroup}/>\n                    <div className=\"buttons\">\n                        <div onClick={() => this.paramGroupSelection.current.openDialog()}>Add</div>\n                    </div>\n\n                    <div className=\"header\">Parameter sorting</div>\n                    <div style={{\"display\": \"flex\", \"align-items\": \"center\", \"margin-top\": \"10px\"}}>\n                        <label>Version:</label>\n                        <select value={this.props.versionInName} onChange={this.props.onChangeVersionInName}>\n                            <option value=\"none\">None</option>\n                            <option value=\"commit_id\">Commit id</option>\n                            <option value=\"label\">Label</option>\n                        </select>\n                    </div>\n                    <div className=\"params-to-collapse param-filter\">\n                        <ul className=\"params-tab\">\n                            {this.props.params.sort((a, b) => this.props.paramSorting[a.uuid] - this.props.paramSorting[b.uuid]).map((param) => (\n                                <Param\n                                    key={param.uuid}\n                                    param={param}\n                                    sortMode={true}\n                                    reorderParam={this.props.reorderParam}\n                                    forceInName={param.uuid in this.props.forceParamInName && this.props.forceParamInName[param.uuid]}\n                                    onChangeForceParamInName={this.props.onChangeForceParamInName}\n                                />\n                            ))}\n                        </ul>\n                    </div>\n\n                    {this.props.selectedCols !== undefined &&\n                    <React.Fragment>\n                        <div className=\"header\">Columns</div>\n                        <div className=\"table-cols\">\n                            <div className=\"table-col\">\n                                <div className=\"table-col-header\">Used:</div>\n                                {this.props.selectedCols.map(col => (\n                                    <Column\n                                        col={col}\n                                        allowDrop={true}\n                                        removeCol={this.props.removeCol}\n                                        addCol={this.props.addCol}\n                                    />\n                                ))}\n                                <Column\n                                    col={null}\n                                    allowDrop={true}\n                                    removeCol={this.props.removeCol}\n                                    addCol={this.props.addCol}\n                                    isDummy={true}\n                                />\n                            </div>\n                            <div className=\"table-col\">\n                                <div className=\"table-col-header\">Not used:</div>\n                                {this.props.allCols.filter(col => (this.props.selectedCols.findIndex(x => x === col) === -1)).map(col => (\n                                    <Column\n                                        col={col}\n                                    />\n                                ))}\n                            </div>\n                        </div>\n                    </React.Fragment>\n                    }\n                </div>\n            );\n        } else {\n            return \"\";\n        }\n    }\n}\n\nexport default ParamViewer;","import React from 'react';\nimport Prompt from \"./Prompt\";\nimport {TaskName} from \"./Task\";\nimport State from \"./Global\";\nimport ReassuringPrompt from \"./ReassuringPrompt\";\nimport GroupedTasks from \"./GroupedTasks\";\n\nclass PausedTask extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.reassuringRemovePromptRefs = React.createRef();\n        this.itemRef = React.createRef();\n        this.promptExtraRefs = React.createRef();\n        this.openExtraDialog = this.openExtraDialog.bind(this);\n        this.finish = this.finish.bind(this);\n        this.openLog = this.openLog.bind(this);\n        this.clone = this.clone.bind(this);\n        this.pause = this.pause.bind(this);\n        this.queueCancel = this.queueCancel.bind(this);\n    }\n\n    openExtraDialog() {\n        this.promptExtraRefs.current.openDialog();\n    }\n\n\n    finish() {\n        fetch(\"/finish/\" + this.props.task.uuid)\n            .then(res => res.json())\n            .then(\n                (result) => {\n\n                },\n                (error) => {\n\n                }\n            )\n    }\n\n    openLog() {\n        window.open(\"/log/\" + this.props.task.uuid, '_blank');\n    }\n\n    clone() {\n        fetch(\"/clone_task/\" + this.props.task.uuid)\n            .then(res => res.json())\n            .then(\n                (result) => {\n\n                },\n                (error) => {\n\n                }\n            )\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        /*if (prevProps.highlight !== this.props.highlight && this.props.highlight) {\n            this.itemRef.current.scrollIntoView({\n              behavior: 'smooth',\n              block: 'start',\n            });\n        }*/\n    }\n\n    componentDidMount() {\n        /*if (this.props.highlight) {\n            this.itemRef.current.scrollIntoView({\n              behavior: 'smooth',\n              block: 'start',\n            });\n        }*/\n        if (this.props.task === null) {\n            fetch(\"/task_details/\" + this.props.uuid)\n                .then(res => res.json())\n                .then(\n                    (result) => {\n                    }\n                )\n        }\n    }\n\n    itemClass() {\n        let classname = \"item item-task \";\n        if (this.props.highlight)\n            classname += \"item-highlight \";\n        if (this.props.task.state === State.RUNNING)\n            classname += \"task-running \";\n        else if (this.props.task.state === State.QUEUED)\n            classname += \"task-queued \";\n        if (this.props.collapsed)\n            classname += \"item-task-collapsed \";\n        return classname;\n    }\n\n    pause() {\n        fetch(\"/pause/\" + this.props.task.uuid)\n            .then(res => res.json())\n            .then(\n                (result) => {\n\n                },\n                (error) => {\n\n                }\n            )\n    }\n\n\n    queueCancel() {\n        fetch(\"/cancel/\" + this.props.task.uuid)\n            .then(res => res.json())\n            .then(\n                (result) => {\n\n                },\n                (error) => {\n\n                }\n            )\n    }\n\n    createCheckpoint() {\n        fetch(\"/create_checkpoint/\" + this.props.task.uuid)\n            .then(res => res.json())\n            .then(\n                (result) => {\n\n                },\n                (error) => {\n\n                }\n            )\n    }\n\n\n    render() {\n        if (this.props.task !== null) {\n            return (\n                <li ref={this.itemRef} className={this.itemClass()}>\n                    <div className=\"content\">\n                        <div className=\"title\"><span className=\"try-number\">{this.props.name[this.props.name.length - 1]}</span><TaskName name={this.props.name.slice(0, -1)} is_test={this.props.task.is_test}/></div>\n                        <div className=\"footer\">\n                            <span><span>Iterations:</span> {this.props.task.finished_iterations} / {this.props.task.total_iterations}</span>\n                            <span><span>Created:</span> {this.props.task.creation_time.toShortStr()}</span>\n                            <span><span>Last saved:</span> {this.props.task.saved_time.toShortStr()} {this.props.task.had_error == true && <span className=\"task-error\">(Error)</span>}</span>\n                            {[\"name\", \"saved\", \"created\", \"iterations\", \"started\"].findIndex(x => x === this.props.detailCol) === -1 &&\n                            <span><span>{this.props.detailCol}:</span> {this.props.detailCol in this.props.metrics ? this.props.metrics[this.props.detailCol][2].toFixed(2) : \"N/A\"}</span>\n                            }\n                        </div>\n                        <div className=\"tags\">\n                            {this.props.task.tags.map(tag => (\n                                <div>{tag}</div>\n                            ))}\n                        </div>\n                    </div>\n                    <div className=\"toolbar\">\n                        {\n                            this.props.task.state === State.RUNNING ?\n                                <div className=\"action\" onClick={this.pause} title=\"Pause task\">\n                                    <i className=\"fa fa-pause\"></i>\n                                </div>\n                                :\n\n                                this.props.task.state === State.QUEUED ?\n                                    <div className=\"action\" onClick={this.queueCancel} title=\"Remove this task from queue\">\n                                        <i className=\"fas fa-times\"></i>\n                                    </div>\n                                    :\n                                    <div className=\"action\" onClick={this.openExtraDialog} title=\"Run for more iterations\">\n                                        <i className=\"fa fa-play\"></i>\n                                    </div>\n\n                        }\n                        <div className=\"action\" onClick={() => this.props.showTask(this.props.task.uuid)} title=\"Show detail information\">\n                            <i className=\"fa fa-info\"></i>\n                        </div>\n                        <div className=\"dropdown\">\n                            <div className=\"action dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                                <i className=\"fas fa-ellipsis-h\"></i>\n                            </div>\n                            <div className=\"dropdown-menu\">\n                                <div className=\"action\" onClick={() => this.props.rerunTask(this.props.task)} title=\"Run new task with the exact same config\">\n                                    <i className=\"fa fa-redo\"></i>\n                                </div>\n                                {!this.props.task.is_test &&\n                                <div className=\"action\" onClick={() => this.props.filterLikeTask(this.props.task)} title=\"Filter for similar tasks\">\n                                    <i className=\"fas fa-sliders-h\"></i>\n                                </div>\n                                }\n                                <div className=\"action\" onClick={this.clone} title=\"Clone task\">\n                                    <i className=\"far fa-copy\"></i>\n                                </div>\n                                <div className=\"action\" onClick={this.openLog} title=\"View log\">\n                                    <i className=\"far fa-file-alt\"></i>\n                                </div>\n                                <div className=\"action\" onClick={() => this.createCheckpoint()} title=\"Create checkpoint\">\n                                    <i className=\"far fa-flag\"></i>\n                                </div>\n                                {this.props.task.state !== State.RUNNING && this.props.task.state !== State.QUEUED &&\n                                <div className=\"action\" onClick={() => this.reassuringRemovePromptRefs.current.openDialog()} title=\"Remove task\">\n                                    <i className=\"far fa-trash-alt\"></i>\n                                </div>\n                                }\n\n                            </div>\n                        </div>\n                    </div>\n                    <Prompt ref={this.promptExtraRefs} devices={this.props.devices} defaultValue={this.props.task.total_iterations} header=\"Change total iterations?\" text=\"Specify the new number of iterations, you want the task to run:\" url={\"/continue/\" + this.props.task.uuid}/>\n                    <ReassuringPrompt ref={this.reassuringRemovePromptRefs} header=\"Really want to delete?\" text=\"Do you really want to remove this task?\" url={\"/remove_task/\" + this.props.task.uuid}/>\n                </li>\n            );\n        } else {\n            return (\n                <li ref={this.itemRef} className=\"item item-task item-task-loading\">\n                    Loading...\n                </li>\n            )\n        }\n    }\n}\n\nexport default PausedTask;","import React from 'react';\nimport ParamTab from \"./ParamTab\";\nimport TaskTab from \"./TaskTab\";\nimport ParamViewer from \"./ParamViewer\";\nimport TaskContainer from \"./TaskContainer\";\n\nclass Project extends TaskContainer {\n    constructor(props) {\n        super(props);\n        this.state = {\n            params: [],\n            paramsByGroup: {},\n            tasks: {},\n            task_lookup: {},\n            activeTab: 0,\n            sorting_tasks: [\"saved\", true],\n            sorting_params: [0, false],\n            selectedParamValues: {},\n            collapsedParams: [],\n            groupedParams: [],\n            paramSortingMode: false,\n            paramSorting: {},\n            collapseSorting: [\"saved\", true],\n            metric_superset: [],\n            taskTabInitialized: false,\n            versionInName: \"label\",\n            showSearchBar: false,\n            searchValue: \"\",\n            forceParamInName: {}\n        };\n\n        this.toggleShowAbstract = this.toggleShowAbstract.bind(this);\n        this.showTab = this.showTab.bind(this);\n        this.onChangeSorting = this.onChangeSorting.bind(this);\n        this.switchSortingDirection = this.switchSortingDirection.bind(this);\n        this.openParamViewer = this.openParamViewer.bind(this);\n        this.toggleParamSortingMode = this.toggleParamSortingMode.bind(this);\n        this.filterLikeTask = this.filterLikeTask.bind(this);\n        this.handleSearchValueChange = this.handleSearchValueChange.bind(this);\n        this.searchBarKeyDown = this.searchBarKeyDown.bind(this);\n        this.onChangeForceParamInName = this.onChangeForceParamInName.bind(this);\n\n        this.addView = this.addView.bind(this);\n        this.paramViewerRef = React.createRef();\n        this.taskTabRef = React.createRef();\n    }\n\n    addView(path) {\n        var data = new FormData();\n        var dataJson = {};\n        dataJson['filter'] = this.state.selectedParamValues;\n        dataJson['collapse'] = this.state.collapsedParams;\n        dataJson['collapse_sorting'] = this.state.collapseSorting;\n        dataJson['group'] = this.state.groupedParams;\n        dataJson['param_sorting'] = this.state.paramSorting;\n        dataJson['sorting_tasks'] = this.state.sorting_tasks;\n        dataJson['path'] = path;\n        dataJson['version_in_name'] = this.state.versionInName;\n        dataJson['force_param_in_name'] = this.state.forceParamInName;\n\n\n        data.append(\"data\", JSON.stringify(dataJson));\n\n        fetch(\"add_view\", {\n            method: \"POST\",\n            body: data\n        })\n    }\n\n\n    toggleShowAbstract() {\n        this.setState({\n            showAbstract: !this.state.showAbstract,\n        });\n    }\n\n    showTab(tab) {\n        this.setState({\n            activeTab: tab,\n            taskTabInitialized: this.state.taskTabInitialized || tab === 1\n        });\n    }\n\n    onChangeSorting(e) {\n        if (this.state.activeTab === 0) {\n            const sorting_params = this.state.sorting_params.slice();\n            sorting_params[0] = parseInt(e.target.value);\n            this.setState({sorting_params: sorting_params});\n        } else {\n            const sorting_tasks = this.state.sorting_tasks.slice();\n            sorting_tasks[0] = e.target.value;\n            this.setState({sorting_tasks: sorting_tasks}, () => this.filterHasUpdated());\n        }\n    }\n\n    switchSortingDirection() {\n        if (this.state.activeTab === 0) {\n            const sorting_params = this.state.sorting_params.slice();\n            sorting_params[1] = !sorting_params[1];\n            this.setState({sorting_params: sorting_params});\n        } else {\n            const sorting_tasks = this.state.sorting_tasks.slice();\n            sorting_tasks[1] = !sorting_tasks[1];\n            this.setState({sorting_tasks: sorting_tasks}, () => this.filterHasUpdated());\n        }\n    }\n\n    filterLikeTask(task) {\n        const selectedParamValues = Object.assign({}, this.state.selectedParamValues);\n\n        for (const param of this.state.params) {\n            let value = this.filterView.getValueToParam(task, param);\n            selectedParamValues[param.uuid] = [[value[0].uuid, ...value[1]]];\n        }\n\n        this.setState({\n            selectedParamValues: selectedParamValues\n        }, () => this.filterHasUpdated());\n        this.openParamViewer();\n    }\n\n\n    openParamViewer() {\n        this.props.closeViewer();\n        this.paramViewerRef.current.open();\n    }\n\n    toggleParamSortingMode() {\n        this.setState({\n            paramSortingMode: !this.state.paramSortingMode\n        });\n    }\n\n    handleSearchValueChange(event) {\n        this.setState({searchValue: event.target.value});\n    }\n\n    searchBarKeyDown(e) {\n        if(e.keyCode === 13 && this.state.searchValue in this.props.repository.tasks){\n            this.props.showTask(this.state.searchValue);\n            this.setState({\n                showSearchBar: false\n            });\n        }\n    }\n\n    onChangeForceParamInName(e, param_uuid) {\n        const forceParamInName = Object.assign({}, this.state.forceParamInName);\n\n        forceParamInName[param_uuid] = e.target.checked;\n\n        this.setState({\n            forceParamInName: forceParamInName\n        }, () => this.filterHasUpdated());\n    }\n\n    render() {\n        return (\n            <div className=\"project\">\n                <div className=\"tabs\">\n                    <div className={this.state.activeTab === 0 ? \"tab-active\" : \"\"} onClick={() => this.showTab(0)}>Parameters</div>\n                    <div className={this.state.activeTab === 1 ? \"tab-active\" : \"\"} onClick={() => this.showTab(1)}>Tasks</div>\n                </div>\n                <div className=\"sorting\">\n                    {this.state.activeTab === 0 &&\n                    <div>\n                        <span onClick={this.toggleParamSortingMode} className={\"fas fa-sort\"}></span>\n                    </div>\n                    }\n                    {this.state.activeTab === 1 &&\n                    <div>\n                        <label>Sorting:</label>\n                        <select value={this.state.sorting_tasks[0]} onChange={this.onChangeSorting}>\n                            <option value=\"saved\">Saved</option>\n                            <option value=\"name\">Name</option>\n                            <option value=\"created\">Created</option>\n                            <option value=\"iterations\">Iterations</option>\n                            {this.state.metric_superset.map(col => (\n                                <option value={col}>{col}</option>\n                            ))}\n                        </select>\n                        <span onClick={this.switchSortingDirection} className={this.state.sorting_tasks[1] ? \"fa fa-sort-amount-down\" : \"fa fa-sort-amount-up\"}></span>\n\n                        <span className=\"fas fa-sliders-h\" onClick={this.openParamViewer}></span>\n\n                        <span className=\"fas fa-sync-alt\" onClick={this.filterHasUpdated}></span>\n                        <span className=\"fas fa-search\" onClick={() => this.setState({showSearchBar: !this.state.showSearchBar, searchValue: \"\"})}></span>\n                    </div>\n                    }\n                </div>\n                {this.state.showSearchBar &&\n                <div className=\"search-bar\">\n                    <span>Search:</span>\n                    <input value={this.state.searchValue} onKeyDown={this.searchBarKeyDown} onChange={this.handleSearchValueChange} />\n                </div>\n                }\n                <ParamTab\n                    active={this.state.activeTab === 0}\n                    paramsByGroup={this.state.paramsByGroup}\n                    sorting={this.state.sorting_params}\n                    paramSortingMode={this.state.paramSortingMode}\n                    params={this.state.params}\n                />\n                <TaskTab\n                    ref={this.taskTabRef}\n                    closeViewer={this.props.closeViewer}\n                    allTags={this.props.allTags}\n                    active={this.state.activeTab === 1}\n                    params={this.state.params}\n                    tasks={this.state.tasks}\n                    selectedParamValues={this.state.selectedParamValues}\n                    showTask={this.props.showTask}\n                    paramsByGroup={this.state.paramsByGroup}\n                    highlightedTask={this.props.highlightedTask}\n                    filterLikeTask={this.filterLikeTask}\n                    devices={this.props.devices}\n                    detailCol={this.state.collapseSorting[0]}\n                    initialized={this.state.taskTabInitialized}\n                />\n                <ParamViewer\n                    ref={this.paramViewerRef}\n                    paramsByGroup={this.state.paramsByGroup}\n                    selectedParamValues={this.state.selectedParamValues}\n                    toggleSelection={this.toggleSelection}\n                    allowClose={true}\n\n                    tags={this.props.allTags}\n                    codeVersions={this.props.codeVersions}\n                    params={this.state.params}\n                    collapsedParams={this.state.collapsedParams}\n                    addParamCollapse={this.addParamCollapse}\n                    removeParamCollapse={this.removeParamCollapse}\n                    groupedParams={this.state.groupedParams}\n                    addParamGroup={this.addParamGroup}\n                    removeParamGroup={this.removeParamGroup}\n                    saveFilter={this.saveFilter}\n                    loadFilter={this.loadFilter}\n                    saved_filters={this.props.saved_filters}\n                    views={this.props.views}\n                    addView={this.addView}\n                    paramSorting={this.state.paramSorting}\n                    reorderParam={this.reorderParam}\n                    metric_superset={this.state.metric_superset}\n                    collapseSorting={this.state.collapseSorting}\n                    onChangeCollapseSorting={this.onChangeCollapseSorting}\n                    flipCollapseSortingDirection={this.flipCollapseSortingDirection}\n                    onChangeVersionInName={this.onChangeVersionInName}\n                    versionInName={this.state.versionInName}\n                    tensorboard_ports={this.props.tensorboard_ports}\n                    forceParamInName={this.state.forceParamInName}\n                    onChangeForceParamInName={this.onChangeForceParamInName}\n                />\n            </div>\n        );\n    }\n}\n\n\nexport default Project;\n","import React from 'react';\nimport Project from \"./Project\";\nimport CodeVersionViewer from \"./CodeVersionViewer\";\nimport TaskViewer from \"./TaskViewer\";\n\nclass ProjectManager extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            codeVersionTree: null,\n            highlightedTask: null,\n            allTags: [],\n            refreshRate: null,\n            detailTaskUuid: null,\n            tensorboard_ports: {}\n        };\n        this.addVersion = this.addVersion.bind(this);\n        this.openTaskViewer = this.openTaskViewer.bind(this);\n        this.openCodeVersionViewer = this.openCodeVersionViewer.bind(this);\n        this.closeViewer = this.closeViewer.bind(this);\n        this.closeTaskViewer = this.closeTaskViewer.bind(this);\n        this.reload = this.reload.bind(this);\n        this.promptRefs = React.createRef();\n        this.projectRef = React.createRef();\n        this.codeVersionViewerRef = React.createRef();\n        this.taskViewerRef = React.createRef();\n\n\n        this.props.evtSource.addEventListener(\"PROJECT_CHANGED\", (e) => {\n            const data = JSON.parse(e.data);\n            this.setState({\n                current_commit_id: data.current_commit_id,\n                saved_filters: data.saved_filters,\n                views: data.views,\n                tensorboard_ports: data.tensorboard_ports,\n                allTags: data.all_tags,\n                refreshRate: parseInt(data.refreshRate),\n                codeVersions: data.code_versions\n            });\n        });\n    }\n\n\n    addVersion() {\n        this.promptRefs.current.openDialog();\n    }\n\n    closeViewer() {\n        this.codeVersionViewerRef.current.close();\n        this.closeTaskViewer();\n        this.projectRef.current.paramViewerRef.current.close();\n        this.projectRef.current.taskTabRef.current.taskEditor.current.close();\n    }\n\n    openTaskViewer(task_uuid) {\n        this.closeViewer();\n        this.setState({\n            detailTaskUuid: task_uuid\n        })\n    }\n    closeTaskViewer(task) {\n        this.setState({\n            detailTaskUuid: null\n        })\n    }\n\n    openCodeVersionViewer(commit_id) {\n        this.closeViewer();\n        this.codeVersionViewerRef.current.open(commit_id);\n    }\n\n    highlightTask(task) {\n        this.setState({\n            highlightedTask: task.uuid\n        });\n        setTimeout(() => {\n            this.setState({\n                highlightedTask: null\n            });\n        }, 1500);\n    }\n\n    reload() {\n        fetch(\"/reload\")\n            .then(res => res.json())\n            .then(\n                (result) => {\n\n                },\n                (error) => {\n\n                }\n            );\n    }\n\n    render() {\n        return (\n            <div id=\"project-manager\">\n                <div id=\"projects-toolbar\">\n                    <span id=\"project-toolbar\">\n                        <div id=\"code-version\" title=\"Add new code version\" onClick={() => this.openCodeVersionViewer(this.state.current_commit_id)}>{this.state.current_commit_id === undefined ? \"\" : this.state.current_commit_id.substr(0,7)}</div>\n                        <div id=\"reload-tasks\" onClick={this.reload} title=\"Reload tasks\">\n                            <i className=\"fas fa-sync-alt\"></i>\n                        </div>\n                        <a id=\"open-table\" href=\"/table\" target=\"_blank\">\n                            <i className=\"fas fa-table\"></i>\n                        </a>\n                    </span>\n                </div>\n                <div id=\"projects\">\n                    {this.state.refreshRate !== null &&\n                        <Project\n                            ref={this.projectRef}\n                            repository={this.props.repository}\n                            showTask={this.openTaskViewer}\n                            closeViewer={this.closeViewer}\n                            highlightedTask={this.state.detailTaskUuid}\n                            devices={this.props.devices}\n                            saved_filters={this.state.saved_filters}\n                            views={this.state.views}\n                            allTags={this.state.allTags}\n                            codeVersions={this.state.codeVersions}\n                            refreshRate={this.state.refreshRate}\n                            tensorboard_ports={this.state.tensorboard_ports}\n                        />\n                    }\n                </div>\n                <CodeVersionViewer\n                    ref={this.codeVersionViewerRef}\n                    updateView={() => this.projectRef.current.filterHasUpdated()}\n                />\n                <TaskViewer ref={this.taskViewerRef} close={this.closeTaskViewer} detailTaskUuid={this.state.detailTaskUuid} repository={this.props.repository} allTags={this.state.allTags} openCodeVersionViewer={this.openCodeVersionViewer} />\n            </div>\n        );\n    }\n}\n\n\nexport default ProjectManager;","import React from 'react';\nimport ConfigEditor from \"./ConfigEditor\";\n\nclass Prompt extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            dialogOpen: false,\n            inputValue: this.props.defaultValue,\n            device: null\n        };\n\n        this.configEditor = React.createRef();\n        this.start = this.start.bind(this);\n        this.openDialog = this.openDialog.bind(this);\n        this.closeDialog = this.closeDialog.bind(this);\n        this.updateInputValue = this.updateInputValue.bind(this);\n        this.onKeyDown = this.onKeyDown.bind(this);\n        this.onChange = this.onChange.bind(this);\n        this.onDeviceChange = this.onDeviceChange.bind(this);\n    }\n\n    start() {\n        this.setState({\n            dialogOpen: false\n        });\n        if (this.props.paramEditor) {\n            var data = new FormData();\n            data.append(\"data\", JSON.stringify(this.configEditor.current.state.config));\n\n            fetch(this.props.url,\n            {\n                method: \"POST\",\n                body: data\n            })\n            .then(res => res.json())\n            .then(\n                (result) => {\n\n                },\n                (error) => {\n\n                }\n            );\n        } else {\n            fetch(this.props.url + (this.props.devices ? \"/\" + this.state.device : \"\") + \"/\" + this.state.inputValue)\n                .then(res => res.json())\n                .then(\n                    (result) => {\n\n                    },\n                    (error) => {\n\n                    }\n                )\n        }\n    }\n\n    onDeviceChange(event) {\n        this.setState({\n            device: event.target.value\n        });\n    }\n\n    openDialog() {\n        this.setState({\n            dialogOpen: true,\n            device: (this.props.devices ? this.props.devices[0].uuid : null)\n        });\n    }\n\n    closeDialog() {\n        this.setState({\n            dialogOpen: false\n        });\n    }\n\n    updateInputValue(evt) {\n        this.setState({\n            inputValue: evt.target.value\n        });\n    }\n\n    onKeyDown(e) {\n        if (e.keyCode === 13) {\n            e.preventDefault();\n            this.start();\n        }\n        if (e.keyCode === 27) {\n            e.preventDefault();\n            this.closeDialog();\n        }\n    }\n\n    onChange(data) {\n        this.setState({\n            inputValue: data\n        });\n    }\n\n    render() {\n        if (this.state.dialogOpen) {\n            return (\n                <div className=\"prompt-wrapper\">\n                    <div className= {this.props.paramEditor ? 'prompt param-prompt' : 'prompt'}>\n                        <div className=\"prompt-header\">{this.props.header}</div>\n                        <div className=\"prompt-text\">{this.props.text}</div>\n                        {!this.props.paramEditor &&\n                            <input autoFocus onFocus={(e) => {e.target.select()}} type=\"text\" name=\"iterations\" value={this.state.inputValue} onChange={evt => this.updateInputValue(evt)} onKeyDown={this.onKeyDown} />\n                        }\n                        {this.props.paramEditor &&\n                            <ConfigEditor ref={this.configEditor} url={this.props.paramEditorUrl} />\n                        }\n                        {this.props.devices &&\n                            <select value={this.state.device} onChange={this.onDeviceChange}>\n                                {this.props.devices.map(device => (\n                                    <option value={device.uuid}>{device.name}</option>\n                                ))}\n                            </select>\n                        }\n                        <div className=\"buttons\">\n                            <div onClick={this.start}>Ok</div>\n                            <div onClick={this.closeDialog}>Cancel</div>\n                        </div>\n                    </div>\n                </div>\n            );\n        } else {\n            return \"\";\n        }\n    }\n}\n\nexport default Prompt;","import React from 'react';\n\nclass ReassuringPrompt extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            dialogOpen: false\n        };\n\n        this.execute = this.execute.bind(this);\n        this.openDialog = this.openDialog.bind(this);\n        this.closeDialog = this.closeDialog.bind(this);\n    }\n\n    execute() {\n        this.setState({\n            dialogOpen: false\n        });\n\n        fetch(this.props.url)\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    if (this.props.onSuccess !== undefined)\n                        this.props.onSuccess();\n                },\n                (error) => {\n\n                }\n            )\n\n    }\n\n    openDialog() {\n        this.setState({\n            dialogOpen: true\n        });\n    }\n\n    closeDialog() {\n        this.setState({\n            dialogOpen: false\n        });\n    }\n\n    render() {\n        if (this.state.dialogOpen) {\n            return (\n                <div className=\"prompt-wrapper\">\n                    <div className='prompt'>\n                        <div className=\"prompt-header\">{this.props.header}</div>\n                        <div className=\"prompt-text\">{this.props.text}</div>\n                        <div className=\"buttons\">\n                            <div onClick={this.execute}>Yes</div>\n                            <div onClick={this.closeDialog}>No</div>\n                        </div>\n                    </div>\n                </div>\n            );\n        } else {\n            return \"\";\n        }\n    }\n}\n\nexport default ReassuringPrompt;","import State from \"./Global\";\nimport Scheduler from \"./Scheduler\";\n\nclass Repository {\n    constructor(evtSource) {\n        this.evtSource = evtSource;       \n        this.params = {};\n        this.paramValues = {};\n        this.tasks = {};\n        this.onChangeListeners = {\n            \"params\": [],\n            \"paramValues\": [],\n            \"tasks\": []\n        };\n        this.onAddListeners = {\n            \"params\": [],\n            \"paramValues\": [],\n            \"tasks\": []\n        };\n        this.onRemoveListeners = {\n            \"params\": [],\n            \"paramValues\": [],\n            \"tasks\": []\n        };\n\n        this.evtSource.addEventListener(\"PARAM_CHANGED\", (e) => {\n            const changedParam = JSON.parse(e.data);\n\n            if (changedParam.uuid in this.params) {\n                changedParam.values = this.params[changedParam.uuid].values;\n            } else {\n                changedParam.values = [];\n            }\n            if (changedParam.deprecated_param_value in this.paramValues)\n                changedParam.deprecated_param_value = this.paramValues[changedParam.deprecated_param_value];\n            if (changedParam.default_param_value in this.paramValues)\n                changedParam.default_param_value = this.paramValues[changedParam.default_param_value];\n\n            this.updateEntity(this.params, changedParam, \"params\");\n        });\n\n        this.evtSource.addEventListener(\"PARAM_VALUE_CHANGED\", (e) => {\n            const changedParamValue = JSON.parse(e.data);\n\n            changedParamValue.creation_time = new Date(changedParamValue.creation_time * 1000);\n\n            this.updateEntity(this.paramValues, changedParamValue, \"paramValues\");\n\n            let param = this.params[changedParamValue.param];\n            const previousIndex = param.values.findIndex(function (e) {\n                return e.uuid === changedParamValue.uuid\n            });\n\n            if (previousIndex >= 0) {\n                param.values[previousIndex] = changedParamValue;\n            } else {\n                param.values.push(changedParamValue);\n            }\n            this.updateEntity(this.params, param, \"params\");\n\n            param = Object.values(this.params).find((param) => param.deprecated_param_value === changedParamValue.uuid);\n            if (param !== undefined) {\n                param.deprecated_param_value = changedParamValue;\n                this.updateEntity(this.params, param, \"params\");\n            }\n            param = Object.values(this.params).find((param) => param.default_param_value === changedParamValue.uuid);\n            if (param !== undefined) {\n                param.default_param_value = changedParamValue;\n                this.updateEntity(this.params, param, \"params\");\n            }\n        });\n\n        this.evtSource.addEventListener(\"TASK_CHANGED\", (e) => {\n            const changedTask = JSON.parse(e.data);\n\n            changedTask.creation_time = new Date(changedTask.creation_time * 1000);\n            changedTask.saved_time = new Date(changedTask.saved_time * 1000);\n            changedTask.paramValues = changedTask.paramValues.map(e => [this.paramValues[e[0]]].concat(e.slice(1)));\n            for (let checkpoint of changedTask.checkpoints) {\n                checkpoint.time = new Date(checkpoint.time * 1000);\n            }\n\n            this.updateEntity(this.tasks, changedTask, \"tasks\");\n        });\n\n        this.evtSource.addEventListener(\"TASK_REMOVED\", (e) => {\n            const changedTask = JSON.parse(e.data);\n            this.removeEntity(this.tasks, changedTask, \"tasks\")\n        });\n\n        this.evtSource.addEventListener(\"PARAM_VALUE_REMOVED\", (e) => {\n            const changedParamValue = JSON.parse(e.data);\n            this.removeEntity(this.paramValues, changedParamValue, \"paramValues\");\n\n            let param = this.params[changedParamValue.param];\n            const previousIndex = param.values.findIndex(function (e) {\n                return e.uuid === changedParamValue.uuid\n            });\n\n            if (previousIndex >= 0) {\n                param.values.splice(previousIndex, 1);\n                this.updateEntity(this.params, param, \"params\");\n            }\n        });\n\n        this.evtSource.addEventListener(\"PARAM_REMOVED\", (e) => {\n            const changedParam = JSON.parse(e.data);\n            this.removeEntity(this.params, changedParam, \"params\")\n        });\n\n    }\n\n    updateEntity(entities, newEntity, entityType, key=\"uuid\") {\n        const isNew = !(newEntity[key] in entities);\n        entities[newEntity[key]] = newEntity;\n\n        if (isNew)\n            this.throwOnAddEvent(newEntity, entityType);\n        this.throwOnChangeEvent(entities, entityType, newEntity[key]);\n    }\n\n    removeEntity(entities, entityToRemove, entityType, key=\"uuid\") {\n        let entity = entities[entityToRemove[key]];\n        delete entities[entityToRemove[key]];\n\n        this.throwOnRemoveEvent(entity, entityType);\n        this.throwOnChangeEvent(entities, entityType, entityToRemove[key]);\n    }\n\n    throwOnChangeEvent(entities, entityType, key) {\n        let entitiesClone = Object.assign({}, entities);\n        for (let listener of this.onChangeListeners[entityType]) {\n            listener(entitiesClone, key);\n        }\n    }\n\n    throwOnAddEvent(entity, entityType) {\n        for (let listener of this.onAddListeners[entityType]) {\n            listener(entity);\n        }\n    }\n\n    throwOnRemoveEvent(entity, entityType) {\n        for (let listener of this.onRemoveListeners[entityType]) {\n            listener(entity);\n        }\n    }\n\n    onChange(entityType, listener) {\n        this.onChangeListeners[entityType].push(listener);\n    }\n\n    removeOnChange(entityType, listener) {\n        const listenerIndex = this.onChangeListeners[entityType].findIndex(listener);\n        if (listenerIndex >= 0)\n            this.onChangeListeners[entityType].splice(listenerIndex, 1);\n    }\n\n    onAdd(entityType, listener) {\n        this.onAddListeners[entityType].push(listener);\n    }\n\n    removeOnAdd(entityType, listener) {\n        const listenerIndex = this.onAddListeners[entityType].findIndex(listener);\n        if (listenerIndex >= 0)\n            this.onAddListeners[entityType].splice(listenerIndex, 1);\n    }\n\n    onRemove(entityType, listener) {\n        this.onRemoveListeners[entityType].push(listener);\n    }\n\n    removeOnRemove(entityType, listener) {\n        const listenerIndex = this.onRemoveListeners[entityType].findIndex(listener);\n        if (listenerIndex >= 0)\n            this.onRemoveListeners[entityType].splice(listenerIndex, 1);\n    }\n\n}\n\nexport default Repository;","import React from 'react';\nimport Device from \"./Device\";\nimport State from \"./Global\";\nimport Prompt from \"./Prompt\";\n\nclass Scheduler extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            tasks: [],\n            max_running: 1,\n            hiddenDevices: {}\n        };\n\n        this.promptAddDeviceRefs = React.createRef();\n        this.openMaxRunningDialogRefs = React.createRef();\n        this.updateTasks = this.updateTasks.bind(this);\n        this.openMaxRunningDialog = this.openMaxRunningDialog.bind(this);\n        this.hideDevice = this.hideDevice.bind(this);\n        this.shouldShowDevice = this.shouldShowDevice.bind(this);\n    }\n\n    componentDidMount() {\n        this.props.repository.onChange(\"tasks\", this.updateTasks);\n        this.updateTasks(this.props.repository.tasks);\n    }\n\n    componentWillUnmount() {\n        this.props.repository.removeOnChange(\"tasks\", this.updateTasks);\n    }\n\n    updateTasks(tasks) {\n        this.setState({\n            tasks: Object.values(tasks).filter(task => task.state === State.RUNNING || task.state === State.QUEUED)\n        });\n    }\n\n    openMaxRunningDialog() {\n        this.openMaxRunningDialogRefs.current.openDialog();\n    }\n\n    hideDevice(device) {\n        const hiddenDevices = Object.assign({}, this.state.hiddenDevices);\n\n        hiddenDevices[device.uuid] = true;\n\n        this.setState({\n            hiddenDevices: hiddenDevices\n        })\n    }\n\n    showDevice(device) {\n        const hiddenDevices = Object.assign({}, this.state.hiddenDevices);\n\n        hiddenDevices[device.uuid] = false;\n\n        this.setState({\n            hiddenDevices: hiddenDevices\n        });\n\n        fetch(\"/connect_device/\" + device.uuid)\n            .then(res => res.json())\n            .then(\n                (result) => {\n                }\n            )\n\n    }\n\n    shouldShowDevice(device) {\n        return (device.uuid in this.state.hiddenDevices && !this.state.hiddenDevices[device.uuid]) || (!(device.uuid in this.state.hiddenDevices) && device.is_connected !== 0);\n    }\n\n    render() {\n        return (\n            <div id=\"scheduler\">\n                <div className=\"dropdown\">\n                    <div className=\"action\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" >\n                        Add device\n                    </div>\n                    <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n                        {this.props.devices.filter(device => !this.shouldShowDevice(device)).map(device => (\n                            <div className=\"dropdown-item\" onClick={() => this.showDevice(device)}>{device.name}</div>\n                        ))}\n                        {this.props.devices.filter(device => !this.shouldShowDevice(device)).length > 0 &&\n                            <div className=\"dropdown-divider\"></div>\n                        }\n                        <div className=\"dropdown-item\" onClick={() => this.promptAddDeviceRefs.current.openDialog()}>Add new device</div>\n                    </div>\n                </div>\n                <Prompt ref={this.promptAddDeviceRefs} header=\"Add new device\" text=\"Specify the ip address and the port of the new device:\" url={\"/add_device\"}/>\n\n                <div className=\"mock-device\"></div>\n                 {this.props.devices.filter(this.shouldShowDevice).map(device => (\n                    <Device device={device} tasks={this.state.tasks.filter(task => task.device === device.uuid)} hideDevice={this.hideDevice} highlightTask={this.props.highlightTask}/>\n                ))}\n                <div className=\"mock-device\"></div>\n            </div>\n        );\n    }\n}\n\n\nexport default Scheduler;","import React from 'react';\nimport Autocomplete from 'react-autocomplete';\n\nclass TagsEdit extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: \"\"\n        };\n\n        this.onKeyDown = this.onKeyDown.bind(this);\n        this.updateValue = this.updateValue.bind(this);\n        this.remove = this.remove.bind(this);\n        this.onSelect = this.onSelect.bind(this);\n        this.autocompleteRef = React.createRef();\n    }\n\n    updateValue(value) {\n        this.setState({\n            value: value\n        });\n        this.autocompleteRef.current.setState({\n            highlightedIndex: null\n        });\n    }\n\n    onSelect(value) {\n        this.setState({\n            value: value\n        },\n        () => this.add());\n    }\n\n    onKeyDown(e) {\n        if (e.keyCode === 13 && this.autocompleteRef.current.state.highlightedIndex === null) {\n            e.preventDefault();\n            this.add();\n        }\n    }\n\n    add() {\n         if (this.state.value === \"\")\n            return;\n\n         let tags = this.props.tags.slice();\n\n         tags.push(this.state.value);\n         this.props.updateTags(tags);\n\n         this.setState({\n            value: \"\"\n        });\n    }\n\n    remove(value) {\n         let tags = this.props.tags.slice();\n         tags.splice(tags.indexOf(value), 1);\n         this.props.updateTags(tags);\n    }\n\n    componentDidMount() {\n        this.autocompleteRef.current.highlightItemFromMouse = (item) => {};\n    }\n\n    selectableValues() {\n        let values = this.props.allTags.slice();\n\n        for (let tag of this.props.tags) {\n            var index = values.indexOf(tag);\n            if (index !== -1)\n                values.splice(index, 1);\n        }\n        return values;\n    }\n\n    render() {\n        return (\n            <div   className=\"tags-edit\">\n            <div>\n                {this.props.tags.map(value => (\n                    <span key={value} className=\"value\"><span>{value}</span><i className=\"fas fa-times\" onClick={() => this.remove(value)}></i></span>\n                ))}\n                <Autocomplete\n                    ref={this.autocompleteRef}\n                    autoHighlight={false}\n                    shouldItemRender={(item, value) => item.toLowerCase().indexOf(value.toLowerCase()) > -1}\n                    getItemValue={(item) => item}\n                    items={this.selectableValues()}\n                    renderItem={(item, isHighlighted) =>\n                        <div className={isHighlighted ? 'autocomplete-hover' : ''} style={{background: isHighlighted ? 'lightgray' : 'white'}}>\n                            {item}\n                        </div>\n                    }\n                    value={this.state.value}\n                    onChange={evt => this.updateValue(evt.target.value)}\n                    inputProps={{\n                        'onKeyDown': this.onKeyDown\n                    }}\n                    onSelect={(val) => this.onSelect(val)}\n                    wrapperStyle={{ position: 'relative' }}\n                    menuStyle={{ position: 'absolute', top: '35px', left: 0 }}\n                />\n\n            </div>\n            </div>\n        );\n    }\n}\n\nexport default TagsEdit;","import React from 'react';\nimport State from \"./Global\";\nimport Prompt from \"./Prompt\";\nimport $ from 'jquery';\n\nexport class TaskName extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.wrapperRef = React.createRef();\n    }\n\n    componentDidMount() {\n        $(this.wrapperRef.current).find('[data-toggle=\"tooltip\"]').tooltip();\n    }\n\n    componentDidUpdate() {\n        $(this.wrapperRef.current).find('[data-toggle=\"tooltip\"]').tooltip();\n    }\n\n\n    render() {\n        if (this.props.is_test) {\n            return (\n                <span ref={this.wrapperRef}>Test</span>\n            );\n        } else {\n            if (this.props.name !== undefined && this.props.name.length > 0) {\n                return (\n                    <span ref={this.wrapperRef}>\n                {this.props.name.map((name, i) => {\n\n                    return (\n                        <span key={i}>\n                        {i !== 0 &&\n                        <span className=\"separator\">/</span>\n                        }\n                            <span data-toggle=\"tooltip\" data-placement=\"bottom\" >{name}</span>\n                    </span>\n                    )\n                })}\n            </span>\n                );\n            } else {\n                return (\n                    <span ref={this.wrapperRef}>Task</span>\n                );\n            }\n        }\n    }\n}\n\n\nfunction TaskStatus(props) {\n    if (props.state === State.RUNNING) {\n        function pad(n) {\n            n = parseInt(n);\n            return (n < 10) ? (\"0\" + n) : n;\n        }\n\n        function renderTime(time) {\n            if (time !== null) {\n                if (time >= 3600)\n                    return pad(time / 3600) + \":\" + pad((time % 3600) / 60) + \":\" + pad(time % 60);\n                else\n                    return pad(time / 60) + \":\" + pad(time % 60);\n            } else\n                return \"--:--\";\n        }\n\n        return <div className=\"time\">{renderTime(props.run_time)} / {renderTime(props.time_left)}</div>;\n    } else {\n        return <div className=\"time\">{props.index + 1}</div>\n    }\n}\n\nfunction TaskProgress(props) {\n    if (props.state === State.RUNNING) {\n        var style = {width: Math.min(1, props.finished_iterations / props.total_iterations) * 100 + '%'};\n        return <div className=\"progress\" style={style}></div>;\n    } else {\n        return \"\";\n    }\n}\n\nclass TaskToolbar extends React.Component {\n    constructor(props) {\n        super(props);\n        this.pause = this.pause.bind(this);\n        this.saveNow = this.saveNow.bind(this);\n        this.cancel = this.cancel.bind(this);\n        this.runNow = this.runNow.bind(this);\n        this.openExtraDialog = this.openExtraDialog.bind(this);\n        this.promptExtraRefs = React.createRef();\n        this.openLog = this.openLog.bind(this);\n        this.clone = this.clone.bind(this);\n        this.terminate = this.terminate.bind(this);\n        this.createCheckpoint = this.createCheckpoint.bind(this);\n    }\n\n    pause() {\n        fetch(\"/pause/\" + this.props.task.uuid)\n            .then(res => res.json())\n            .then(\n                (result) => {\n\n                },\n                (error) => {\n\n                }\n            )\n    }\n\n    saveNow() {\n        fetch(\"/save_now/\" + this.props.task.uuid)\n            .then(res => res.json())\n            .then(\n                (result) => {\n\n                },\n                (error) => {\n\n                }\n            )\n    }\n\n    createCheckpoint() {\n        fetch(\"/create_checkpoint/\" + this.props.task.uuid)\n            .then(res => res.json())\n            .then(\n                (result) => {\n\n                },\n                (error) => {\n\n                }\n            )\n    }\n\n\n    cancel() {\n        fetch(\"/cancel/\" + this.props.task.uuid)\n            .then(res => res.json())\n            .then(\n                (result) => {\n\n                },\n                (error) => {\n\n                }\n            )\n    }\n\n    runNow() {\n        fetch(\"/run_now/\" + this.props.task.uuid)\n            .then(res => res.json())\n            .then(\n                (result) => {\n\n                },\n                (error) => {\n\n                }\n            )\n    }\n\n    openExtraDialog() {\n        this.promptExtraRefs.current.openDialog();\n    }\n\n    openLog() {\n        window.open(\"/log/\" + this.props.task.uuid, '_blank');\n    }\n\n     clone() {\n        fetch(\"/clone_task/\" + this.props.task.uuid)\n            .then(res => res.json())\n            .then(\n                (result) => {\n\n                },\n                (error) => {\n\n                }\n            )\n    }\n\n    terminate() {\n        fetch(\"/terminate/\" + this.props.task.uuid)\n            .then(res => res.json())\n            .then(\n                (result) => {\n\n                },\n                (error) => {\n\n                }\n            )\n    }\n\n    render() {\n        let currentAction = \"\";\n        if (this.props.task.is_pausing) {\n            currentAction = \"pausing...\"\n        } else if (this.props.task.is_saving) {\n            currentAction = \"saving...\"\n        } else if (this.props.task.creating_checkpoint) {\n            currentAction = \"checkpoint...\"\n        }\n        return (\n            <div className=\"toolbar\">\n                {this.props.task.state === State.RUNNING &&\n                    <span>\n                        <div className=\"action\" onClick={this.pause} title=\"Pause the task after the current iteration\">\n                            <i className=\"fa fa-pause\"></i><span>Pause</span>\n                        </div>\n                        < div className=\"action\" onClick={this.saveNow} title=\"Force the task to save after the current iteration\">\n                            <i className=\"fas fa-save\"></i><span>Save now!</span>\n                        </div>\n                        < div className=\"action\" onClick={this.openExtraDialog} title=\"Change the scheduled number of total iterations\">\n                            <i className=\"fa fa-edit\"></i><span>Change</span>\n                        </div>\n                        <div className=\"dropdown\">\n                            <div className=\"action dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" >\n                                <i className=\"fas fa-ellipsis-v\"></i>\n                            </div>\n                            <div className=\"dropdown-menu\">\n                                <div className=\"action\" onClick={this.openLog} title=\"View the log\">\n                                    <i className=\"far fa-file-alt\"></i><span>Log</span>\n                                </div>\n                                <div className=\"action\" onClick={this.terminate} title=\"Terminate task\">\n                                   <i className=\"fas fa-skull-crossbones\"></i><span>Terminate</span>\n                                </div>\n                                <div className=\"action\" onClick={this.createCheckpoint} title=\"Create checkpoint\">\n                                   <i className=\"far fa-flag\"></i><span>Checkpoint</span>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"current-action\">\n                            {currentAction}\n                        </div>\n                    </span>\n                }\n                {this.props.task.state === State.QUEUED &&\n                    <span>\n                        <div className=\"action\" onClick={this.runNow} title=\"Pause one of the running tasks and start this one instead\">\n                            <i className=\"fas fa-exclamation-triangle\"></i><span>Run now!</span>\n                        </div>\n                        < div className=\"action\" onClick={this.openExtraDialog} title=\"Change the scheduled number of total iterations\">\n                            <i className=\"fa fa-edit\"></i><span>Change</span>\n                        </div>\n                        <div className=\"dropdown\">\n                            <div className=\"action dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" >\n                                <i className=\"fas fa-ellipsis-v\"></i>\n                            </div>\n                            <div className=\"dropdown-menu\">\n                                <div className=\"action\" onClick={this.cancel} title=\"Remove this task from the queue\">\n                                    <i className=\"fas fa-times\"></i><span>Cancel</span>\n                                </div>\n                            </div>\n                        </div>\n                    </span>\n                }\n                <Prompt ref={this.promptExtraRefs} defaultValue={this.props.task.total_iterations} header=\"Change total iterations?\" text=\"Specify the new number of iterations, you want the task to run:\" url={\"/change/\" + this.props.task.uuid}/>\n            </div>\n        );\n    }\n}\n\nclass Task extends React.Component {\n    constructor(props) {\n        super(props);\n        this.onMouseDown = this.onMouseDown.bind(this);\n        this.onDragStart = this.onDragStart.bind(this);\n        this.onDragOver = this.onDragOver.bind(this);\n        this.onDragEnter = this.onDragEnter.bind(this);\n        this.onDragLeave = this.onDragLeave.bind(this);\n        this.onDrop = this.onDrop.bind(this);\n        this.taskRef = React.createRef();\n        this.dragEnterCounter = 0\n    }\n\n    onMouseDown(e) {\n        this.target = e.target;\n    }\n\n    onDragStart(e) {\n        e.dataTransfer.setData(\"text/plain\", this.props.task.uuid);\n    }\n\n    onDragOver(e) {\n        if (this.props.task.state === State.QUEUED && this.props.task.uuid !== e.dataTransfer.getData(\"text/plain\")) {\n            e.preventDefault();\n        }\n    }\n\n    onDrop(e) {\n        if (this.props.task.state === State.QUEUED && this.props.task.uuid !== e.dataTransfer.getData(\"text/plain\")) {\n            e.preventDefault();\n            fetch(\"/reorder_task/\" + e.dataTransfer.getData(\"text/plain\") + \"/\" + this.props.index)\n            .then(res => res.json())\n            .then(\n                (result) => {\n\n                },\n                (error) => {\n\n                }\n            );\n\n            this.dragEnterCounter = 0;\n            this.taskRef.current.className = \"task\";\n        }\n    }\n\n    onDragEnter(e) {\n        if (this.props.task.state === State.QUEUED && this.props.task.uuid !== e.dataTransfer.getData(\"text/plain\")) {\n            e.preventDefault();\n            this.taskRef.current.className = \"task on-drag-over\";\n            this.dragEnterCounter++;\n        }\n    }\n\n    onDragLeave(e) {\n        if (this.props.task.state === State.QUEUED && this.props.task.uuid !== e.dataTransfer.getData(\"text/plain\")) {\n            e.preventDefault();\n            this.dragEnterCounter--;\n            if (this.dragEnterCounter === 0)\n                this.taskRef.current.className = \"task\";\n        }\n    }\n\n    render() {\n        return (\n            <li ref={this.taskRef} className=\"task\" onDragOver={this.onDragOver} onDragLeave={this.onDragLeave} onDragEnter={this.onDragEnter} onDrop={this.onDrop} onDragStart={this.onDragStart} onMouseDown={this.onMouseDown} draggable={this.props.task.state === State.QUEUED ? \"true\" : \"false\"} >\n                <div className=\"content\">\n                    <div className=\"header\">\n                        <div className=\"project-name\">Task</div>\n                        <div className=\"status\">\n                            <TaskStatus index={this.props.index} state={this.props.task.state} time_left={this.props.task.time_left} run_time={this.props.task.run_time}/>\n                            <div className=\"iterations\">{this.props.task.finished_iterations} / {this.props.task.total_iterations}</div>\n                        </div>\n                    </div>\n                    <TaskProgress state={this.props.task.state} total_iterations={this.props.task.total_iterations} finished_iterations={this.props.task.finished_iterations} />\n                    <div className=\"param-name\" onClick={() => this.props.highlightTask(this.props.task)}><span className=\"try-number\">{this.props.task.try}</span><TaskName task={this.props.task} name={this.props.task.name}/></div>\n                </div>\n                <TaskToolbar task={this.props.task}/>\n            </li>\n        );\n    }\n}\n\nexport default Task;","import React from 'react';\nimport { forceCheck } from 'react-lazyload';\n\nclass TaskContainer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.filterHasUpdated = this.filterHasUpdated.bind(this);\n        this.updateParams = this.updateParams.bind(this);\n        this.updateTasks = this.updateTasks.bind(this);\n        this.toggleSelection = this.toggleSelection.bind(this);\n        this.addParamCollapse = this.addParamCollapse.bind(this);\n        this.removeParamCollapse = this.removeParamCollapse.bind(this);\n        this.addParamGroup = this.addParamGroup.bind(this);\n        this.removeParamGroup = this.removeParamGroup.bind(this);\n        this.replaceUuidsWithTasks = this.replaceUuidsWithTasks.bind(this);\n        this.loadFilter = this.loadFilter.bind(this);\n        this.saveFilter = this.saveFilter.bind(this);\n        this.newTask = this.newTask.bind(this);\n        this.removeTask = this.removeTask.bind(this);\n        this.onChangeCollapseSorting = this.onChangeCollapseSorting.bind(this);\n        this.onChangeVersionInName = this.onChangeVersionInName.bind(this);\n        this.flipCollapseSortingDirection = this.flipCollapseSortingDirection.bind(this);\n        this.reorderParam = this.reorderParam.bind(this);\n        this.intervalId = null;\n    }\n\n    componentDidMount() {\n        this.props.repository.onChange(\"tasks\", this.updateTasks);\n        this.props.repository.onAdd(\"tasks\", this.newTask);\n        this.props.repository.onRemove(\"tasks\", this.removeTask);\n        this.props.repository.onChange(\"params\", this.updateParams);\n        this.updateParams(this.props.repository.params);\n        this.filterHasUpdated();\n        this.intervalId = setInterval(this.filterHasUpdated, this.props.refreshRate);\n    }\n\n    componentWillUnmount() {\n        this.props.repository.removeOnChange(\"tasks\", this.updateTasks);\n        this.props.repository.removeOnChange(\"params\", this.updateParams);\n        clearInterval(this.intervalId);\n    }\n\n\n    replaceUuidsWithTasks(tasks, task_lookup) {\n        for (let key in tasks) {\n            if (tasks[key] instanceof Object && !(\"uuid\" in tasks[key])) {\n                this.replaceUuidsWithTasks(tasks[key],task_lookup);\n            } else {\n                let task = tasks[key];\n                let replacement = {\"name\": task.name, \"metrics\": task.metrics, \"uuid\": task.uuid};\n                if (task.uuid in this.props.repository.tasks)\n                    replacement[\"task\"] = this.props.repository.tasks[task.uuid];\n                else {\n                    replacement[\"task\"] = null;\n                }\n                task_lookup[task.uuid] = replacement;\n                tasks[key] = replacement;\n            }\n        }\n    }\n\n    filterHasUpdated() {\n        var data = new FormData();\n        var dataJson = {};\n        dataJson['filter'] = this.state.selectedParamValues;\n        dataJson['collapse'] = this.state.collapsedParams;\n        dataJson['group'] = this.state.groupedParams;\n        dataJson['param_sorting'] = this.state.paramSorting;\n        dataJson['sort_col'] = this.state.sorting_tasks[0];\n        dataJson['sort_dir'] = this.state.sorting_tasks[1] ? \"DESC\" : \"ASC\";\n        dataJson['collapse_sorting'] = [this.state.collapseSorting[0], this.state.collapseSorting[1] ? \"DESC\" : \"ASC\"];\n        dataJson['version_in_name'] = this.state.versionInName;\n        dataJson['force_param_in_name'] = this.state.forceParamInName;\n\n        data.append(\"data\", JSON.stringify(dataJson));\n\n        let self = this;\n        fetch(\"filter_tasks\", {\n                method: \"POST\",\n                body: data\n            })\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    let task_lookup = {};\n                    console.log(result);\n                    this.replaceUuidsWithTasks(result[0], task_lookup);\n                    console.log(result);\n                    self.setState({\n                        tasks: result[0], \n                        metric_superset: result[1].sort(),\n                        task_lookup: task_lookup\n                    }, forceCheck)\n                },\n                (error) => {\n\n                }\n            );\n\n    }\n\n    saveFilter(saveName) {\n        var data = new FormData();\n        var dataJson = {};\n        dataJson['filter'] = this.state.selectedParamValues;\n        dataJson['collapse'] = this.state.collapsedParams;\n        dataJson['group'] = this.state.groupedParams;\n        dataJson['param_sorting'] = this.state.paramSorting;\n        dataJson['saveName'] = saveName;\n        dataJson['sorting_tasks'] = this.state.sorting_tasks;\n        dataJson['collapse_sorting'] = this.state.collapseSorting;\n        dataJson['version_in_name'] = this.state.versionInName;\n        dataJson['force_param_in_name'] = this.state.forceParamInName;\n\n        data.append(\"data\", JSON.stringify(dataJson));\n\n        fetch(\"save_filter\", {\n                method: \"POST\",\n                body: data\n            })\n    }\n\n    loadFilter(data) {\n        let param_sorting = data.param_sorting;\n        for (const param of this.state.params) {\n            if (!(param.uuid in param_sorting)) {\n                param_sorting[param.uuid] = Object.keys(param_sorting).length;\n            }\n        }\n\n        this.setState({\n            selectedParamValues: data.filter,\n            collapsedParams: data.collapse,\n            groupedParams: data.group,\n            paramSorting: data.param_sorting,\n            sorting_tasks: data.sorting_tasks,\n            collapseSorting: data.collapse_sorting,\n        }, () =>this.filterHasUpdated());\n    }\n\n    updateParams(params) {\n        params = Object.values(params);\n       // this.filterView.updateParams(params);\n\n        let paramsByGroup = {};\n        for (const param of params) {\n            const group = param.group.length > 0 ? param.group[0] : '';\n            if (!(group in paramsByGroup))\n                paramsByGroup[group] = [];\n            paramsByGroup[group].push(param);\n        }\n\n        let paramSorting = Object.assign({}, this.state.paramSorting);\n        for (const param of params) {\n            if (!(param.uuid in paramSorting)) {\n                paramSorting[param.uuid] = Object.keys(paramSorting).length;\n            }\n        }\n\n        this.setState({\n            params: params,\n            paramsByGroup: paramsByGroup,\n            paramSorting: paramSorting\n        });\n    }\n\n\n    newTask(task) {\n        if (!(task.uuid in this.state.task_lookup)) {\n            this.filterHasUpdated();\n        }\n    }\n\n    removeTask(task) {\n        this.filterHasUpdated();\n    }\n\n    updateTasks(all_tasks, changed) {\n        if (all_tasks[changed] !== undefined) {\n            let task_lookup = Object.assign({}, this.state.task_lookup);\n            if (changed in task_lookup) {\n                task_lookup[changed].task = all_tasks[changed];\n            }\n            this.setState({\n                task_lookup: task_lookup,\n                tasks: (this.state.tasks instanceof Array ? this.state.tasks.slice() : Object.assign({}, this.state.tasks))\n            });\n        }\n    }\n\n    toggleSelection(param, value, args) {\n        const selectedParamValues = Object.assign({}, this.state.selectedParamValues);\n\n        if (value === null) {\n            if (param.uuid in selectedParamValues) {\n                delete selectedParamValues[param.uuid];\n            } else {\n                selectedParamValues[param.uuid] = [];\n            }\n        } else {\n            const newValue = [value.uuid, ...args];\n            if (param.uuid in selectedParamValues) {\n                const existingIndex = selectedParamValues[param.uuid].findIndex(paramValue => newValue.length === paramValue.length && newValue.every((value, index) => value === paramValue[index]));\n                if (existingIndex !== -1)\n                    selectedParamValues[param.uuid].splice(existingIndex, 1);\n                else\n                    selectedParamValues[param.uuid].push(newValue);\n            } else {\n                selectedParamValues[param.uuid] = [newValue];\n            }\n        }\n\n        this.setState({\n            selectedParamValues: selectedParamValues\n        },() => this.filterHasUpdated());\n    }\n\n    addParamCollapse(param) {\n        let collapsedParams = this.state.collapsedParams.slice();\n\n        let index = collapsedParams.indexOf(param.uuid);\n        if (index === -1) {\n            collapsedParams.push(param.uuid);\n        }\n\n        this.setState({collapsedParams: collapsedParams}, () =>this.filterHasUpdated());\n    }\n\n    removeParamCollapse(param) {\n        let collapsedParams = this.state.collapsedParams.slice();\n\n        let index = collapsedParams.indexOf(param.uuid);\n        if (index !== -1) {\n            collapsedParams.splice(index, 1);\n            ;\n        }\n\n        this.setState({collapsedParams: collapsedParams}, () =>this.filterHasUpdated());\n    }\n\n\n    addParamGroup(params) {\n        if (params.length === 0)\n            return;\n\n        for (let i = 0; i < params.length; i++)\n            params[i] = params[i].uuid;\n        let groupedParams = this.state.groupedParams.slice();\n\n        groupedParams.push(params);\n\n        this.setState({groupedParams: groupedParams}, () =>this.filterHasUpdated());\n    }\n\n    arraysEqual(a, b) {\n      if (a === b) return true;\n      if (a == null || b == null) return false;\n      if (a.length != b.length) return false;\n\n      for (var i = 0; i < a.length; ++i) {\n        if (a[i] !== b[i]) return false;\n      }\n      return true;\n    }\n\n    removeParamGroup(params) {\n        let groupedParams = this.state.groupedParams.slice();\n\n        let index = -1;\n        for (let i = 0; i < groupedParams.length; i++) {\n            if (this.arraysEqual(groupedParams[i], params)) {\n                index = i;\n            }\n        }\n        if (index !== -1) {\n            groupedParams.splice(index, 1);\n        }\n\n        this.setState({groupedParams: groupedParams}, () =>this.filterHasUpdated());\n    }\n\n\n    reorderParam(first_param_uuid, second_param) {\n        let second_param_uuid = second_param.uuid;\n        let paramSorting = Object.assign({}, this.state.paramSorting);\n        if (paramSorting[first_param_uuid] > paramSorting[second_param_uuid]) {\n            let tmp = first_param_uuid;\n            first_param_uuid = second_param_uuid;\n            second_param_uuid = tmp;\n        }\n\n        let startIndex = paramSorting[first_param_uuid];\n        let endIndex = paramSorting[second_param_uuid];\n        for (let key in paramSorting) {\n            if (paramSorting[key] >= startIndex && paramSorting[key] < endIndex) {\n                paramSorting[key] += 1;\n            }\n        }\n        paramSorting[second_param_uuid] = startIndex;\n\n        this.setState({\n            paramSorting: paramSorting\n        }, () =>this.filterHasUpdated());\n    }\n\n    onChangeCollapseSorting(e) {\n        const collapseSorting = this.state.collapseSorting.slice();\n        collapseSorting[0] = e.target.value;\n        this.setState({collapseSorting: collapseSorting}, () => this.filterHasUpdated());\n    }\n\n    flipCollapseSortingDirection() {\n        const collapseSorting = this.state.collapseSorting.slice();\n        collapseSorting[1] = !collapseSorting[1];\n        this.setState({collapseSorting: collapseSorting}, () => this.filterHasUpdated());\n    }\n\n\n    onChangeVersionInName(e) {\n        this.setState({versionInName: e.target.value}, () => this.filterHasUpdated());\n    }\n}\n\n\nexport default TaskContainer;\n","import React from 'react';\nimport ConfigEditor from \"./ConfigEditor\";\nimport ParamFilter from \"./ParamFilter\";\nimport $ from \"jquery\";\nimport TagsEdit from \"./TagsEdit\";\n\nclass TaskEditor extends React.Component {\n    constructor(props) {\n        super(props);\n\n        let selectedParamValues = {};\n\n        for (const param of props.params) {\n            if (param.values.length > 0)\n                selectedParamValues[param.uuid] = [param.values[0].uuid];\n        }\n\n        this.state = {\n            selectedParamValues: selectedParamValues,\n            uuid_to_load: null,\n            total_iterations: \"\",\n            save_interval: \"0\",\n            checkpoint_interval: \"0\",\n            open: false,\n            command: \"\",\n            commandHint: \"\",\n            isTest: false,\n            device: null,\n            tags: []\n        };\n\n\n        this.configEditor = React.createRef();\n        this.open = this.open.bind(this);\n        this.close = this.close.bind(this);\n        this.run = this.run.bind(this);\n        this.new = this.new.bind(this);\n        this.onSelectionChange = this.onSelectionChange.bind(this);\n        this.onTotalIterationsChange = this.onTotalIterationsChange.bind(this);\n        this.onCheckpointIntervalChange = this.onCheckpointIntervalChange.bind(this);\n        this.onSaveIntervalChange = this.onSaveIntervalChange.bind(this);\n        this.copyCommand = this.copyCommand.bind(this);\n        this.onIsTestChange = this.onIsTestChange.bind(this);\n        this.onDeviceChange = this.onDeviceChange.bind(this);\n        this.updateTags = this.updateTags.bind(this);\n        this.wrapperRef = React.createRef();\n        this.commandInput = React.createRef();\n    }\n\n    open(task) {\n\n        let selectedParamValues = Object.assign({}, this.state.selectedParamValues);\n\n        for (const param of this.props.params) {\n            if (param.values.length > 0) {\n                let suitableParamValue = null;\n                let args = [];\n                for (const value of task.paramValues) {\n                    if (value[0].param === param.uuid) {\n                        suitableParamValue = value[0];\n                        args = value.slice(1);\n                        break;\n                    }\n                }\n\n                if (suitableParamValue === null)\n                    selectedParamValues[param.uuid] = [param.deprecated_param_value.uuid, ...param.deprecated_param_value.template_deprecated];\n                else\n                    selectedParamValues[param.uuid] = [suitableParamValue.uuid, ...args];\n            }\n        }\n\n        this.setState({\n            selectedParamValues: selectedParamValues,\n            open: true,\n            isTest: task.is_test,\n            device: this.state.device === null ? this.props.devices[0].uuid : this.state.device,\n            total_iterations: task.total_iterations\n        }, () => this.updateCommand(selectedParamValues));\n    }\n\n    new() {\n        let selectedParamValues = Object.assign({}, this.state.selectedParamValues);\n\n        for (const param of this.props.params) {\n            if (!(param.uuid in selectedParamValues) && param.values.length > 0)\n                selectedParamValues[param.uuid] = [param.default_param_value.uuid, ...param.default_param_value.template_defaults];\n        }\n\n        this.setState({\n            selectedParamValues: selectedParamValues,\n            open: true,\n            device: this.state.device === null ? this.props.devices[0].uuid : this.state.device\n        });\n        this.updateCommand(selectedParamValues);\n    }\n\n    close() {\n        this.setState({\n            param_value: null,\n            open: false\n        });\n    }\n\n    run() {\n        var data = new FormData();\n\n        var dataJson = {};\n        dataJson['params'] = this.state.selectedParamValues;\n        dataJson['config'] = {\n            \"save_interval\": parseInt(this.state.save_interval),\n            \"checkpoint_interval\": parseInt(this.state.checkpoint_interval)\n        };\n        dataJson['device'] = this.state.device;\n        dataJson['tags'] = this.state.tags;\n\n        data.append(\"data\", JSON.stringify(dataJson));\n\n        var url = \"/\" + (this.state.isTest ? \"test\" : \"start\") + \"/\" + this.state.total_iterations;\n\n        fetch(url,\n            {\n                method: \"POST\",\n                body: data\n            })\n            .then(res => res.json())\n            .then(\n                (result) => {\n\n                },\n                (error) => {\n\n                }\n            );\n\n        this.close();\n    }\n\n    onSelectionChange(param, value, arg=[]) {\n        const selectedParamValues = Object.assign({}, this.state.selectedParamValues);\n\n        selectedParamValues[param.uuid] = [value.uuid];\n        selectedParamValues[param.uuid] = selectedParamValues[param.uuid].concat(arg);\n\n        this.setState({\n            selectedParamValues: selectedParamValues\n        });\n        this.updateCommand(selectedParamValues);\n    }\n\n\n    onTotalIterationsChange(event) {\n        this.setState({\n            total_iterations: event.target.value\n        });\n        this.updateCommand(null, event.target.value);\n    }\n\n    onSaveIntervalChange(event) {\n        this.setState({\n            save_interval: event.target.value\n        });\n    }\n\n    onCheckpointIntervalChange(event) {\n        this.setState({\n            checkpoint_interval: event.target.value\n        });\n    }\n\n    updateCommand(selectedParamValues = null, total_iterations = null) {\n        if (selectedParamValues === null)\n            selectedParamValues = this.state.selectedParamValues;\n        if (total_iterations === null)\n            total_iterations = this.state.total_iterations;\n        let paramValues = \"\";\n\n        for (const param of this.props.params) {\n            if (param.uuid in selectedParamValues) {\n                paramValues += param.uuid + \" \" + selectedParamValues[param.uuid][0];\n                for (let i = 1; i < selectedParamValues[param.uuid].length; i++)\n                    paramValues += \":\\\"\" + selectedParamValues[param.uuid][i] + \"\\\"\";\n                paramValues += \" \";\n            }\n        }\n\n        if (total_iterations !== \"\") {\n            this.setState({\n                command: \"taskplan \" + (this.state.isTest ? \"test \" : \"start \") + total_iterations + \" \" + paramValues,\n                commandHint: \"Click to copy\"\n            });\n        } else {\n            this.setState({\n                command: \"\",\n                commandHint: \"Total iterations missing\"\n            });\n        }\n    }\n\n    componentDidMount() {\n        $(this.wrapperRef.current).find('[data-toggle=\"tooltip\"]').tooltip();\n    }\n\n    componentDidUpdate() {\n        $(this.wrapperRef.current).find('[data-toggle=\"tooltip\"]').tooltip();\n    }\n\n    copyCommand() {\n        this.commandInput.current.select();\n        document.execCommand(\"copy\");\n        this.setState({\n            commandHint: \"Copied!\"\n        }, () => $(this.commandInput.current).tooltip('show'));\n    }\n\n    onIsTestChange(event) {\n        this.setState({\n            isTest: event.target.checked\n        }, () => this.updateCommand());\n    }\n\n    onDeviceChange(event) {\n        this.setState({\n            device: event.target.value\n        });\n    }\n\n    updateTags(tags) {\n        this.setState({\n            tags: tags\n        });\n    }\n\n    render() {\n        return (\n            <div ref={this.wrapperRef} style={{'display': (this.state.open ? 'block' : 'none')}}>\n                <div className=\"task-editor slide-editor editor\">\n                    <div className=\"header\">Start task<i className=\"fas fa-times\" onClick={this.close}></i></div>\n                    <div className=\"field\">\n                        <label>Total iterations:</label>\n                        <input value={this.state.total_iterations} onChange={this.onTotalIterationsChange} required=\"required\" />\n                    </div>\n                    <div className=\"field\">\n                        <label>Save interval:</label>\n                        <input value={this.state.save_interval} onChange={this.onSaveIntervalChange} required=\"required\" />\n                    </div>\n                    <div className=\"field\">\n                        <label>Checkpoint interval:</label>\n                        <input value={this.state.checkpoint_interval} onChange={this.onCheckpointIntervalChange} required=\"required\" />\n                    </div>\n                    <div className=\"field\">\n                        <label>Is test:</label>\n                        <input checked={this.state.isTest} onChange={this.onIsTestChange} type=\"checkbox\" />\n                    </div>\n                    <ParamFilter selectMultiple={false} paramsByGroup={this.props.paramsByGroup} selectedParamValues={this.state.selectedParamValues} toggleSelection={this.onSelectionChange} useTemplateFields={true}/>\n                    <ConfigEditor ref={this.configEditor} url={\"/config/task\"} bases={Object.values(this.state.selectedParamValues)} preview={true} />\n                    <div className=\"field\">\n                        <label>Device:</label>\n                        <select value={this.state.device} onChange={this.onDeviceChange}>\n                            {this.props.devices.map(device => (\n                                <option value={device.uuid}>{device.name}</option>\n                            ))}\n                        </select>\n                    </div>\n                    <div className=\"field\">\n                        <label>Command:</label>\n                        <input className=\"command\" ref={this.commandInput} onClick={this.copyCommand} data-toggle=\"tooltip\" data-placement=\"bottom\" data-original-title={this.state.commandHint} value={this.state.command} readOnly={true} />\n                    </div>\n                    <div className=\"field\">\n                        <label>Tags:</label>\n                        <TagsEdit tags={this.state.tags} allTags={this.props.allTags} updateTags={this.updateTags} />\n                    </div>\n                    <div className=\"buttons\">\n                        <div onClick={this.run}>Run</div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default TaskEditor;","import React from 'react';\nimport PausedTask from \"./PausedTask\";\nimport TaskEditor from \"./TaskEditor\";\nimport CollapsedTasks from \"./CollapsedTasks\";\nimport GroupedTasks from \"./GroupedTasks\";\n\nclass TaskTab extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n        };\n        this.newTask = this.newTask.bind(this);\n        this.rerunTask = this.rerunTask.bind(this);\n        this.closeEditors = this.closeEditors.bind(this);\n        this.paramValueToName = this.paramValueToName.bind(this);\n        this.taskEditor = React.createRef();\n    }\n\n    closeEditors() {\n        this.taskEditor.current.close();\n    }\n\n    newTask() {\n        this.props.closeViewer();\n        this.taskEditor.current.new();\n    }\n\n    rerunTask(task) {\n        this.props.closeViewer();\n        this.taskEditor.current.open(task);\n    }\n\n    paramValueToName(paramValue) {\n        let paramValueName = paramValue[1].name;\n        for (let i = 2; i < paramValue.length; i++)\n            paramValueName = paramValueName.replace(\"$T\" + (i - 2) + \"$\", paramValue[i]);\n        return paramValueName;\n    };\n\n    render() {\n        return (\n            <div className=\"tab\" style={{'display': (this.props.active ? 'flex' : 'none')}}>\n                <ul className=\"tasks-tab\">\n                    {this.props.initialized &&\n                    <GroupedTasks\n                        tasks={this.props.tasks}\n                        rerunTask={this.rerunTask}\n                        showTask={this.props.showTask}\n                        filterLikeTask={this.props.filterLikeTask}\n                        devices={this.props.devices}\n                        detailCol={this.props.detailCol}\n                        highlightedTask={this.props.highlightedTask}\n                    />\n                    }\n                </ul>\n                <TaskEditor allTags={this.props.allTags} devices={this.props.devices} ref={this.taskEditor} params={this.props.params} paramsByGroup={this.props.paramsByGroup}/>\n                <div className=\"tab-toolbar\">\n                    <label>\n                    </label>\n                    <div className=\"buttons\">\n                        <div onClick={this.newTask}>New task</div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n}\n\n\nexport default TaskTab;\n","import React from 'react';\nimport ConfigEditor from \"./ConfigEditor\";\nimport {TaskName} from \"./Task\";\nimport State from \"./Global\";\nimport TagsEdit from \"./TagsEdit\";\n\nclass TaskViewer extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            selectedParamValues: {},\n            notes: \"\"\n        };\n\n        this.configEditor = React.createRef();\n        this.updateTasks = this.updateTasks.bind(this);\n        this.updateParams = this.updateParams.bind(this);\n        this.extractCheckpoint = this.extractCheckpoint.bind(this);\n        this.notesTextarea = React.createRef();\n        this.updateNotes = this.updateNotes.bind(this);\n        this.updateTags = this.updateTags.bind(this);\n        this.timer = null;\n    }\n\n    componentDidMount() {\n        this.props.repository.onChange(\"tasks\", this.updateTasks);\n        this.props.repository.onChange(\"params\", this.updateParams);\n    }\n\n    componentWillUnmount() {\n        this.props.repository.removeOnChange(\"tasks\", this.updateTasks);\n        this.props.repository.removeOnChange(\"params\", this.updateParams);\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.detailTaskUuid !== this.props.detailTaskUuid && nextProps.detailTaskUuid !== null) {\n            let task = this.state.tasks[nextProps.detailTaskUuid];\n            let selectedParamValues = {};\n            for (const param of this.state.params) {\n                if (param.values.length > 0) {\n                    let suitableParamValue = null;\n                    let args = [];\n                    for (const value of task.paramValues) {\n                        if (value[0].param === param.uuid) {\n                            suitableParamValue = value[0];\n                            args = value.slice(1);\n                            break;\n                        }\n                    }\n\n                    if (suitableParamValue === null) {\n                        selectedParamValues[param.uuid] = param.deprecated_param_value.name;\n                        args = param.deprecated_param_value.template_deprecated;\n                    } else {\n                        selectedParamValues[param.uuid] = suitableParamValue.name;\n                    }\n                    for (let i = 0; i < args.length; i++)\n                        selectedParamValues[param.uuid] = selectedParamValues[param.uuid].replace(\"$T\" + (i) + \"$\", args[i]);\n                }\n            }\n\n            this.setState({\n                selectedParamValues: selectedParamValues\n            });\n        }\n    }\n\n    updateTasks(tasks) {\n        this.setState({\n            tasks: tasks\n        });\n    }\n\n    updateParams(params) {\n        this.setState({\n            params: Object.values(params)\n        });\n    }\n\n    extractCheckpoint(i) {\n        fetch(\"/extract_checkpoint/\" + this.state.detailTaskUuid + \"/\" + i)\n            .then(res => res.json())\n            .then(\n                (result) => {\n                },\n                (error) => {\n\n                }\n            );\n    }\n\n\n    updateNotes(evt) {\n        const newValue = evt.target.value;\n        const task_uuid = this.props.detailTaskUuid;\n        if (this.timer !== null)\n            clearTimeout(this.timer);\n\n        this.timer = setTimeout(() => {\n            var data = new FormData();\n\n            var dataJson = {};\n            dataJson['notes'] = newValue;\n\n            data.append(\"data\", JSON.stringify(dataJson));\n\n            var url = \"set_task_notes/\" + task_uuid;\n\n            fetch(url,\n                {\n                    method: \"POST\",\n                    body: data\n                })\n                .then(res => res.json())\n                .then(\n                    (result) => {\n\n                    },\n                    (error) => {\n\n                    }\n                );\n        }, 1000);\n\n\n        this.setState({\n            notes: newValue\n        });\n    }\n\n\n    updateTags(tags) {\n        var data = new FormData();\n\n        var dataJson = {};\n        dataJson['tags'] = tags;\n\n        data.append(\"data\", JSON.stringify(dataJson));\n\n        var url = \"set_tags/\" + this.props.detailTaskUuid;\n\n        fetch(url,\n            {\n                method: \"POST\",\n                body: data\n            })\n            .then(res => res.json())\n            .then(\n                (result) => {\n\n                },\n                (error) => {\n\n                }\n            );\n\n\n    }\n\n\n    render() {\n        if (this.props.detailTaskUuid !== null) {\n            let task = this.state.tasks[this.props.detailTaskUuid];\n            return (\n                <div className=\"task-viewer slide-editor editor\">\n                    <div className=\"header\">Task details<i class=\"fas fa-times\" onClick={this.props.close}></i></div>\n                    <div className=\"title\"><span className=\"try-number\">{task.try}</span><TaskName task={task} name={task.name}/></div>\n                    <div className=\"metadata\">\n                        <div>{task.uuid}</div>\n                        <div><span>Status:</span> {task.state === State.RUNNING ? \"Running\" : (task.state === State.QUEUED ? \"Queued\": \"Stopped\")}</div>\n                        <div><span>Iterations:</span> {task.finished_iterations} / {task.total_iterations}</div>\n                        <div><span>Created:</span> {task.creation_time.toShortStr()}</div>\n                        <div><span>Saved:</span> {task.saved_time.toShortStr()} {task.had_error == true && <span className=\"task-error\">(Error)</span>}</div>\n                    </div>\n                    <ConfigEditor ref={this.configEditor} url={\"/config/existing_task/\" + task.uuid} bases={[]} preview={true}/>\n                    <h2>Notes:</h2>\n                    <div className=\"notes\">\n                        <textarea ref={this.notesTextarea} value={this.state.notes} onChange={evt => this.updateNotes(evt)}/>\n                    </div>\n                    <h2>Tags:</h2>\n                    <div className=\"tags\">\n                        <TagsEdit tags={task.tags} allTags={this.props.allTags} updateTags={this.updateTags} />\n                    </div>\n                    <h2>Code versions</h2>\n                    <div className=\"code-versions\">\n                        {Object.keys(task.versions).map(key => (\n                                    <div onClick={() => this.props.openCodeVersionViewer(task.versions[key])}>\n                                        <span className=\"iteration\">{key}</span>\n                                        <span className=\"name\">{task.versions[key].substr(0, 7)}</span>\n                                    </div>\n                                ))\n                        }\n                    </div>\n                    <h2>Parameters</h2>\n                    <div className=\"params\">\n                        {this.state.params.sort((a, b) => {\n                            return a.name.localeCompare(b.name);\n                        }).map(param => (\n                            <div><span>{param.name}:</span>{this.state.selectedParamValues[param.uuid]}</div>\n                        ))}\n                    </div>\n                    <h2>Checkpoints</h2>\n                    <div className=\"checkpoints\">\n                        {task.checkpoints.length > 0 ?\n                            task.checkpoints.map((checkpoint, i) => (\n                                <div>\n                                    <span className=\"iteration\">{checkpoint.finished_iterations}</span>\n                                    <span className=\"time\">{checkpoint.time.toShortStr()}</span>\n                                    <div className=\"action\" onClick={() => this.extractCheckpoint(i)} title=\"Add task based on checkpoint\">\n                                        <i className=\"fas fa-arrow-right\"></i>\n                                    </div>\n                                </div>\n                            ))\n                            :\n                            <span>No checkpoints exist</span>\n                        }\n                    </div>\n                </div>\n            );\n        } else {\n            return \"\";\n        }\n    }\n}\n\nexport default TaskViewer;","module.exports = __webpack_public_path__ + \"static_main/media/Roboto-300-cyrillic-ext1.d69a2de8.woff2\";","module.exports = __webpack_public_path__ + \"static_main/media/Roboto-300-cyrillic2.a5383450.woff2\";","module.exports = __webpack_public_path__ + \"static_main/media/Roboto-300-greek-ext3.d4a587db.woff2\";","module.exports = __webpack_public_path__ + \"static_main/media/Roboto-300-greek4.f7059272.woff2\";","module.exports = __webpack_public_path__ + \"static_main/media/Roboto-300-latin-ext6.e83b8f97.woff2\";","module.exports = __webpack_public_path__ + \"static_main/media/Roboto-300-latin7.ef7c6637.woff2\";","module.exports = __webpack_public_path__ + \"static_main/media/Roboto-300-vietnamese5.484cddf4.woff2\";","module.exports = __webpack_public_path__ + \"static_main/media/Roboto-400-cyrillic-ext8.4743c758.woff2\";","module.exports = __webpack_public_path__ + \"static_main/media/Roboto-400-cyrillic9.8bb64952.woff2\";","module.exports = __webpack_public_path__ + \"static_main/media/Roboto-400-greek-ext10.182ee6a4.woff2\";","module.exports = __webpack_public_path__ + \"static_main/media/Roboto-400-greek11.c1e9793c.woff2\";","module.exports = __webpack_public_path__ + \"static_main/media/Roboto-400-latin-ext13.455200cb.woff2\";","module.exports = __webpack_public_path__ + \"static_main/media/Roboto-400-latin14.479970ff.woff2\";","module.exports = __webpack_public_path__ + \"static_main/media/Roboto-400-vietnamese12.a8be5b46.woff2\";","module.exports = __webpack_public_path__ + \"static_main/media/Roboto-500-cyrillic-ext15.378698af.woff2\";","module.exports = __webpack_public_path__ + \"static_main/media/Roboto-500-cyrillic16.7fd643e6.woff2\";","module.exports = __webpack_public_path__ + \"static_main/media/Roboto-500-greek-ext17.0f80978b.woff2\";","module.exports = __webpack_public_path__ + \"static_main/media/Roboto-500-greek18.665639f6.woff2\";","module.exports = __webpack_public_path__ + \"static_main/media/Roboto-500-latin-ext20.b1b80843.woff2\";","module.exports = __webpack_public_path__ + \"static_main/media/Roboto-500-latin21.020c97dc.woff2\";","module.exports = __webpack_public_path__ + \"static_main/media/Roboto-500-vietnamese19.16423fb4.woff2\";","module.exports = __webpack_public_path__ + \"static_main/media/Roboto-700-cyrillic-ext22.2522a38e.woff2\";","module.exports = __webpack_public_path__ + \"static_main/media/Roboto-700-cyrillic23.9d484aa9.woff2\";","module.exports = __webpack_public_path__ + \"static_main/media/Roboto-700-greek-ext24.029b92b9.woff2\";","module.exports = __webpack_public_path__ + \"static_main/media/Roboto-700-greek25.16d9701c.woff2\";","module.exports = __webpack_public_path__ + \"static_main/media/Roboto-700-latin-ext27.188b3976.woff2\";","module.exports = __webpack_public_path__ + \"static_main/media/Roboto-700-latin28.2735a3a6.woff2\";","module.exports = __webpack_public_path__ + \"static_main/media/Roboto-700-vietnamese26.d9600d97.woff2\";","var content = require(\"!!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-3-1!../../node_modules/postcss-loader/src/index.js??postcss!./fonts.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {}\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = require(\"!../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'\n\nrequire('./less/index.less');\nrequire('./fonts/fonts.css');\n\nReactDOM.render(\n    <App/>,\n    document.getElementById('root')\n);","var content = require(\"!!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-7-1!../../node_modules/postcss-loader/src/index.js??postcss!../../node_modules/less-loader/dist/cjs.js??ref--6-oneOf-7-3!./index.less\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {}\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = require(\"!../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n"],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClCA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAnDA;AACA;AAoDA;;;;;;;;;;;;;;;;;AClEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AAFA;AAIA;AAKA;AACA;AACA;AACA;AAIA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AA5GA;AACA;AA6GA;;;;;;;;;;;;;;;;;;;AChHA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AACA;AACA;AACA;AACA;AApEA;AACA;AAqEA;;;;;;;;;;;;;;;;;AC1EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AAEA;AACA;AAFA;AAOA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAEA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AA1FA;AACA;AA2FA;;;;;;;;;;;;;;;;AC/FA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AA1CA;AACA;AA2CA;;;;;;;;;;;;;;;;;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AA9GA;AACA;AAgHA;;;;;;;;;;;;;;;;ACrHA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAtBA;AACA;AAuBA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AADA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AAAA;AAAA;AAAA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AAvEA;AACA;AAyEA;;;;;;;;;;;;ACpGA;AAAA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AChaA;AACA;AACA;AACA;AACA;AACA;AA1EA;AACA;AA2EA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpzKA;AACA;AA0KA;;;;;;;;;;;;;;;;;;ACxNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AArHA;AACA;AAsHA;;;;;;;;;;;;;;;;;AC3HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAFA;AAcA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAvEA;AACA;AAwEA;;;;;;;;;;;;;;;;AC5EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAKA;AAEA;AACA;AAFA;AAcA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AA1IA;AACA;AA2IA;;;;;;;;;;;;;;;;AC9IA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AAnHA;AACA;AAoHA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AADA;AAGA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;AACA;AA5IA;AACA;AA6IA;;;;;;;;;;;;;;;;;ACtQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AAxCA;AACA;AAyCA;;;;;;;;;;;;;;;;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AACA;AA7FA;AACA;AA8FA;;;;;;;;;;;;;;;;;;;;;AClaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAjHA;AACA;AAmHA;;;;;;;;;;;;;;;;;AC3HA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AA7CA;AACA;AA8CA;;;;;;;;;;;;;;;;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AAKA;AAEA;AACA;AAFA;AAcjPA;AACA;AAkPA;;;;;;;;;;;;;;;;;;;ACtPA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAnEA;AACA;AAqEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAFA;AAOA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AACA;AArQA;AACA;AAsQA;;;;;;;;;;;;;;;;;;;;;ACnVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;;;;;;AAMA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAUA;AACA;AAEA;AACA;AAUA;AACA;AACA;AACA;AAUA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAtNA;AACA;AAuNA;;;;;;;;;;;;;;;;;;;;AC/NA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AAEA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmCA;AACA;AAzPA;AACA;AA2PA;;;;;;;;;;;;;;;;;;;ACliBA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAlIA;AACA;AAoIA;;;;;;;;;;;;;;;;;AC1IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAFA;AAahIA;AACA;AAiIA;;;;;;;;;;;;;;;;ACrIA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAIA;AAIA;AAEA;AAMA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AA7DA;AACA;AA8DA;;;;;;;;;;;;ACjEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAGA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AA9KA;AACA;AAgLA;;;;;;;;;;;;;;;;;;;ACpLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AADA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;AADA;AAIA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AA/FA;AACA;AAiGA;;;;;;;;;;;;;;;;;;ACvGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AADA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAlBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwBA;AACA;AAxGA;AACA;AAyGA;;;;;;;;;;;;;;;;;;;;;AC7GA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AA7CA;AACA;AA+CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AAUA;AACA;AAEA;AACA;AAUA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAtLA;AACA;AAuLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAjFA;AACA;AAkFA;;;;;;;;;;;;AChWA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAFA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AA9TA;AACA;AAgUA;;;;;;;;;;;;;;;;;;;;;ACpUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAFA;AAcA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AADA;AAGA;AACA;AACA;AAEA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAjRA;AACA;AAkRA;;;;;;;;;;;;;;;;;;;;ACzRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AA5DA;AACA;AA+DA;;;;;;;;;;;;;;;;;;;;ACtEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AASA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAFA;AAaA;AAGA;AACA;AADA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAFA;AAelOA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;A","sourceRoot":""}