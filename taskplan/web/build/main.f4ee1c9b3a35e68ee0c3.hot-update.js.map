{"version":3,"file":"main.f4ee1c9b3a35e68ee0c3.hot-update.js","sources":["/home/domin/Dokumente/taskplan/taskplan/web/src/Device.js"],"sourcesContent":["import React from 'react';\nimport State from './Global'\nimport Task from './Task'\nimport Prompt from \"./Prompt\";\n\nclass Device extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            max_running: 1,\n            showQueue: false\n        };\n\n        this.openMaxRunningDialog = this.openMaxRunningDialog.bind(this);\n        this.connect = this.connect.bind(this);\n    }\n\n    openMaxRunningDialog() {\n        this.openMaxRunningDialogRefs.current.openDialog();\n    }\n\n    connect() {\n        fetch(\"/connect_device/\" + this.props.device.uuid)\n            .then(res => res.json())\n            .then(\n                (result) => {\n                }\n            )\n    }\n\n    disconnect() {\n        fetch(\"/disconnect_device/\" + this.props.device.uuid)\n            .then(res => res.json())\n            .then(\n                (result) => {\n                }\n            )\n    }\n\n    toggleQueue() {\n        this.setState({\n            showQueue: !this.state.showQueue\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"device\">\n                <div className=\"header\">\n                    <span>{this.props.device.name}</span>\n                    {this.props.device.is_connected === 0 &&\n                        <div className=\"action\" onClick={this.connect}>\n                            Connect\n                        </div>\n                    }\n                    {this.props.device.is_connected === 1 &&\n                        <div className=\"action\" onClick={this.disconnect}>\n                            Disconnect\n                        </div>\n                    }\n                    <div onClick={() => this.props.hideDevice(this.props.device)}>\n                        <i className=\"fas fa-times\"></i>\n                    </div>\n                </div>\n\n                <div className=\"body\">\n                    {this.props.device.is_connected !== 0 &&\n                        <ul className=\"tasks\" id=\"tasks-running\">\n                            {this.props.tasks.filter(task => task.state === State.RUNNING).length === 0 &&\n                            <li className=\"mock-task\">\n                                Idle\n                            </li>\n                            }\n                            {this.props.tasks.filter(task => task.state === State.RUNNING).map((task, index) => (\n                                <Task\n                                    key={task.uuid}\n                                    task={task}\n                                    index={index}\n                                    highlightTask={this.props.highlightTask}\n                                />\n                            ))\n                            }\n                        </ul>\n                    }\n\n                    <div className=\"queue-header\">\n                        <div className=\"action\" onClick={this.toggleQueue}>\n                            {this.state.showQueue ?\n                                <i className=\"fas fa-minus\"></i>\n                                :\n                                <i className=\"fas fa-plus\"></i>\n                            }\n                        </div>\n                        Waiting ({this.props.tasks.filter(task => task.state === State.QUEUED).length})\n                    </div>\n                    {this.state.showQueue &&\n                        <ul className=\"tasks\" id=\"tasks-queued\">\n                            {this.props.tasks.filter(task => task.state === State.QUEUED).sort(function (a, b) {\n                                return a.queue_index - b.queue_index\n                            }).map((task, index) => (\n                                <Task\n                                    key={task.uuid}\n                                    task={task}\n                                    index={index}\n                                    highlightTask={this.props.highlightTask}\n                                />\n                            ))}\n                        </ul>\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\n\nexport default Device;"],"mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AA5GA;AACA;AA8GA;;;;A","sourceRoot":""}